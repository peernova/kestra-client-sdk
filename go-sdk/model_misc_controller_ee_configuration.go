/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"time"
)

// checks if the MiscControllerEEConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MiscControllerEEConfiguration{}

// MiscControllerEEConfiguration struct for MiscControllerEEConfiguration
type MiscControllerEEConfiguration struct {
	Uuid                            *string                                `json:"uuid,omitempty"`
	Version                         *string                                `json:"version,omitempty"`
	Edition                         *EditionProviderEdition                `json:"edition,omitempty"`
	CommitId                        *string                                `json:"commitId,omitempty"`
	CommitDate                      *time.Time                             `json:"commitDate,omitempty"`
	IsCustomDashboardsEnabled       *bool                                  `json:"isCustomDashboardsEnabled,omitempty"`
	IsTaskRunEnabled                *bool                                  `json:"isTaskRunEnabled,omitempty"`
	IsAnonymousUsageEnabled         *bool                                  `json:"isAnonymousUsageEnabled,omitempty"`
	IsUiAnonymousUsageEnabled       *bool                                  `json:"isUiAnonymousUsageEnabled,omitempty"`
	IsTemplateEnabled               *bool                                  `json:"isTemplateEnabled,omitempty"`
	Environment                     *MiscControllerEnvironment             `json:"environment,omitempty"`
	Url                             *string                                `json:"url,omitempty"`
	Preview                         *MiscControllerPreview                 `json:"preview,omitempty"`
	SystemNamespace                 *string                                `json:"systemNamespace,omitempty"`
	HiddenLabelsPrefixes            []string                               `json:"hiddenLabelsPrefixes,omitempty"`
	ResourceToFilters               []QueryFilterResourceField             `json:"resourceToFilters,omitempty"`
	IsAiEnabled                     *bool                                  `json:"isAiEnabled,omitempty"`
	IsBasicAuthInitialized          *bool                                  `json:"isBasicAuthInitialized,omitempty"`
	PluginsHash                     *int64                                 `json:"pluginsHash,omitempty"`
	Tenants                         *MiscControllerTenantConfigurationInfo `json:"tenants,omitempty"`
	SecretsEnabled                  *bool                                  `json:"secretsEnabled,omitempty"`
	SupportedStorages               []MiscControllerPluginIdAndVersion     `json:"supportedStorages,omitempty"`
	SupportedSecrets                []MiscControllerPluginIdAndVersion     `json:"supportedSecrets,omitempty"`
	PluginManagementEnabled         *bool                                  `json:"pluginManagementEnabled,omitempty"`
	PluginCustomEnabled             *bool                                  `json:"pluginCustomEnabled,omitempty"`
	Banner                          *Banner                                `json:"banner,omitempty"`
	MailServiceEnabled              *bool                                  `json:"mailServiceEnabled,omitempty"`
	OutputsInInternalStorageEnabled *bool                                  `json:"outputsInInternalStorageEnabled,omitempty"`
	LeftSidebar                     *LeftSidebarConfiguration              `json:"leftSidebar,omitempty"`
	RightSidebar                    *RightSidebarConfiguration             `json:"rightSidebar,omitempty"`
	InMaintenance                   *bool                                  `json:"inMaintenance,omitempty"`
	PasswordRegexp                  *string                                `json:"passwordRegexp,omitempty"`
	AdditionalProperties            map[string]interface{}
}

type _MiscControllerEEConfiguration MiscControllerEEConfiguration

// NewMiscControllerEEConfiguration instantiates a new MiscControllerEEConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMiscControllerEEConfiguration() *MiscControllerEEConfiguration {
	this := MiscControllerEEConfiguration{}
	return &this
}

// NewMiscControllerEEConfigurationWithDefaults instantiates a new MiscControllerEEConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMiscControllerEEConfigurationWithDefaults() *MiscControllerEEConfiguration {
	this := MiscControllerEEConfiguration{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *MiscControllerEEConfiguration) SetUuid(v string) {
	o.Uuid = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *MiscControllerEEConfiguration) SetVersion(v string) {
	o.Version = &v
}

// GetEdition returns the Edition field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetEdition() EditionProviderEdition {
	if o == nil || IsNil(o.Edition) {
		var ret EditionProviderEdition
		return ret
	}
	return *o.Edition
}

// GetEditionOk returns a tuple with the Edition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetEditionOk() (*EditionProviderEdition, bool) {
	if o == nil || IsNil(o.Edition) {
		return nil, false
	}
	return o.Edition, true
}

// HasEdition returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasEdition() bool {
	if o != nil && !IsNil(o.Edition) {
		return true
	}

	return false
}

// SetEdition gets a reference to the given EditionProviderEdition and assigns it to the Edition field.
func (o *MiscControllerEEConfiguration) SetEdition(v EditionProviderEdition) {
	o.Edition = &v
}

// GetCommitId returns the CommitId field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetCommitId() string {
	if o == nil || IsNil(o.CommitId) {
		var ret string
		return ret
	}
	return *o.CommitId
}

// GetCommitIdOk returns a tuple with the CommitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetCommitIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommitId) {
		return nil, false
	}
	return o.CommitId, true
}

// HasCommitId returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasCommitId() bool {
	if o != nil && !IsNil(o.CommitId) {
		return true
	}

	return false
}

// SetCommitId gets a reference to the given string and assigns it to the CommitId field.
func (o *MiscControllerEEConfiguration) SetCommitId(v string) {
	o.CommitId = &v
}

// GetCommitDate returns the CommitDate field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetCommitDate() time.Time {
	if o == nil || IsNil(o.CommitDate) {
		var ret time.Time
		return ret
	}
	return *o.CommitDate
}

// GetCommitDateOk returns a tuple with the CommitDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetCommitDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CommitDate) {
		return nil, false
	}
	return o.CommitDate, true
}

// HasCommitDate returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasCommitDate() bool {
	if o != nil && !IsNil(o.CommitDate) {
		return true
	}

	return false
}

// SetCommitDate gets a reference to the given time.Time and assigns it to the CommitDate field.
func (o *MiscControllerEEConfiguration) SetCommitDate(v time.Time) {
	o.CommitDate = &v
}

// GetIsCustomDashboardsEnabled returns the IsCustomDashboardsEnabled field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetIsCustomDashboardsEnabled() bool {
	if o == nil || IsNil(o.IsCustomDashboardsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsCustomDashboardsEnabled
}

// GetIsCustomDashboardsEnabledOk returns a tuple with the IsCustomDashboardsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetIsCustomDashboardsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCustomDashboardsEnabled) {
		return nil, false
	}
	return o.IsCustomDashboardsEnabled, true
}

// HasIsCustomDashboardsEnabled returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasIsCustomDashboardsEnabled() bool {
	if o != nil && !IsNil(o.IsCustomDashboardsEnabled) {
		return true
	}

	return false
}

// SetIsCustomDashboardsEnabled gets a reference to the given bool and assigns it to the IsCustomDashboardsEnabled field.
func (o *MiscControllerEEConfiguration) SetIsCustomDashboardsEnabled(v bool) {
	o.IsCustomDashboardsEnabled = &v
}

// GetIsTaskRunEnabled returns the IsTaskRunEnabled field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetIsTaskRunEnabled() bool {
	if o == nil || IsNil(o.IsTaskRunEnabled) {
		var ret bool
		return ret
	}
	return *o.IsTaskRunEnabled
}

// GetIsTaskRunEnabledOk returns a tuple with the IsTaskRunEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetIsTaskRunEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTaskRunEnabled) {
		return nil, false
	}
	return o.IsTaskRunEnabled, true
}

// HasIsTaskRunEnabled returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasIsTaskRunEnabled() bool {
	if o != nil && !IsNil(o.IsTaskRunEnabled) {
		return true
	}

	return false
}

// SetIsTaskRunEnabled gets a reference to the given bool and assigns it to the IsTaskRunEnabled field.
func (o *MiscControllerEEConfiguration) SetIsTaskRunEnabled(v bool) {
	o.IsTaskRunEnabled = &v
}

// GetIsAnonymousUsageEnabled returns the IsAnonymousUsageEnabled field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetIsAnonymousUsageEnabled() bool {
	if o == nil || IsNil(o.IsAnonymousUsageEnabled) {
		var ret bool
		return ret
	}
	return *o.IsAnonymousUsageEnabled
}

// GetIsAnonymousUsageEnabledOk returns a tuple with the IsAnonymousUsageEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetIsAnonymousUsageEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAnonymousUsageEnabled) {
		return nil, false
	}
	return o.IsAnonymousUsageEnabled, true
}

// HasIsAnonymousUsageEnabled returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasIsAnonymousUsageEnabled() bool {
	if o != nil && !IsNil(o.IsAnonymousUsageEnabled) {
		return true
	}

	return false
}

// SetIsAnonymousUsageEnabled gets a reference to the given bool and assigns it to the IsAnonymousUsageEnabled field.
func (o *MiscControllerEEConfiguration) SetIsAnonymousUsageEnabled(v bool) {
	o.IsAnonymousUsageEnabled = &v
}

// GetIsUiAnonymousUsageEnabled returns the IsUiAnonymousUsageEnabled field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetIsUiAnonymousUsageEnabled() bool {
	if o == nil || IsNil(o.IsUiAnonymousUsageEnabled) {
		var ret bool
		return ret
	}
	return *o.IsUiAnonymousUsageEnabled
}

// GetIsUiAnonymousUsageEnabledOk returns a tuple with the IsUiAnonymousUsageEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetIsUiAnonymousUsageEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUiAnonymousUsageEnabled) {
		return nil, false
	}
	return o.IsUiAnonymousUsageEnabled, true
}

// HasIsUiAnonymousUsageEnabled returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasIsUiAnonymousUsageEnabled() bool {
	if o != nil && !IsNil(o.IsUiAnonymousUsageEnabled) {
		return true
	}

	return false
}

// SetIsUiAnonymousUsageEnabled gets a reference to the given bool and assigns it to the IsUiAnonymousUsageEnabled field.
func (o *MiscControllerEEConfiguration) SetIsUiAnonymousUsageEnabled(v bool) {
	o.IsUiAnonymousUsageEnabled = &v
}

// GetIsTemplateEnabled returns the IsTemplateEnabled field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetIsTemplateEnabled() bool {
	if o == nil || IsNil(o.IsTemplateEnabled) {
		var ret bool
		return ret
	}
	return *o.IsTemplateEnabled
}

// GetIsTemplateEnabledOk returns a tuple with the IsTemplateEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetIsTemplateEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTemplateEnabled) {
		return nil, false
	}
	return o.IsTemplateEnabled, true
}

// HasIsTemplateEnabled returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasIsTemplateEnabled() bool {
	if o != nil && !IsNil(o.IsTemplateEnabled) {
		return true
	}

	return false
}

// SetIsTemplateEnabled gets a reference to the given bool and assigns it to the IsTemplateEnabled field.
func (o *MiscControllerEEConfiguration) SetIsTemplateEnabled(v bool) {
	o.IsTemplateEnabled = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetEnvironment() MiscControllerEnvironment {
	if o == nil || IsNil(o.Environment) {
		var ret MiscControllerEnvironment
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetEnvironmentOk() (*MiscControllerEnvironment, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given MiscControllerEnvironment and assigns it to the Environment field.
func (o *MiscControllerEEConfiguration) SetEnvironment(v MiscControllerEnvironment) {
	o.Environment = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *MiscControllerEEConfiguration) SetUrl(v string) {
	o.Url = &v
}

// GetPreview returns the Preview field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetPreview() MiscControllerPreview {
	if o == nil || IsNil(o.Preview) {
		var ret MiscControllerPreview
		return ret
	}
	return *o.Preview
}

// GetPreviewOk returns a tuple with the Preview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetPreviewOk() (*MiscControllerPreview, bool) {
	if o == nil || IsNil(o.Preview) {
		return nil, false
	}
	return o.Preview, true
}

// HasPreview returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasPreview() bool {
	if o != nil && !IsNil(o.Preview) {
		return true
	}

	return false
}

// SetPreview gets a reference to the given MiscControllerPreview and assigns it to the Preview field.
func (o *MiscControllerEEConfiguration) SetPreview(v MiscControllerPreview) {
	o.Preview = &v
}

// GetSystemNamespace returns the SystemNamespace field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetSystemNamespace() string {
	if o == nil || IsNil(o.SystemNamespace) {
		var ret string
		return ret
	}
	return *o.SystemNamespace
}

// GetSystemNamespaceOk returns a tuple with the SystemNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetSystemNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.SystemNamespace) {
		return nil, false
	}
	return o.SystemNamespace, true
}

// HasSystemNamespace returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasSystemNamespace() bool {
	if o != nil && !IsNil(o.SystemNamespace) {
		return true
	}

	return false
}

// SetSystemNamespace gets a reference to the given string and assigns it to the SystemNamespace field.
func (o *MiscControllerEEConfiguration) SetSystemNamespace(v string) {
	o.SystemNamespace = &v
}

// GetHiddenLabelsPrefixes returns the HiddenLabelsPrefixes field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetHiddenLabelsPrefixes() []string {
	if o == nil || IsNil(o.HiddenLabelsPrefixes) {
		var ret []string
		return ret
	}
	return o.HiddenLabelsPrefixes
}

// GetHiddenLabelsPrefixesOk returns a tuple with the HiddenLabelsPrefixes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetHiddenLabelsPrefixesOk() ([]string, bool) {
	if o == nil || IsNil(o.HiddenLabelsPrefixes) {
		return nil, false
	}
	return o.HiddenLabelsPrefixes, true
}

// HasHiddenLabelsPrefixes returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasHiddenLabelsPrefixes() bool {
	if o != nil && !IsNil(o.HiddenLabelsPrefixes) {
		return true
	}

	return false
}

// SetHiddenLabelsPrefixes gets a reference to the given []string and assigns it to the HiddenLabelsPrefixes field.
func (o *MiscControllerEEConfiguration) SetHiddenLabelsPrefixes(v []string) {
	o.HiddenLabelsPrefixes = v
}

// GetResourceToFilters returns the ResourceToFilters field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetResourceToFilters() []QueryFilterResourceField {
	if o == nil || IsNil(o.ResourceToFilters) {
		var ret []QueryFilterResourceField
		return ret
	}
	return o.ResourceToFilters
}

// GetResourceToFiltersOk returns a tuple with the ResourceToFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetResourceToFiltersOk() ([]QueryFilterResourceField, bool) {
	if o == nil || IsNil(o.ResourceToFilters) {
		return nil, false
	}
	return o.ResourceToFilters, true
}

// HasResourceToFilters returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasResourceToFilters() bool {
	if o != nil && !IsNil(o.ResourceToFilters) {
		return true
	}

	return false
}

// SetResourceToFilters gets a reference to the given []QueryFilterResourceField and assigns it to the ResourceToFilters field.
func (o *MiscControllerEEConfiguration) SetResourceToFilters(v []QueryFilterResourceField) {
	o.ResourceToFilters = v
}

// GetIsAiEnabled returns the IsAiEnabled field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetIsAiEnabled() bool {
	if o == nil || IsNil(o.IsAiEnabled) {
		var ret bool
		return ret
	}
	return *o.IsAiEnabled
}

// GetIsAiEnabledOk returns a tuple with the IsAiEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetIsAiEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAiEnabled) {
		return nil, false
	}
	return o.IsAiEnabled, true
}

// HasIsAiEnabled returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasIsAiEnabled() bool {
	if o != nil && !IsNil(o.IsAiEnabled) {
		return true
	}

	return false
}

// SetIsAiEnabled gets a reference to the given bool and assigns it to the IsAiEnabled field.
func (o *MiscControllerEEConfiguration) SetIsAiEnabled(v bool) {
	o.IsAiEnabled = &v
}

// GetIsBasicAuthInitialized returns the IsBasicAuthInitialized field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetIsBasicAuthInitialized() bool {
	if o == nil || IsNil(o.IsBasicAuthInitialized) {
		var ret bool
		return ret
	}
	return *o.IsBasicAuthInitialized
}

// GetIsBasicAuthInitializedOk returns a tuple with the IsBasicAuthInitialized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetIsBasicAuthInitializedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBasicAuthInitialized) {
		return nil, false
	}
	return o.IsBasicAuthInitialized, true
}

// HasIsBasicAuthInitialized returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasIsBasicAuthInitialized() bool {
	if o != nil && !IsNil(o.IsBasicAuthInitialized) {
		return true
	}

	return false
}

// SetIsBasicAuthInitialized gets a reference to the given bool and assigns it to the IsBasicAuthInitialized field.
func (o *MiscControllerEEConfiguration) SetIsBasicAuthInitialized(v bool) {
	o.IsBasicAuthInitialized = &v
}

// GetPluginsHash returns the PluginsHash field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetPluginsHash() int64 {
	if o == nil || IsNil(o.PluginsHash) {
		var ret int64
		return ret
	}
	return *o.PluginsHash
}

// GetPluginsHashOk returns a tuple with the PluginsHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetPluginsHashOk() (*int64, bool) {
	if o == nil || IsNil(o.PluginsHash) {
		return nil, false
	}
	return o.PluginsHash, true
}

// HasPluginsHash returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasPluginsHash() bool {
	if o != nil && !IsNil(o.PluginsHash) {
		return true
	}

	return false
}

// SetPluginsHash gets a reference to the given int64 and assigns it to the PluginsHash field.
func (o *MiscControllerEEConfiguration) SetPluginsHash(v int64) {
	o.PluginsHash = &v
}

// GetTenants returns the Tenants field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetTenants() MiscControllerTenantConfigurationInfo {
	if o == nil || IsNil(o.Tenants) {
		var ret MiscControllerTenantConfigurationInfo
		return ret
	}
	return *o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetTenantsOk() (*MiscControllerTenantConfigurationInfo, bool) {
	if o == nil || IsNil(o.Tenants) {
		return nil, false
	}
	return o.Tenants, true
}

// HasTenants returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasTenants() bool {
	if o != nil && !IsNil(o.Tenants) {
		return true
	}

	return false
}

// SetTenants gets a reference to the given MiscControllerTenantConfigurationInfo and assigns it to the Tenants field.
func (o *MiscControllerEEConfiguration) SetTenants(v MiscControllerTenantConfigurationInfo) {
	o.Tenants = &v
}

// GetSecretsEnabled returns the SecretsEnabled field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetSecretsEnabled() bool {
	if o == nil || IsNil(o.SecretsEnabled) {
		var ret bool
		return ret
	}
	return *o.SecretsEnabled
}

// GetSecretsEnabledOk returns a tuple with the SecretsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetSecretsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SecretsEnabled) {
		return nil, false
	}
	return o.SecretsEnabled, true
}

// HasSecretsEnabled returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasSecretsEnabled() bool {
	if o != nil && !IsNil(o.SecretsEnabled) {
		return true
	}

	return false
}

// SetSecretsEnabled gets a reference to the given bool and assigns it to the SecretsEnabled field.
func (o *MiscControllerEEConfiguration) SetSecretsEnabled(v bool) {
	o.SecretsEnabled = &v
}

// GetSupportedStorages returns the SupportedStorages field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetSupportedStorages() []MiscControllerPluginIdAndVersion {
	if o == nil || IsNil(o.SupportedStorages) {
		var ret []MiscControllerPluginIdAndVersion
		return ret
	}
	return o.SupportedStorages
}

// GetSupportedStoragesOk returns a tuple with the SupportedStorages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetSupportedStoragesOk() ([]MiscControllerPluginIdAndVersion, bool) {
	if o == nil || IsNil(o.SupportedStorages) {
		return nil, false
	}
	return o.SupportedStorages, true
}

// HasSupportedStorages returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasSupportedStorages() bool {
	if o != nil && !IsNil(o.SupportedStorages) {
		return true
	}

	return false
}

// SetSupportedStorages gets a reference to the given []MiscControllerPluginIdAndVersion and assigns it to the SupportedStorages field.
func (o *MiscControllerEEConfiguration) SetSupportedStorages(v []MiscControllerPluginIdAndVersion) {
	o.SupportedStorages = v
}

// GetSupportedSecrets returns the SupportedSecrets field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetSupportedSecrets() []MiscControllerPluginIdAndVersion {
	if o == nil || IsNil(o.SupportedSecrets) {
		var ret []MiscControllerPluginIdAndVersion
		return ret
	}
	return o.SupportedSecrets
}

// GetSupportedSecretsOk returns a tuple with the SupportedSecrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetSupportedSecretsOk() ([]MiscControllerPluginIdAndVersion, bool) {
	if o == nil || IsNil(o.SupportedSecrets) {
		return nil, false
	}
	return o.SupportedSecrets, true
}

// HasSupportedSecrets returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasSupportedSecrets() bool {
	if o != nil && !IsNil(o.SupportedSecrets) {
		return true
	}

	return false
}

// SetSupportedSecrets gets a reference to the given []MiscControllerPluginIdAndVersion and assigns it to the SupportedSecrets field.
func (o *MiscControllerEEConfiguration) SetSupportedSecrets(v []MiscControllerPluginIdAndVersion) {
	o.SupportedSecrets = v
}

// GetPluginManagementEnabled returns the PluginManagementEnabled field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetPluginManagementEnabled() bool {
	if o == nil || IsNil(o.PluginManagementEnabled) {
		var ret bool
		return ret
	}
	return *o.PluginManagementEnabled
}

// GetPluginManagementEnabledOk returns a tuple with the PluginManagementEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetPluginManagementEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PluginManagementEnabled) {
		return nil, false
	}
	return o.PluginManagementEnabled, true
}

// HasPluginManagementEnabled returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasPluginManagementEnabled() bool {
	if o != nil && !IsNil(o.PluginManagementEnabled) {
		return true
	}

	return false
}

// SetPluginManagementEnabled gets a reference to the given bool and assigns it to the PluginManagementEnabled field.
func (o *MiscControllerEEConfiguration) SetPluginManagementEnabled(v bool) {
	o.PluginManagementEnabled = &v
}

// GetPluginCustomEnabled returns the PluginCustomEnabled field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetPluginCustomEnabled() bool {
	if o == nil || IsNil(o.PluginCustomEnabled) {
		var ret bool
		return ret
	}
	return *o.PluginCustomEnabled
}

// GetPluginCustomEnabledOk returns a tuple with the PluginCustomEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetPluginCustomEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PluginCustomEnabled) {
		return nil, false
	}
	return o.PluginCustomEnabled, true
}

// HasPluginCustomEnabled returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasPluginCustomEnabled() bool {
	if o != nil && !IsNil(o.PluginCustomEnabled) {
		return true
	}

	return false
}

// SetPluginCustomEnabled gets a reference to the given bool and assigns it to the PluginCustomEnabled field.
func (o *MiscControllerEEConfiguration) SetPluginCustomEnabled(v bool) {
	o.PluginCustomEnabled = &v
}

// GetBanner returns the Banner field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetBanner() Banner {
	if o == nil || IsNil(o.Banner) {
		var ret Banner
		return ret
	}
	return *o.Banner
}

// GetBannerOk returns a tuple with the Banner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetBannerOk() (*Banner, bool) {
	if o == nil || IsNil(o.Banner) {
		return nil, false
	}
	return o.Banner, true
}

// HasBanner returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasBanner() bool {
	if o != nil && !IsNil(o.Banner) {
		return true
	}

	return false
}

// SetBanner gets a reference to the given Banner and assigns it to the Banner field.
func (o *MiscControllerEEConfiguration) SetBanner(v Banner) {
	o.Banner = &v
}

// GetMailServiceEnabled returns the MailServiceEnabled field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetMailServiceEnabled() bool {
	if o == nil || IsNil(o.MailServiceEnabled) {
		var ret bool
		return ret
	}
	return *o.MailServiceEnabled
}

// GetMailServiceEnabledOk returns a tuple with the MailServiceEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetMailServiceEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.MailServiceEnabled) {
		return nil, false
	}
	return o.MailServiceEnabled, true
}

// HasMailServiceEnabled returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasMailServiceEnabled() bool {
	if o != nil && !IsNil(o.MailServiceEnabled) {
		return true
	}

	return false
}

// SetMailServiceEnabled gets a reference to the given bool and assigns it to the MailServiceEnabled field.
func (o *MiscControllerEEConfiguration) SetMailServiceEnabled(v bool) {
	o.MailServiceEnabled = &v
}

// GetOutputsInInternalStorageEnabled returns the OutputsInInternalStorageEnabled field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetOutputsInInternalStorageEnabled() bool {
	if o == nil || IsNil(o.OutputsInInternalStorageEnabled) {
		var ret bool
		return ret
	}
	return *o.OutputsInInternalStorageEnabled
}

// GetOutputsInInternalStorageEnabledOk returns a tuple with the OutputsInInternalStorageEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetOutputsInInternalStorageEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.OutputsInInternalStorageEnabled) {
		return nil, false
	}
	return o.OutputsInInternalStorageEnabled, true
}

// HasOutputsInInternalStorageEnabled returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasOutputsInInternalStorageEnabled() bool {
	if o != nil && !IsNil(o.OutputsInInternalStorageEnabled) {
		return true
	}

	return false
}

// SetOutputsInInternalStorageEnabled gets a reference to the given bool and assigns it to the OutputsInInternalStorageEnabled field.
func (o *MiscControllerEEConfiguration) SetOutputsInInternalStorageEnabled(v bool) {
	o.OutputsInInternalStorageEnabled = &v
}

// GetLeftSidebar returns the LeftSidebar field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetLeftSidebar() LeftSidebarConfiguration {
	if o == nil || IsNil(o.LeftSidebar) {
		var ret LeftSidebarConfiguration
		return ret
	}
	return *o.LeftSidebar
}

// GetLeftSidebarOk returns a tuple with the LeftSidebar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetLeftSidebarOk() (*LeftSidebarConfiguration, bool) {
	if o == nil || IsNil(o.LeftSidebar) {
		return nil, false
	}
	return o.LeftSidebar, true
}

// HasLeftSidebar returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasLeftSidebar() bool {
	if o != nil && !IsNil(o.LeftSidebar) {
		return true
	}

	return false
}

// SetLeftSidebar gets a reference to the given LeftSidebarConfiguration and assigns it to the LeftSidebar field.
func (o *MiscControllerEEConfiguration) SetLeftSidebar(v LeftSidebarConfiguration) {
	o.LeftSidebar = &v
}

// GetRightSidebar returns the RightSidebar field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetRightSidebar() RightSidebarConfiguration {
	if o == nil || IsNil(o.RightSidebar) {
		var ret RightSidebarConfiguration
		return ret
	}
	return *o.RightSidebar
}

// GetRightSidebarOk returns a tuple with the RightSidebar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetRightSidebarOk() (*RightSidebarConfiguration, bool) {
	if o == nil || IsNil(o.RightSidebar) {
		return nil, false
	}
	return o.RightSidebar, true
}

// HasRightSidebar returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasRightSidebar() bool {
	if o != nil && !IsNil(o.RightSidebar) {
		return true
	}

	return false
}

// SetRightSidebar gets a reference to the given RightSidebarConfiguration and assigns it to the RightSidebar field.
func (o *MiscControllerEEConfiguration) SetRightSidebar(v RightSidebarConfiguration) {
	o.RightSidebar = &v
}

// GetInMaintenance returns the InMaintenance field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetInMaintenance() bool {
	if o == nil || IsNil(o.InMaintenance) {
		var ret bool
		return ret
	}
	return *o.InMaintenance
}

// GetInMaintenanceOk returns a tuple with the InMaintenance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetInMaintenanceOk() (*bool, bool) {
	if o == nil || IsNil(o.InMaintenance) {
		return nil, false
	}
	return o.InMaintenance, true
}

// HasInMaintenance returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasInMaintenance() bool {
	if o != nil && !IsNil(o.InMaintenance) {
		return true
	}

	return false
}

// SetInMaintenance gets a reference to the given bool and assigns it to the InMaintenance field.
func (o *MiscControllerEEConfiguration) SetInMaintenance(v bool) {
	o.InMaintenance = &v
}

// GetPasswordRegexp returns the PasswordRegexp field value if set, zero value otherwise.
func (o *MiscControllerEEConfiguration) GetPasswordRegexp() string {
	if o == nil || IsNil(o.PasswordRegexp) {
		var ret string
		return ret
	}
	return *o.PasswordRegexp
}

// GetPasswordRegexpOk returns a tuple with the PasswordRegexp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerEEConfiguration) GetPasswordRegexpOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordRegexp) {
		return nil, false
	}
	return o.PasswordRegexp, true
}

// HasPasswordRegexp returns a boolean if a field has been set.
func (o *MiscControllerEEConfiguration) HasPasswordRegexp() bool {
	if o != nil && !IsNil(o.PasswordRegexp) {
		return true
	}

	return false
}

// SetPasswordRegexp gets a reference to the given string and assigns it to the PasswordRegexp field.
func (o *MiscControllerEEConfiguration) SetPasswordRegexp(v string) {
	o.PasswordRegexp = &v
}

func (o MiscControllerEEConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MiscControllerEEConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Edition) {
		toSerialize["edition"] = o.Edition
	}
	if !IsNil(o.CommitId) {
		toSerialize["commitId"] = o.CommitId
	}
	if !IsNil(o.CommitDate) {
		toSerialize["commitDate"] = o.CommitDate
	}
	if !IsNil(o.IsCustomDashboardsEnabled) {
		toSerialize["isCustomDashboardsEnabled"] = o.IsCustomDashboardsEnabled
	}
	if !IsNil(o.IsTaskRunEnabled) {
		toSerialize["isTaskRunEnabled"] = o.IsTaskRunEnabled
	}
	if !IsNil(o.IsAnonymousUsageEnabled) {
		toSerialize["isAnonymousUsageEnabled"] = o.IsAnonymousUsageEnabled
	}
	if !IsNil(o.IsUiAnonymousUsageEnabled) {
		toSerialize["isUiAnonymousUsageEnabled"] = o.IsUiAnonymousUsageEnabled
	}
	if !IsNil(o.IsTemplateEnabled) {
		toSerialize["isTemplateEnabled"] = o.IsTemplateEnabled
	}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Preview) {
		toSerialize["preview"] = o.Preview
	}
	if !IsNil(o.SystemNamespace) {
		toSerialize["systemNamespace"] = o.SystemNamespace
	}
	if !IsNil(o.HiddenLabelsPrefixes) {
		toSerialize["hiddenLabelsPrefixes"] = o.HiddenLabelsPrefixes
	}
	if !IsNil(o.ResourceToFilters) {
		toSerialize["resourceToFilters"] = o.ResourceToFilters
	}
	if !IsNil(o.IsAiEnabled) {
		toSerialize["isAiEnabled"] = o.IsAiEnabled
	}
	if !IsNil(o.IsBasicAuthInitialized) {
		toSerialize["isBasicAuthInitialized"] = o.IsBasicAuthInitialized
	}
	if !IsNil(o.PluginsHash) {
		toSerialize["pluginsHash"] = o.PluginsHash
	}
	if !IsNil(o.Tenants) {
		toSerialize["tenants"] = o.Tenants
	}
	if !IsNil(o.SecretsEnabled) {
		toSerialize["secretsEnabled"] = o.SecretsEnabled
	}
	if !IsNil(o.SupportedStorages) {
		toSerialize["supportedStorages"] = o.SupportedStorages
	}
	if !IsNil(o.SupportedSecrets) {
		toSerialize["supportedSecrets"] = o.SupportedSecrets
	}
	if !IsNil(o.PluginManagementEnabled) {
		toSerialize["pluginManagementEnabled"] = o.PluginManagementEnabled
	}
	if !IsNil(o.PluginCustomEnabled) {
		toSerialize["pluginCustomEnabled"] = o.PluginCustomEnabled
	}
	if !IsNil(o.Banner) {
		toSerialize["banner"] = o.Banner
	}
	if !IsNil(o.MailServiceEnabled) {
		toSerialize["mailServiceEnabled"] = o.MailServiceEnabled
	}
	if !IsNil(o.OutputsInInternalStorageEnabled) {
		toSerialize["outputsInInternalStorageEnabled"] = o.OutputsInInternalStorageEnabled
	}
	if !IsNil(o.LeftSidebar) {
		toSerialize["leftSidebar"] = o.LeftSidebar
	}
	if !IsNil(o.RightSidebar) {
		toSerialize["rightSidebar"] = o.RightSidebar
	}
	if !IsNil(o.InMaintenance) {
		toSerialize["inMaintenance"] = o.InMaintenance
	}
	if !IsNil(o.PasswordRegexp) {
		toSerialize["passwordRegexp"] = o.PasswordRegexp
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MiscControllerEEConfiguration) UnmarshalJSON(data []byte) (err error) {
	varMiscControllerEEConfiguration := _MiscControllerEEConfiguration{}

	err = json.Unmarshal(data, &varMiscControllerEEConfiguration)

	if err != nil {
		return err
	}

	*o = MiscControllerEEConfiguration(varMiscControllerEEConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "version")
		delete(additionalProperties, "edition")
		delete(additionalProperties, "commitId")
		delete(additionalProperties, "commitDate")
		delete(additionalProperties, "isCustomDashboardsEnabled")
		delete(additionalProperties, "isTaskRunEnabled")
		delete(additionalProperties, "isAnonymousUsageEnabled")
		delete(additionalProperties, "isUiAnonymousUsageEnabled")
		delete(additionalProperties, "isTemplateEnabled")
		delete(additionalProperties, "environment")
		delete(additionalProperties, "url")
		delete(additionalProperties, "preview")
		delete(additionalProperties, "systemNamespace")
		delete(additionalProperties, "hiddenLabelsPrefixes")
		delete(additionalProperties, "resourceToFilters")
		delete(additionalProperties, "isAiEnabled")
		delete(additionalProperties, "isBasicAuthInitialized")
		delete(additionalProperties, "pluginsHash")
		delete(additionalProperties, "tenants")
		delete(additionalProperties, "secretsEnabled")
		delete(additionalProperties, "supportedStorages")
		delete(additionalProperties, "supportedSecrets")
		delete(additionalProperties, "pluginManagementEnabled")
		delete(additionalProperties, "pluginCustomEnabled")
		delete(additionalProperties, "banner")
		delete(additionalProperties, "mailServiceEnabled")
		delete(additionalProperties, "outputsInInternalStorageEnabled")
		delete(additionalProperties, "leftSidebar")
		delete(additionalProperties, "rightSidebar")
		delete(additionalProperties, "inMaintenance")
		delete(additionalProperties, "passwordRegexp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMiscControllerEEConfiguration struct {
	value *MiscControllerEEConfiguration
	isSet bool
}

func (v NullableMiscControllerEEConfiguration) Get() *MiscControllerEEConfiguration {
	return v.value
}

func (v *NullableMiscControllerEEConfiguration) Set(val *MiscControllerEEConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableMiscControllerEEConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableMiscControllerEEConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMiscControllerEEConfiguration(val *MiscControllerEEConfiguration) *NullableMiscControllerEEConfiguration {
	return &NullableMiscControllerEEConfiguration{value: val, isSet: true}
}

func (v NullableMiscControllerEEConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMiscControllerEEConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
