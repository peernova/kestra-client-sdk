/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"time"
)

// checks if the MiscControllerConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MiscControllerConfiguration{}

// MiscControllerConfiguration struct for MiscControllerConfiguration
type MiscControllerConfiguration struct {
	Uuid                      *string                    `json:"uuid,omitempty"`
	Version                   *string                    `json:"version,omitempty"`
	Edition                   *EditionProviderEdition    `json:"edition,omitempty"`
	CommitId                  *string                    `json:"commitId,omitempty"`
	CommitDate                *time.Time                 `json:"commitDate,omitempty"`
	IsCustomDashboardsEnabled *bool                      `json:"isCustomDashboardsEnabled,omitempty"`
	IsTaskRunEnabled          *bool                      `json:"isTaskRunEnabled,omitempty"`
	IsAnonymousUsageEnabled   *bool                      `json:"isAnonymousUsageEnabled,omitempty"`
	IsUiAnonymousUsageEnabled *bool                      `json:"isUiAnonymousUsageEnabled,omitempty"`
	IsTemplateEnabled         *bool                      `json:"isTemplateEnabled,omitempty"`
	Environment               *MiscControllerEnvironment `json:"environment,omitempty"`
	Url                       *string                    `json:"url,omitempty"`
	Preview                   *MiscControllerPreview     `json:"preview,omitempty"`
	SystemNamespace           *string                    `json:"systemNamespace,omitempty"`
	HiddenLabelsPrefixes      []string                   `json:"hiddenLabelsPrefixes,omitempty"`
	ResourceToFilters         []QueryFilterResourceField `json:"resourceToFilters,omitempty"`
	IsAiEnabled               *bool                      `json:"isAiEnabled,omitempty"`
	IsBasicAuthInitialized    *bool                      `json:"isBasicAuthInitialized,omitempty"`
	PluginsHash               *int64                     `json:"pluginsHash,omitempty"`
	AdditionalProperties      map[string]interface{}
}

type _MiscControllerConfiguration MiscControllerConfiguration

// NewMiscControllerConfiguration instantiates a new MiscControllerConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMiscControllerConfiguration() *MiscControllerConfiguration {
	this := MiscControllerConfiguration{}
	return &this
}

// NewMiscControllerConfigurationWithDefaults instantiates a new MiscControllerConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMiscControllerConfigurationWithDefaults() *MiscControllerConfiguration {
	this := MiscControllerConfiguration{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *MiscControllerConfiguration) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerConfiguration) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *MiscControllerConfiguration) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *MiscControllerConfiguration) SetUuid(v string) {
	o.Uuid = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *MiscControllerConfiguration) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerConfiguration) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *MiscControllerConfiguration) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *MiscControllerConfiguration) SetVersion(v string) {
	o.Version = &v
}

// GetEdition returns the Edition field value if set, zero value otherwise.
func (o *MiscControllerConfiguration) GetEdition() EditionProviderEdition {
	if o == nil || IsNil(o.Edition) {
		var ret EditionProviderEdition
		return ret
	}
	return *o.Edition
}

// GetEditionOk returns a tuple with the Edition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerConfiguration) GetEditionOk() (*EditionProviderEdition, bool) {
	if o == nil || IsNil(o.Edition) {
		return nil, false
	}
	return o.Edition, true
}

// HasEdition returns a boolean if a field has been set.
func (o *MiscControllerConfiguration) HasEdition() bool {
	if o != nil && !IsNil(o.Edition) {
		return true
	}

	return false
}

// SetEdition gets a reference to the given EditionProviderEdition and assigns it to the Edition field.
func (o *MiscControllerConfiguration) SetEdition(v EditionProviderEdition) {
	o.Edition = &v
}

// GetCommitId returns the CommitId field value if set, zero value otherwise.
func (o *MiscControllerConfiguration) GetCommitId() string {
	if o == nil || IsNil(o.CommitId) {
		var ret string
		return ret
	}
	return *o.CommitId
}

// GetCommitIdOk returns a tuple with the CommitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerConfiguration) GetCommitIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommitId) {
		return nil, false
	}
	return o.CommitId, true
}

// HasCommitId returns a boolean if a field has been set.
func (o *MiscControllerConfiguration) HasCommitId() bool {
	if o != nil && !IsNil(o.CommitId) {
		return true
	}

	return false
}

// SetCommitId gets a reference to the given string and assigns it to the CommitId field.
func (o *MiscControllerConfiguration) SetCommitId(v string) {
	o.CommitId = &v
}

// GetCommitDate returns the CommitDate field value if set, zero value otherwise.
func (o *MiscControllerConfiguration) GetCommitDate() time.Time {
	if o == nil || IsNil(o.CommitDate) {
		var ret time.Time
		return ret
	}
	return *o.CommitDate
}

// GetCommitDateOk returns a tuple with the CommitDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerConfiguration) GetCommitDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CommitDate) {
		return nil, false
	}
	return o.CommitDate, true
}

// HasCommitDate returns a boolean if a field has been set.
func (o *MiscControllerConfiguration) HasCommitDate() bool {
	if o != nil && !IsNil(o.CommitDate) {
		return true
	}

	return false
}

// SetCommitDate gets a reference to the given time.Time and assigns it to the CommitDate field.
func (o *MiscControllerConfiguration) SetCommitDate(v time.Time) {
	o.CommitDate = &v
}

// GetIsCustomDashboardsEnabled returns the IsCustomDashboardsEnabled field value if set, zero value otherwise.
func (o *MiscControllerConfiguration) GetIsCustomDashboardsEnabled() bool {
	if o == nil || IsNil(o.IsCustomDashboardsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsCustomDashboardsEnabled
}

// GetIsCustomDashboardsEnabledOk returns a tuple with the IsCustomDashboardsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerConfiguration) GetIsCustomDashboardsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCustomDashboardsEnabled) {
		return nil, false
	}
	return o.IsCustomDashboardsEnabled, true
}

// HasIsCustomDashboardsEnabled returns a boolean if a field has been set.
func (o *MiscControllerConfiguration) HasIsCustomDashboardsEnabled() bool {
	if o != nil && !IsNil(o.IsCustomDashboardsEnabled) {
		return true
	}

	return false
}

// SetIsCustomDashboardsEnabled gets a reference to the given bool and assigns it to the IsCustomDashboardsEnabled field.
func (o *MiscControllerConfiguration) SetIsCustomDashboardsEnabled(v bool) {
	o.IsCustomDashboardsEnabled = &v
}

// GetIsTaskRunEnabled returns the IsTaskRunEnabled field value if set, zero value otherwise.
func (o *MiscControllerConfiguration) GetIsTaskRunEnabled() bool {
	if o == nil || IsNil(o.IsTaskRunEnabled) {
		var ret bool
		return ret
	}
	return *o.IsTaskRunEnabled
}

// GetIsTaskRunEnabledOk returns a tuple with the IsTaskRunEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerConfiguration) GetIsTaskRunEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTaskRunEnabled) {
		return nil, false
	}
	return o.IsTaskRunEnabled, true
}

// HasIsTaskRunEnabled returns a boolean if a field has been set.
func (o *MiscControllerConfiguration) HasIsTaskRunEnabled() bool {
	if o != nil && !IsNil(o.IsTaskRunEnabled) {
		return true
	}

	return false
}

// SetIsTaskRunEnabled gets a reference to the given bool and assigns it to the IsTaskRunEnabled field.
func (o *MiscControllerConfiguration) SetIsTaskRunEnabled(v bool) {
	o.IsTaskRunEnabled = &v
}

// GetIsAnonymousUsageEnabled returns the IsAnonymousUsageEnabled field value if set, zero value otherwise.
func (o *MiscControllerConfiguration) GetIsAnonymousUsageEnabled() bool {
	if o == nil || IsNil(o.IsAnonymousUsageEnabled) {
		var ret bool
		return ret
	}
	return *o.IsAnonymousUsageEnabled
}

// GetIsAnonymousUsageEnabledOk returns a tuple with the IsAnonymousUsageEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerConfiguration) GetIsAnonymousUsageEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAnonymousUsageEnabled) {
		return nil, false
	}
	return o.IsAnonymousUsageEnabled, true
}

// HasIsAnonymousUsageEnabled returns a boolean if a field has been set.
func (o *MiscControllerConfiguration) HasIsAnonymousUsageEnabled() bool {
	if o != nil && !IsNil(o.IsAnonymousUsageEnabled) {
		return true
	}

	return false
}

// SetIsAnonymousUsageEnabled gets a reference to the given bool and assigns it to the IsAnonymousUsageEnabled field.
func (o *MiscControllerConfiguration) SetIsAnonymousUsageEnabled(v bool) {
	o.IsAnonymousUsageEnabled = &v
}

// GetIsUiAnonymousUsageEnabled returns the IsUiAnonymousUsageEnabled field value if set, zero value otherwise.
func (o *MiscControllerConfiguration) GetIsUiAnonymousUsageEnabled() bool {
	if o == nil || IsNil(o.IsUiAnonymousUsageEnabled) {
		var ret bool
		return ret
	}
	return *o.IsUiAnonymousUsageEnabled
}

// GetIsUiAnonymousUsageEnabledOk returns a tuple with the IsUiAnonymousUsageEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerConfiguration) GetIsUiAnonymousUsageEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsUiAnonymousUsageEnabled) {
		return nil, false
	}
	return o.IsUiAnonymousUsageEnabled, true
}

// HasIsUiAnonymousUsageEnabled returns a boolean if a field has been set.
func (o *MiscControllerConfiguration) HasIsUiAnonymousUsageEnabled() bool {
	if o != nil && !IsNil(o.IsUiAnonymousUsageEnabled) {
		return true
	}

	return false
}

// SetIsUiAnonymousUsageEnabled gets a reference to the given bool and assigns it to the IsUiAnonymousUsageEnabled field.
func (o *MiscControllerConfiguration) SetIsUiAnonymousUsageEnabled(v bool) {
	o.IsUiAnonymousUsageEnabled = &v
}

// GetIsTemplateEnabled returns the IsTemplateEnabled field value if set, zero value otherwise.
func (o *MiscControllerConfiguration) GetIsTemplateEnabled() bool {
	if o == nil || IsNil(o.IsTemplateEnabled) {
		var ret bool
		return ret
	}
	return *o.IsTemplateEnabled
}

// GetIsTemplateEnabledOk returns a tuple with the IsTemplateEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerConfiguration) GetIsTemplateEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTemplateEnabled) {
		return nil, false
	}
	return o.IsTemplateEnabled, true
}

// HasIsTemplateEnabled returns a boolean if a field has been set.
func (o *MiscControllerConfiguration) HasIsTemplateEnabled() bool {
	if o != nil && !IsNil(o.IsTemplateEnabled) {
		return true
	}

	return false
}

// SetIsTemplateEnabled gets a reference to the given bool and assigns it to the IsTemplateEnabled field.
func (o *MiscControllerConfiguration) SetIsTemplateEnabled(v bool) {
	o.IsTemplateEnabled = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *MiscControllerConfiguration) GetEnvironment() MiscControllerEnvironment {
	if o == nil || IsNil(o.Environment) {
		var ret MiscControllerEnvironment
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerConfiguration) GetEnvironmentOk() (*MiscControllerEnvironment, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *MiscControllerConfiguration) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given MiscControllerEnvironment and assigns it to the Environment field.
func (o *MiscControllerConfiguration) SetEnvironment(v MiscControllerEnvironment) {
	o.Environment = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *MiscControllerConfiguration) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerConfiguration) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *MiscControllerConfiguration) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *MiscControllerConfiguration) SetUrl(v string) {
	o.Url = &v
}

// GetPreview returns the Preview field value if set, zero value otherwise.
func (o *MiscControllerConfiguration) GetPreview() MiscControllerPreview {
	if o == nil || IsNil(o.Preview) {
		var ret MiscControllerPreview
		return ret
	}
	return *o.Preview
}

// GetPreviewOk returns a tuple with the Preview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerConfiguration) GetPreviewOk() (*MiscControllerPreview, bool) {
	if o == nil || IsNil(o.Preview) {
		return nil, false
	}
	return o.Preview, true
}

// HasPreview returns a boolean if a field has been set.
func (o *MiscControllerConfiguration) HasPreview() bool {
	if o != nil && !IsNil(o.Preview) {
		return true
	}

	return false
}

// SetPreview gets a reference to the given MiscControllerPreview and assigns it to the Preview field.
func (o *MiscControllerConfiguration) SetPreview(v MiscControllerPreview) {
	o.Preview = &v
}

// GetSystemNamespace returns the SystemNamespace field value if set, zero value otherwise.
func (o *MiscControllerConfiguration) GetSystemNamespace() string {
	if o == nil || IsNil(o.SystemNamespace) {
		var ret string
		return ret
	}
	return *o.SystemNamespace
}

// GetSystemNamespaceOk returns a tuple with the SystemNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerConfiguration) GetSystemNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.SystemNamespace) {
		return nil, false
	}
	return o.SystemNamespace, true
}

// HasSystemNamespace returns a boolean if a field has been set.
func (o *MiscControllerConfiguration) HasSystemNamespace() bool {
	if o != nil && !IsNil(o.SystemNamespace) {
		return true
	}

	return false
}

// SetSystemNamespace gets a reference to the given string and assigns it to the SystemNamespace field.
func (o *MiscControllerConfiguration) SetSystemNamespace(v string) {
	o.SystemNamespace = &v
}

// GetHiddenLabelsPrefixes returns the HiddenLabelsPrefixes field value if set, zero value otherwise.
func (o *MiscControllerConfiguration) GetHiddenLabelsPrefixes() []string {
	if o == nil || IsNil(o.HiddenLabelsPrefixes) {
		var ret []string
		return ret
	}
	return o.HiddenLabelsPrefixes
}

// GetHiddenLabelsPrefixesOk returns a tuple with the HiddenLabelsPrefixes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerConfiguration) GetHiddenLabelsPrefixesOk() ([]string, bool) {
	if o == nil || IsNil(o.HiddenLabelsPrefixes) {
		return nil, false
	}
	return o.HiddenLabelsPrefixes, true
}

// HasHiddenLabelsPrefixes returns a boolean if a field has been set.
func (o *MiscControllerConfiguration) HasHiddenLabelsPrefixes() bool {
	if o != nil && !IsNil(o.HiddenLabelsPrefixes) {
		return true
	}

	return false
}

// SetHiddenLabelsPrefixes gets a reference to the given []string and assigns it to the HiddenLabelsPrefixes field.
func (o *MiscControllerConfiguration) SetHiddenLabelsPrefixes(v []string) {
	o.HiddenLabelsPrefixes = v
}

// GetResourceToFilters returns the ResourceToFilters field value if set, zero value otherwise.
func (o *MiscControllerConfiguration) GetResourceToFilters() []QueryFilterResourceField {
	if o == nil || IsNil(o.ResourceToFilters) {
		var ret []QueryFilterResourceField
		return ret
	}
	return o.ResourceToFilters
}

// GetResourceToFiltersOk returns a tuple with the ResourceToFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerConfiguration) GetResourceToFiltersOk() ([]QueryFilterResourceField, bool) {
	if o == nil || IsNil(o.ResourceToFilters) {
		return nil, false
	}
	return o.ResourceToFilters, true
}

// HasResourceToFilters returns a boolean if a field has been set.
func (o *MiscControllerConfiguration) HasResourceToFilters() bool {
	if o != nil && !IsNil(o.ResourceToFilters) {
		return true
	}

	return false
}

// SetResourceToFilters gets a reference to the given []QueryFilterResourceField and assigns it to the ResourceToFilters field.
func (o *MiscControllerConfiguration) SetResourceToFilters(v []QueryFilterResourceField) {
	o.ResourceToFilters = v
}

// GetIsAiEnabled returns the IsAiEnabled field value if set, zero value otherwise.
func (o *MiscControllerConfiguration) GetIsAiEnabled() bool {
	if o == nil || IsNil(o.IsAiEnabled) {
		var ret bool
		return ret
	}
	return *o.IsAiEnabled
}

// GetIsAiEnabledOk returns a tuple with the IsAiEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerConfiguration) GetIsAiEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAiEnabled) {
		return nil, false
	}
	return o.IsAiEnabled, true
}

// HasIsAiEnabled returns a boolean if a field has been set.
func (o *MiscControllerConfiguration) HasIsAiEnabled() bool {
	if o != nil && !IsNil(o.IsAiEnabled) {
		return true
	}

	return false
}

// SetIsAiEnabled gets a reference to the given bool and assigns it to the IsAiEnabled field.
func (o *MiscControllerConfiguration) SetIsAiEnabled(v bool) {
	o.IsAiEnabled = &v
}

// GetIsBasicAuthInitialized returns the IsBasicAuthInitialized field value if set, zero value otherwise.
func (o *MiscControllerConfiguration) GetIsBasicAuthInitialized() bool {
	if o == nil || IsNil(o.IsBasicAuthInitialized) {
		var ret bool
		return ret
	}
	return *o.IsBasicAuthInitialized
}

// GetIsBasicAuthInitializedOk returns a tuple with the IsBasicAuthInitialized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerConfiguration) GetIsBasicAuthInitializedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBasicAuthInitialized) {
		return nil, false
	}
	return o.IsBasicAuthInitialized, true
}

// HasIsBasicAuthInitialized returns a boolean if a field has been set.
func (o *MiscControllerConfiguration) HasIsBasicAuthInitialized() bool {
	if o != nil && !IsNil(o.IsBasicAuthInitialized) {
		return true
	}

	return false
}

// SetIsBasicAuthInitialized gets a reference to the given bool and assigns it to the IsBasicAuthInitialized field.
func (o *MiscControllerConfiguration) SetIsBasicAuthInitialized(v bool) {
	o.IsBasicAuthInitialized = &v
}

// GetPluginsHash returns the PluginsHash field value if set, zero value otherwise.
func (o *MiscControllerConfiguration) GetPluginsHash() int64 {
	if o == nil || IsNil(o.PluginsHash) {
		var ret int64
		return ret
	}
	return *o.PluginsHash
}

// GetPluginsHashOk returns a tuple with the PluginsHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscControllerConfiguration) GetPluginsHashOk() (*int64, bool) {
	if o == nil || IsNil(o.PluginsHash) {
		return nil, false
	}
	return o.PluginsHash, true
}

// HasPluginsHash returns a boolean if a field has been set.
func (o *MiscControllerConfiguration) HasPluginsHash() bool {
	if o != nil && !IsNil(o.PluginsHash) {
		return true
	}

	return false
}

// SetPluginsHash gets a reference to the given int64 and assigns it to the PluginsHash field.
func (o *MiscControllerConfiguration) SetPluginsHash(v int64) {
	o.PluginsHash = &v
}

func (o MiscControllerConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MiscControllerConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Edition) {
		toSerialize["edition"] = o.Edition
	}
	if !IsNil(o.CommitId) {
		toSerialize["commitId"] = o.CommitId
	}
	if !IsNil(o.CommitDate) {
		toSerialize["commitDate"] = o.CommitDate
	}
	if !IsNil(o.IsCustomDashboardsEnabled) {
		toSerialize["isCustomDashboardsEnabled"] = o.IsCustomDashboardsEnabled
	}
	if !IsNil(o.IsTaskRunEnabled) {
		toSerialize["isTaskRunEnabled"] = o.IsTaskRunEnabled
	}
	if !IsNil(o.IsAnonymousUsageEnabled) {
		toSerialize["isAnonymousUsageEnabled"] = o.IsAnonymousUsageEnabled
	}
	if !IsNil(o.IsUiAnonymousUsageEnabled) {
		toSerialize["isUiAnonymousUsageEnabled"] = o.IsUiAnonymousUsageEnabled
	}
	if !IsNil(o.IsTemplateEnabled) {
		toSerialize["isTemplateEnabled"] = o.IsTemplateEnabled
	}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Preview) {
		toSerialize["preview"] = o.Preview
	}
	if !IsNil(o.SystemNamespace) {
		toSerialize["systemNamespace"] = o.SystemNamespace
	}
	if !IsNil(o.HiddenLabelsPrefixes) {
		toSerialize["hiddenLabelsPrefixes"] = o.HiddenLabelsPrefixes
	}
	if !IsNil(o.ResourceToFilters) {
		toSerialize["resourceToFilters"] = o.ResourceToFilters
	}
	if !IsNil(o.IsAiEnabled) {
		toSerialize["isAiEnabled"] = o.IsAiEnabled
	}
	if !IsNil(o.IsBasicAuthInitialized) {
		toSerialize["isBasicAuthInitialized"] = o.IsBasicAuthInitialized
	}
	if !IsNil(o.PluginsHash) {
		toSerialize["pluginsHash"] = o.PluginsHash
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MiscControllerConfiguration) UnmarshalJSON(data []byte) (err error) {
	varMiscControllerConfiguration := _MiscControllerConfiguration{}

	err = json.Unmarshal(data, &varMiscControllerConfiguration)

	if err != nil {
		return err
	}

	*o = MiscControllerConfiguration(varMiscControllerConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "version")
		delete(additionalProperties, "edition")
		delete(additionalProperties, "commitId")
		delete(additionalProperties, "commitDate")
		delete(additionalProperties, "isCustomDashboardsEnabled")
		delete(additionalProperties, "isTaskRunEnabled")
		delete(additionalProperties, "isAnonymousUsageEnabled")
		delete(additionalProperties, "isUiAnonymousUsageEnabled")
		delete(additionalProperties, "isTemplateEnabled")
		delete(additionalProperties, "environment")
		delete(additionalProperties, "url")
		delete(additionalProperties, "preview")
		delete(additionalProperties, "systemNamespace")
		delete(additionalProperties, "hiddenLabelsPrefixes")
		delete(additionalProperties, "resourceToFilters")
		delete(additionalProperties, "isAiEnabled")
		delete(additionalProperties, "isBasicAuthInitialized")
		delete(additionalProperties, "pluginsHash")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMiscControllerConfiguration struct {
	value *MiscControllerConfiguration
	isSet bool
}

func (v NullableMiscControllerConfiguration) Get() *MiscControllerConfiguration {
	return v.value
}

func (v *NullableMiscControllerConfiguration) Set(val *MiscControllerConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableMiscControllerConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableMiscControllerConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMiscControllerConfiguration(val *MiscControllerConfiguration) *NullableMiscControllerConfiguration {
	return &NullableMiscControllerConfiguration{value: val, isSet: true}
}

func (v NullableMiscControllerConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMiscControllerConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
