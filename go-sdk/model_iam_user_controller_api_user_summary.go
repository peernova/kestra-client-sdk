/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// checks if the IAMUserControllerApiUserSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IAMUserControllerApiUserSummary{}

// IAMUserControllerApiUserSummary struct for IAMUserControllerApiUserSummary
type IAMUserControllerApiUserSummary struct {
	Id                   string                         `json:"id"`
	Username             string                         `json:"username"`
	DisplayName          string                         `json:"displayName"`
	Tenants              []ApiTenantSummary             `json:"tenants"`
	Auths                []IAMUserControllerApiUserAuth `json:"auths"`
	SuperAdmin           bool                           `json:"superAdmin"`
	AdditionalProperties map[string]interface{}
}

type _IAMUserControllerApiUserSummary IAMUserControllerApiUserSummary

// NewIAMUserControllerApiUserSummary instantiates a new IAMUserControllerApiUserSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAMUserControllerApiUserSummary(id string, username string, displayName string, tenants []ApiTenantSummary, auths []IAMUserControllerApiUserAuth, superAdmin bool) *IAMUserControllerApiUserSummary {
	this := IAMUserControllerApiUserSummary{}
	this.Id = id
	this.Username = username
	this.DisplayName = displayName
	this.Tenants = tenants
	this.Auths = auths
	this.SuperAdmin = superAdmin
	return &this
}

// NewIAMUserControllerApiUserSummaryWithDefaults instantiates a new IAMUserControllerApiUserSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAMUserControllerApiUserSummaryWithDefaults() *IAMUserControllerApiUserSummary {
	this := IAMUserControllerApiUserSummary{}
	return &this
}

// GetId returns the Id field value
func (o *IAMUserControllerApiUserSummary) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IAMUserControllerApiUserSummary) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IAMUserControllerApiUserSummary) SetId(v string) {
	o.Id = v
}

// GetUsername returns the Username field value
func (o *IAMUserControllerApiUserSummary) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *IAMUserControllerApiUserSummary) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *IAMUserControllerApiUserSummary) SetUsername(v string) {
	o.Username = v
}

// GetDisplayName returns the DisplayName field value
func (o *IAMUserControllerApiUserSummary) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *IAMUserControllerApiUserSummary) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *IAMUserControllerApiUserSummary) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetTenants returns the Tenants field value
func (o *IAMUserControllerApiUserSummary) GetTenants() []ApiTenantSummary {
	if o == nil {
		var ret []ApiTenantSummary
		return ret
	}

	return o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value
// and a boolean to check if the value has been set.
func (o *IAMUserControllerApiUserSummary) GetTenantsOk() ([]ApiTenantSummary, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tenants, true
}

// SetTenants sets field value
func (o *IAMUserControllerApiUserSummary) SetTenants(v []ApiTenantSummary) {
	o.Tenants = v
}

// GetAuths returns the Auths field value
func (o *IAMUserControllerApiUserSummary) GetAuths() []IAMUserControllerApiUserAuth {
	if o == nil {
		var ret []IAMUserControllerApiUserAuth
		return ret
	}

	return o.Auths
}

// GetAuthsOk returns a tuple with the Auths field value
// and a boolean to check if the value has been set.
func (o *IAMUserControllerApiUserSummary) GetAuthsOk() ([]IAMUserControllerApiUserAuth, bool) {
	if o == nil {
		return nil, false
	}
	return o.Auths, true
}

// SetAuths sets field value
func (o *IAMUserControllerApiUserSummary) SetAuths(v []IAMUserControllerApiUserAuth) {
	o.Auths = v
}

// GetSuperAdmin returns the SuperAdmin field value
func (o *IAMUserControllerApiUserSummary) GetSuperAdmin() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SuperAdmin
}

// GetSuperAdminOk returns a tuple with the SuperAdmin field value
// and a boolean to check if the value has been set.
func (o *IAMUserControllerApiUserSummary) GetSuperAdminOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuperAdmin, true
}

// SetSuperAdmin sets field value
func (o *IAMUserControllerApiUserSummary) SetSuperAdmin(v bool) {
	o.SuperAdmin = v
}

func (o IAMUserControllerApiUserSummary) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IAMUserControllerApiUserSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["username"] = o.Username
	toSerialize["displayName"] = o.DisplayName
	toSerialize["tenants"] = o.Tenants
	toSerialize["auths"] = o.Auths
	toSerialize["superAdmin"] = o.SuperAdmin

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IAMUserControllerApiUserSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"username",
		"displayName",
		"tenants",
		"auths",
		"superAdmin",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIAMUserControllerApiUserSummary := _IAMUserControllerApiUserSummary{}

	err = json.Unmarshal(data, &varIAMUserControllerApiUserSummary)

	if err != nil {
		return err
	}

	*o = IAMUserControllerApiUserSummary(varIAMUserControllerApiUserSummary)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "username")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "tenants")
		delete(additionalProperties, "auths")
		delete(additionalProperties, "superAdmin")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIAMUserControllerApiUserSummary struct {
	value *IAMUserControllerApiUserSummary
	isSet bool
}

func (v NullableIAMUserControllerApiUserSummary) Get() *IAMUserControllerApiUserSummary {
	return v.value
}

func (v *NullableIAMUserControllerApiUserSummary) Set(val *IAMUserControllerApiUserSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableIAMUserControllerApiUserSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableIAMUserControllerApiUserSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAMUserControllerApiUserSummary(val *IAMUserControllerApiUserSummary) *NullableIAMUserControllerApiUserSummary {
	return &NullableIAMUserControllerApiUserSummary{value: val, isSet: true}
}

func (v NullableIAMUserControllerApiUserSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAMUserControllerApiUserSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
