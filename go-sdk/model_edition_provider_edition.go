/*
Kestra EE

All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kestra_api_client

import (
	"encoding/json"
	"fmt"
)

// EditionProviderEdition the model 'EditionProviderEdition'
type EditionProviderEdition string

// List of EditionProvider.Edition
const (
	EDITIONPROVIDEREDITION_OSS EditionProviderEdition = "OSS"
	EDITIONPROVIDEREDITION_EE  EditionProviderEdition = "EE"
)

// All allowed values of EditionProviderEdition enum
var AllowedEditionProviderEditionEnumValues = []EditionProviderEdition{
	"OSS",
	"EE",
}

func (v *EditionProviderEdition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EditionProviderEdition(value)
	for _, existing := range AllowedEditionProviderEditionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EditionProviderEdition", value)
}

// NewEditionProviderEditionFromValue returns a pointer to a valid EditionProviderEdition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEditionProviderEditionFromValue(v string) (*EditionProviderEdition, error) {
	ev := EditionProviderEdition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EditionProviderEdition: valid values are %v", v, AllowedEditionProviderEditionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EditionProviderEdition) IsValid() bool {
	for _, existing := range AllowedEditionProviderEditionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EditionProvider.Edition value
func (v EditionProviderEdition) Ptr() *EditionProviderEdition {
	return &v
}

type NullableEditionProviderEdition struct {
	value *EditionProviderEdition
	isSet bool
}

func (v NullableEditionProviderEdition) Get() *EditionProviderEdition {
	return v.value
}

func (v *NullableEditionProviderEdition) Set(val *EditionProviderEdition) {
	v.value = val
	v.isSet = true
}

func (v NullableEditionProviderEdition) IsSet() bool {
	return v.isSet
}

func (v *NullableEditionProviderEdition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditionProviderEdition(val *EditionProviderEdition) *NullableEditionProviderEdition {
	return &NullableEditionProviderEdition{value: val, isSet: true}
}

func (v NullableEditionProviderEdition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditionProviderEdition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
