/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ResourceType from '../model/ResourceType';
import Schema from '../model/Schema';
import ServiceProviderConfiguration from '../model/ServiceProviderConfiguration';

/**
* SCIMConfiguration service.
* @module api/SCIMConfigurationApi
* @version 1.0.0
*/
export default class SCIMConfigurationApi {

    /**
    * Constructs a new SCIMConfigurationApi. 
    * @alias module:api/SCIMConfigurationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAllResourceTypes operation.
     * @callback module:api/SCIMConfigurationApi~getAllResourceTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ResourceType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Resource Types
     * @param {String} integration 
     * @param {String} tenant 
     * @param {module:api/SCIMConfigurationApi~getAllResourceTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ResourceType>}
     */
    getAllResourceTypes(integration, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'integration' is set
      if (integration === undefined || integration === null) {
        throw new Error("Missing the required parameter 'integration' when calling getAllResourceTypes");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getAllResourceTypes");
      }

      let pathParams = {
        'integration': integration,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/scim+json'];
      let returnType = [ResourceType];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/integrations/{integration}/scim/v2/ResourceTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllSchemas operation.
     * @callback module:api/SCIMConfigurationApi~getAllSchemasCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Schema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Schemas
     * @param {String} integration 
     * @param {String} tenant 
     * @param {module:api/SCIMConfigurationApi~getAllSchemasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Schema>}
     */
    getAllSchemas(integration, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'integration' is set
      if (integration === undefined || integration === null) {
        throw new Error("Missing the required parameter 'integration' when calling getAllSchemas");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getAllSchemas");
      }

      let pathParams = {
        'integration': integration,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/scim+json'];
      let returnType = [Schema];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/integrations/{integration}/scim/v2/Schemas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourceType operation.
     * @callback module:api/SCIMConfigurationApi~getResourceTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Resource Type by URN
     * @param {String} name 
     * @param {String} integration 
     * @param {String} tenant 
     * @param {module:api/SCIMConfigurationApi~getResourceTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceType}
     */
    getResourceType(name, integration, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getResourceType");
      }
      // verify the required parameter 'integration' is set
      if (integration === undefined || integration === null) {
        throw new Error("Missing the required parameter 'integration' when calling getResourceType");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getResourceType");
      }

      let pathParams = {
        'name': name,
        'integration': integration,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/scim+json'];
      let returnType = ResourceType;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/integrations/{integration}/scim/v2/ResourceTypes/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchema operation.
     * @callback module:api/SCIMConfigurationApi~getSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Schema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Schemas by URN
     * @param {String} uri 
     * @param {String} integration 
     * @param {String} tenant 
     * @param {module:api/SCIMConfigurationApi~getSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Schema}
     */
    getSchema(uri, integration, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'uri' is set
      if (uri === undefined || uri === null) {
        throw new Error("Missing the required parameter 'uri' when calling getSchema");
      }
      // verify the required parameter 'integration' is set
      if (integration === undefined || integration === null) {
        throw new Error("Missing the required parameter 'integration' when calling getSchema");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getSchema");
      }

      let pathParams = {
        'uri': uri,
        'integration': integration,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/scim+json'];
      let returnType = Schema;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/integrations/{integration}/scim/v2/Schemas/{uri}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServiceProviderConfiguration operation.
     * @callback module:api/SCIMConfigurationApi~getServiceProviderConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceProviderConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Service Provider Configuration
     * @param {String} integration 
     * @param {String} tenant 
     * @param {module:api/SCIMConfigurationApi~getServiceProviderConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceProviderConfiguration}
     */
    getServiceProviderConfiguration(integration, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'integration' is set
      if (integration === undefined || integration === null) {
        throw new Error("Missing the required parameter 'integration' when calling getServiceProviderConfiguration");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getServiceProviderConfiguration");
      }

      let pathParams = {
        'integration': integration,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/scim+json'];
      let returnType = ServiceProviderConfiguration;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/integrations/{integration}/scim/v2/ServiceProviderConfig', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
