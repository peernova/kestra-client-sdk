/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BindingType from '../model/BindingType';
import IAMBindingControllerApiBindingDetail from '../model/IAMBindingControllerApiBindingDetail';
import IAMBindingControllerApiCreateBindingRequest from '../model/IAMBindingControllerApiCreateBindingRequest';
import PagedResultsIAMBindingControllerApiBindingDetail from '../model/PagedResultsIAMBindingControllerApiBindingDetail';

/**
* Bindings service.
* @module api/BindingsApi
* @version 1.0.0
*/
export default class BindingsApi {

    /**
    * Constructs a new BindingsApi. 
    * @alias module:api/BindingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bulkCreateBinding operation.
     * @callback module:api/BindingsApi~bulkCreateBindingCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IAMBindingControllerApiBindingDetail>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create multiple bindings
     * @param {String} tenant 
     * @param {Array.<module:model/IAMBindingControllerApiCreateBindingRequest>} iAMBindingControllerApiCreateBindingRequest The bindings
     * @param {module:api/BindingsApi~bulkCreateBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IAMBindingControllerApiBindingDetail>}
     */
    bulkCreateBinding(tenant, iAMBindingControllerApiCreateBindingRequest, callback) {
      let postBody = iAMBindingControllerApiCreateBindingRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling bulkCreateBinding");
      }
      // verify the required parameter 'iAMBindingControllerApiCreateBindingRequest' is set
      if (iAMBindingControllerApiCreateBindingRequest === undefined || iAMBindingControllerApiCreateBindingRequest === null) {
        throw new Error("Missing the required parameter 'iAMBindingControllerApiCreateBindingRequest' when calling bulkCreateBinding");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [IAMBindingControllerApiBindingDetail];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/bindings/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBinding operation.
     * @callback module:api/BindingsApi~createBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IAMBindingControllerApiBindingDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a binding
     * @param {String} tenant 
     * @param {module:model/IAMBindingControllerApiCreateBindingRequest} iAMBindingControllerApiCreateBindingRequest The binding
     * @param {module:api/BindingsApi~createBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IAMBindingControllerApiBindingDetail}
     */
    createBinding(tenant, iAMBindingControllerApiCreateBindingRequest, callback) {
      let postBody = iAMBindingControllerApiCreateBindingRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createBinding");
      }
      // verify the required parameter 'iAMBindingControllerApiCreateBindingRequest' is set
      if (iAMBindingControllerApiCreateBindingRequest === undefined || iAMBindingControllerApiCreateBindingRequest === null) {
        throw new Error("Missing the required parameter 'iAMBindingControllerApiCreateBindingRequest' when calling createBinding");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IAMBindingControllerApiBindingDetail;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/bindings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBinding operation.
     * @callback module:api/BindingsApi~deleteBindingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a binding
     * @param {String} id The binding id
     * @param {String} tenant 
     * @param {module:api/BindingsApi~deleteBindingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBinding(id, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBinding");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteBinding");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/bindings/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBinding operation.
     * @callback module:api/BindingsApi~getBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IAMBindingControllerApiBindingDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a binding
     * @param {String} id The binding id
     * @param {String} tenant 
     * @param {module:api/BindingsApi~getBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IAMBindingControllerApiBindingDetail}
     */
    getBinding(id, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBinding");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getBinding");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IAMBindingControllerApiBindingDetail;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/bindings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchBindings operation.
     * @callback module:api/BindingsApi~searchBindingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsIAMBindingControllerApiBindingDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for bindings
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<String>} [sort] The sort of current page
     * @param {module:model/BindingType} [type] Binding type filter
     * @param {String} [id] External id filter
     * @param {String} [namespace] A namespace filter
     * @param {module:api/BindingsApi~searchBindingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsIAMBindingControllerApiBindingDetail}
     */
    searchBindings(page, size, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchBindings");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchBindings");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchBindings");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'type': opts['type'],
        'id': opts['id'],
        'namespace': opts['namespace']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsIAMBindingControllerApiBindingDetail;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/bindings/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
