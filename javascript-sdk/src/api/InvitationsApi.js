/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IAMInvitationControllerApiInvitationCreateRequest from '../model/IAMInvitationControllerApiInvitationCreateRequest';
import IAMInvitationControllerApiInvitationDetail from '../model/IAMInvitationControllerApiInvitationDetail';
import Invitation from '../model/Invitation';
import InvitationInvitationStatus from '../model/InvitationInvitationStatus';
import PagedResultsIAMInvitationControllerApiInvitationDetail from '../model/PagedResultsIAMInvitationControllerApiInvitationDetail';

/**
* Invitations service.
* @module api/InvitationsApi
* @version 1.0.0
*/
export default class InvitationsApi {

    /**
    * Constructs a new InvitationsApi. 
    * @alias module:api/InvitationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createInvitation operation.
     * @callback module:api/InvitationsApi~createInvitationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an invitation
     * Creates a new invitation and sends an email if the mail server is enabled.
     * @param {String} tenant 
     * @param {module:model/IAMInvitationControllerApiInvitationCreateRequest} iAMInvitationControllerApiInvitationCreateRequest Create a new invitation, send an email if the server-mail is enabled
     * @param {module:api/InvitationsApi~createInvitationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createInvitation(tenant, iAMInvitationControllerApiInvitationCreateRequest, callback) {
      let postBody = iAMInvitationControllerApiInvitationCreateRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createInvitation");
      }
      // verify the required parameter 'iAMInvitationControllerApiInvitationCreateRequest' is set
      if (iAMInvitationControllerApiInvitationCreateRequest === undefined || iAMInvitationControllerApiInvitationCreateRequest === null) {
        throw new Error("Missing the required parameter 'iAMInvitationControllerApiInvitationCreateRequest' when calling createInvitation");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/invitations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInvitation operation.
     * @callback module:api/InvitationsApi~deleteInvitationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an invitation
     * Deletes the invitation by its ID.
     * @param {String} id The id of the invitation
     * @param {String} tenant 
     * @param {module:api/InvitationsApi~deleteInvitationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInvitation(id, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteInvitation");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteInvitation");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/invitations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllInvitationsForCurrentUser operation.
     * @callback module:api/InvitationsApi~findAllInvitationsForCurrentUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Invitation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List invitations for the authenticated user
     * Returns all invitations for the authenticated user's email across all tenants.
     * @param {module:api/InvitationsApi~findAllInvitationsForCurrentUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Invitation>}
     */
    findAllInvitationsForCurrentUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Invitation];
      return this.apiClient.callApi(
        '/api/v1/me/invitations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvitation operation.
     * @callback module:api/InvitationsApi~getInvitationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IAMInvitationControllerApiInvitationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an invitation
     * Retrieves the invitation by its ID, including the invitation link.
     * @param {String} id The id of the invitation
     * @param {String} tenant 
     * @param {module:api/InvitationsApi~getInvitationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IAMInvitationControllerApiInvitationDetail}
     */
    getInvitation(id, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInvitation");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getInvitation");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IAMInvitationControllerApiInvitationDetail;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/invitations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInvitationsByEmail operation.
     * @callback module:api/InvitationsApi~listInvitationsByEmailCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IAMInvitationControllerApiInvitationDetail>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all invitations for a given email
     * Returns all invitations created for a given email address in the current tenant.
     * @param {String} email The email address of the invited
     * @param {String} tenant 
     * @param {module:api/InvitationsApi~listInvitationsByEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IAMInvitationControllerApiInvitationDetail>}
     */
    listInvitationsByEmail(email, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling listInvitationsByEmail");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listInvitationsByEmail");
      }

      let pathParams = {
        'email': email,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IAMInvitationControllerApiInvitationDetail];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/invitations/email/{email}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInvitations operation.
     * @callback module:api/InvitationsApi~searchInvitationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsIAMInvitationControllerApiInvitationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for invitations
     * Search and filter invitations by email, status, and pagination.
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [email] The email address of the invited
     * @param {module:model/InvitationInvitationStatus} [status] The current status of the invitations
     * @param {Array.<String>} [sort] The sort of current page
     * @param {module:api/InvitationsApi~searchInvitationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsIAMInvitationControllerApiInvitationDetail}
     */
    searchInvitations(page, size, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchInvitations");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchInvitations");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchInvitations");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'email': opts['email'],
        'status': opts['status'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsIAMInvitationControllerApiInvitationDetail;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/invitations/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
