/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MetricAggregations from '../model/MetricAggregations';
import PagedResultsMetricEntry from '../model/PagedResultsMetricEntry';

/**
* Metrics service.
* @module api/MetricsApi
* @version 1.0.0
*/
export default class MetricsApi {

    /**
    * Constructs a new MetricsApi. 
    * @alias module:api/MetricsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the aggregateMetricsFromFlow operation.
     * @callback module:api/MetricsApi~aggregateMetricsFromFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricAggregations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metrics aggregations for a specific flow
     * @param {String} namespace The namespace
     * @param {String} flowId The flow Id
     * @param {String} metric The metric name
     * @param {String} aggregation The type of aggregation: avg, sum, min or max
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] The start datetime, default to now - 30 days
     * @param {Date} [endDate] The end datetime, default to now
     * @param {module:api/MetricsApi~aggregateMetricsFromFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricAggregations}
     */
    aggregateMetricsFromFlow(namespace, flowId, metric, aggregation, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling aggregateMetricsFromFlow");
      }
      // verify the required parameter 'flowId' is set
      if (flowId === undefined || flowId === null) {
        throw new Error("Missing the required parameter 'flowId' when calling aggregateMetricsFromFlow");
      }
      // verify the required parameter 'metric' is set
      if (metric === undefined || metric === null) {
        throw new Error("Missing the required parameter 'metric' when calling aggregateMetricsFromFlow");
      }
      // verify the required parameter 'aggregation' is set
      if (aggregation === undefined || aggregation === null) {
        throw new Error("Missing the required parameter 'aggregation' when calling aggregateMetricsFromFlow");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling aggregateMetricsFromFlow");
      }

      let pathParams = {
        'namespace': namespace,
        'flowId': flowId,
        'metric': metric,
        'tenant': tenant
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'aggregation': aggregation
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricAggregations;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/metrics/aggregates/{namespace}/{flowId}/{metric}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aggregateMetricsFromTask operation.
     * @callback module:api/MetricsApi~aggregateMetricsFromTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricAggregations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metrics aggregations for a specific flow
     * @param {String} namespace The namespace
     * @param {String} flowId The flow Id
     * @param {String} taskId The task Id
     * @param {String} metric The metric name
     * @param {String} aggregation The type of aggregation: avg, sum, min or max
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] The start datetime, default to now - 30 days
     * @param {Date} [endDate] The end datetime, default to now
     * @param {module:api/MetricsApi~aggregateMetricsFromTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricAggregations}
     */
    aggregateMetricsFromTask(namespace, flowId, taskId, metric, aggregation, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling aggregateMetricsFromTask");
      }
      // verify the required parameter 'flowId' is set
      if (flowId === undefined || flowId === null) {
        throw new Error("Missing the required parameter 'flowId' when calling aggregateMetricsFromTask");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling aggregateMetricsFromTask");
      }
      // verify the required parameter 'metric' is set
      if (metric === undefined || metric === null) {
        throw new Error("Missing the required parameter 'metric' when calling aggregateMetricsFromTask");
      }
      // verify the required parameter 'aggregation' is set
      if (aggregation === undefined || aggregation === null) {
        throw new Error("Missing the required parameter 'aggregation' when calling aggregateMetricsFromTask");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling aggregateMetricsFromTask");
      }

      let pathParams = {
        'namespace': namespace,
        'flowId': flowId,
        'taskId': taskId,
        'metric': metric,
        'tenant': tenant
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'aggregation': aggregation
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricAggregations;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/metrics/aggregates/{namespace}/{flowId}/{taskId}/{metric}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFlowMetrics operation.
     * @callback module:api/MetricsApi~listFlowMetricsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metrics names for a specific flow
     * @param {String} namespace The namespace
     * @param {String} flowId The flow Id
     * @param {String} tenant 
     * @param {module:api/MetricsApi~listFlowMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    listFlowMetrics(namespace, flowId, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling listFlowMetrics");
      }
      // verify the required parameter 'flowId' is set
      if (flowId === undefined || flowId === null) {
        throw new Error("Missing the required parameter 'flowId' when calling listFlowMetrics");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listFlowMetrics");
      }

      let pathParams = {
        'namespace': namespace,
        'flowId': flowId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/metrics/names/{namespace}/{flowId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTaskMetrics operation.
     * @callback module:api/MetricsApi~listTaskMetricsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metrics names for a specific task in a flow
     * @param {String} namespace The namespace
     * @param {String} flowId The flow Id
     * @param {String} taskId The task Id
     * @param {String} tenant 
     * @param {module:api/MetricsApi~listTaskMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    listTaskMetrics(namespace, flowId, taskId, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling listTaskMetrics");
      }
      // verify the required parameter 'flowId' is set
      if (flowId === undefined || flowId === null) {
        throw new Error("Missing the required parameter 'flowId' when calling listTaskMetrics");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling listTaskMetrics");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listTaskMetrics");
      }

      let pathParams = {
        'namespace': namespace,
        'flowId': flowId,
        'taskId': taskId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/metrics/names/{namespace}/{flowId}/{taskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTasksWithMetrics operation.
     * @callback module:api/MetricsApi~listTasksWithMetricsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tasks id that have metrics for a specific flow, include deleted or renamed tasks
     * @param {String} namespace The namespace
     * @param {String} flowId The flow Id
     * @param {String} tenant 
     * @param {module:api/MetricsApi~listTasksWithMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    listTasksWithMetrics(namespace, flowId, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling listTasksWithMetrics");
      }
      // verify the required parameter 'flowId' is set
      if (flowId === undefined || flowId === null) {
        throw new Error("Missing the required parameter 'flowId' when calling listTasksWithMetrics");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listTasksWithMetrics");
      }

      let pathParams = {
        'namespace': namespace,
        'flowId': flowId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/metrics/tasks/{namespace}/{flowId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchByExecution operation.
     * @callback module:api/MetricsApi~searchByExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsMetricEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metrics for a specific execution
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} executionId The execution id
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [sort] The sort of current page
     * @param {String} [taskRunId] The taskrun id
     * @param {String} [taskId] The task id
     * @param {module:api/MetricsApi~searchByExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsMetricEntry}
     */
    searchByExecution(page, size, executionId, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchByExecution");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchByExecution");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling searchByExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchByExecution");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'taskRunId': opts['taskRunId'],
        'taskId': opts['taskId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsMetricEntry;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/metrics/{executionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
