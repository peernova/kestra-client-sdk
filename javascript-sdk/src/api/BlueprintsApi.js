/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BlueprintControllerApiBlueprintItemWithSource from '../model/BlueprintControllerApiBlueprintItemWithSource';
import BlueprintControllerKind from '../model/BlueprintControllerKind';
import BlueprintWithFlow from '../model/BlueprintWithFlow';
import PagedResultsBlueprint from '../model/PagedResultsBlueprint';
import PagedResultsBlueprintControllerApiBlueprintItem from '../model/PagedResultsBlueprintControllerApiBlueprintItem';

/**
* Blueprints service.
* @module api/BlueprintsApi
* @version 1.0.0
*/
export default class BlueprintsApi {

    /**
    * Constructs a new BlueprintsApi. 
    * @alias module:api/BlueprintsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createInternalBlueprints operation.
     * @callback module:api/BlueprintsApi~createInternalBlueprintsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlueprintControllerApiBlueprintItemWithSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new internal blueprint
     * Creates a new internal (custom) blueprint for the current tenant. Requires BLUEPRINT permission.
     * @param {String} tenant 
     * @param {module:model/BlueprintControllerApiBlueprintItemWithSource} blueprintControllerApiBlueprintItemWithSource The internal blueprint to create
     * @param {module:api/BlueprintsApi~createInternalBlueprintsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlueprintControllerApiBlueprintItemWithSource}
     */
    createInternalBlueprints(tenant, blueprintControllerApiBlueprintItemWithSource, callback) {
      let postBody = blueprintControllerApiBlueprintItemWithSource;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createInternalBlueprints");
      }
      // verify the required parameter 'blueprintControllerApiBlueprintItemWithSource' is set
      if (blueprintControllerApiBlueprintItemWithSource === undefined || blueprintControllerApiBlueprintItemWithSource === null) {
        throw new Error("Missing the required parameter 'blueprintControllerApiBlueprintItemWithSource' when calling createInternalBlueprints");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BlueprintControllerApiBlueprintItemWithSource;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/blueprints/custom', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInternalBlueprints operation.
     * @callback module:api/BlueprintsApi~deleteInternalBlueprintsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an internal blueprint
     * Deletes an internal (custom) blueprint for the current tenant. Requires BLUEPRINT permission.
     * @param {String} id The internal blueprint id to delete
     * @param {String} tenant 
     * @param {module:api/BlueprintsApi~deleteInternalBlueprintsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInternalBlueprints(id, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteInternalBlueprints");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteInternalBlueprints");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/blueprints/custom/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlueprint operation.
     * @callback module:api/BlueprintsApi~getBlueprintCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlueprintControllerApiBlueprintItemWithSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a blueprint
     * Retrieves details of a specific community blueprint.
     * @param {String} id The blueprint id
     * @param {module:model/BlueprintControllerKind} kind The blueprint kind
     * @param {String} tenant 
     * @param {module:api/BlueprintsApi~getBlueprintCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlueprintControllerApiBlueprintItemWithSource}
     */
    getBlueprint(id, kind, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBlueprint");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling getBlueprint");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getBlueprint");
      }

      let pathParams = {
        'id': id,
        'kind': kind,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BlueprintControllerApiBlueprintItemWithSource;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/blueprints/community/{kind}/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlueprintGraph operation.
     * @callback module:api/BlueprintsApi~getBlueprintGraphCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a blueprint graph
     * Retrieves the topology graph representation of a specific community blueprint.
     * @param {String} id The blueprint id
     * @param {module:model/BlueprintControllerKind} kind The blueprint kind
     * @param {String} tenant 
     * @param {module:api/BlueprintsApi~getBlueprintGraphCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    getBlueprintGraph(id, kind, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBlueprintGraph");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling getBlueprintGraph");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getBlueprintGraph");
      }

      let pathParams = {
        'id': id,
        'kind': kind,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/api/v1/{tenant}/blueprints/community/{kind}/{id}/graph', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlueprintSource operation.
     * @callback module:api/BlueprintsApi~getBlueprintSourceCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a blueprint source code
     * Retrieves the YAML source code for a specific community blueprint.
     * @param {String} id The blueprint id
     * @param {module:model/BlueprintControllerKind} kind The blueprint kind
     * @param {String} tenant 
     * @param {module:api/BlueprintsApi~getBlueprintSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getBlueprintSource(id, kind, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBlueprintSource");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling getBlueprintSource");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getBlueprintSource");
      }

      let pathParams = {
        'id': id,
        'kind': kind,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/yaml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/{tenant}/blueprints/community/{kind}/{id}/source', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the internalBlueprint operation.
     * @callback module:api/BlueprintsApi~internalBlueprintCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlueprintControllerApiBlueprintItemWithSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an internal blueprint
     * Retrieves details of a specific internal (custom) blueprint. Requires BLUEPRINT permission.
     * @param {String} id The blueprint id
     * @param {String} tenant 
     * @param {module:api/BlueprintsApi~internalBlueprintCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlueprintControllerApiBlueprintItemWithSource}
     */
    internalBlueprint(id, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling internalBlueprint");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling internalBlueprint");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BlueprintControllerApiBlueprintItemWithSource;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/blueprints/custom/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the internalBlueprintFlow operation.
     * @callback module:api/BlueprintsApi~internalBlueprintFlowCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an internal blueprint source code
     * Retrieves the YAML source code for a specific internal (custom) blueprint. Requires BLUEPRINT permission.
     * @param {String} id The blueprint id
     * @param {String} tenant 
     * @param {module:api/BlueprintsApi~internalBlueprintFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    internalBlueprintFlow(id, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling internalBlueprintFlow");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling internalBlueprintFlow");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/yaml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/{tenant}/blueprints/custom/{id}/source', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchBlueprints operation.
     * @callback module:api/BlueprintsApi~searchBlueprintsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsBlueprintControllerApiBlueprintItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all blueprints
     * Lists all community blueprints of the specified kind. Community blueprints are shared and versioned.
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {module:model/BlueprintControllerKind} kind The blueprint kind
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {String} [sort] The sort of current page
     * @param {Array.<String>} [tags] A tags filter
     * @param {module:api/BlueprintsApi~searchBlueprintsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsBlueprintControllerApiBlueprintItem}
     */
    searchBlueprints(page, size, kind, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchBlueprints");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchBlueprints");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling searchBlueprints");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchBlueprints");
      }

      let pathParams = {
        'kind': kind,
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'sort': opts['sort'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'page': page,
        'size': size
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsBlueprintControllerApiBlueprintItem;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/blueprints/community/{kind}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInternalBlueprints operation.
     * @callback module:api/BlueprintsApi~searchInternalBlueprintsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsBlueprint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all internal blueprints
     * Lists all internal (custom) blueprints for the current tenant. Requires BLUEPRINT permission.
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {String} [sort] The sort of current page
     * @param {Array.<String>} [tags] A tags filter
     * @param {module:api/BlueprintsApi~searchInternalBlueprintsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsBlueprint}
     */
    searchInternalBlueprints(page, size, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchInternalBlueprints");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchInternalBlueprints");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchInternalBlueprints");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'sort': opts['sort'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'page': page,
        'size': size
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsBlueprint;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/blueprints/custom', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInternalBlueprints operation.
     * @callback module:api/BlueprintsApi~updateInternalBlueprintsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlueprintWithFlow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an internal blueprint
     * Updates an existing internal (custom) blueprint for the current tenant. Requires BLUEPRINT permission.
     * @param {String} id The id of the internal blueprint to update
     * @param {String} tenant 
     * @param {module:model/BlueprintControllerApiBlueprintItemWithSource} blueprintControllerApiBlueprintItemWithSource The new internal blueprint for update
     * @param {module:api/BlueprintsApi~updateInternalBlueprintsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlueprintWithFlow}
     */
    updateInternalBlueprints(id, tenant, blueprintControllerApiBlueprintItemWithSource, callback) {
      let postBody = blueprintControllerApiBlueprintItemWithSource;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateInternalBlueprints");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling updateInternalBlueprints");
      }
      // verify the required parameter 'blueprintControllerApiBlueprintItemWithSource' is set
      if (blueprintControllerApiBlueprintItemWithSource === undefined || blueprintControllerApiBlueprintItemWithSource === null) {
        throw new Error("Missing the required parameter 'blueprintControllerApiBlueprintItemWithSource' when calling updateInternalBlueprints");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BlueprintWithFlow;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/blueprints/custom/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
