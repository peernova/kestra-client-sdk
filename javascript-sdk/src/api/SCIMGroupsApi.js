/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchRequest from '../model/PatchRequest';
import ScimResource from '../model/ScimResource';
import ScimUser from '../model/ScimUser';
import SearchRequest from '../model/SearchRequest';
import SortOrder from '../model/SortOrder';

/**
* SCIMGroups service.
* @module api/SCIMGroupsApi
* @version 1.0.0
*/
export default class SCIMGroupsApi {

    /**
    * Constructs a new SCIMGroupsApi. 
    * @alias module:api/SCIMGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSCIMResourceByIdGroups operation.
     * @callback module:api/SCIMGroupsApi~createSCIMResourceByIdGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScimResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create
     * @param {String} integration 
     * @param {String} tenant 
     * @param {module:model/ScimUser} scimUser 
     * @param {Object} opts Optional parameters
     * @param {String} [attributes] 
     * @param {String} [excludedAttributes] 
     * @param {module:api/SCIMGroupsApi~createSCIMResourceByIdGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScimResource}
     */
    createSCIMResourceByIdGroups(integration, tenant, scimUser, opts, callback) {
      opts = opts || {};
      let postBody = scimUser;
      // verify the required parameter 'integration' is set
      if (integration === undefined || integration === null) {
        throw new Error("Missing the required parameter 'integration' when calling createSCIMResourceByIdGroups");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createSCIMResourceByIdGroups");
      }
      // verify the required parameter 'scimUser' is set
      if (scimUser === undefined || scimUser === null) {
        throw new Error("Missing the required parameter 'scimUser' when calling createSCIMResourceByIdGroups");
      }

      let pathParams = {
        'integration': integration,
        'tenant': tenant
      };
      let queryParams = {
        'attributes': opts['attributes'],
        'excludedAttributes': opts['excludedAttributes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/scim+json'];
      let accepts = ['application/scim+json'];
      let returnType = ScimResource;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/integrations/{integration}/scim/v2/Groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGroups operation.
     * @callback module:api/SCIMGroupsApi~deleteGroupsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete from the backing store
     * @param {String} id 
     * @param {String} integration 
     * @param {String} tenant 
     * @param {module:api/SCIMGroupsApi~deleteGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGroups(id, integration, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteGroups");
      }
      // verify the required parameter 'integration' is set
      if (integration === undefined || integration === null) {
        throw new Error("Missing the required parameter 'integration' when calling deleteGroups");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteGroups");
      }

      let pathParams = {
        'id': id,
        'integration': integration,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/integrations/{integration}/scim/v2/Groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findGroups operation.
     * @callback module:api/SCIMGroupsApi~findGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScimResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search
     * @param {String} integration 
     * @param {String} tenant 
     * @param {module:model/SearchRequest} searchRequest 
     * @param {module:api/SCIMGroupsApi~findGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScimResource}
     */
    findGroups(integration, tenant, searchRequest, callback) {
      let postBody = searchRequest;
      // verify the required parameter 'integration' is set
      if (integration === undefined || integration === null) {
        throw new Error("Missing the required parameter 'integration' when calling findGroups");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling findGroups");
      }
      // verify the required parameter 'searchRequest' is set
      if (searchRequest === undefined || searchRequest === null) {
        throw new Error("Missing the required parameter 'searchRequest' when calling findGroups");
      }

      let pathParams = {
        'integration': integration,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/scim+json'];
      let accepts = ['application/scim+json'];
      let returnType = ScimResource;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/integrations/{integration}/scim/v2/Groups/.search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSCIMResourceByIdGroups operation.
     * @callback module:api/SCIMGroupsApi~getSCIMResourceByIdGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScimResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find by id
     * @param {String} id 
     * @param {String} integration 
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [attributes] 
     * @param {String} [excludedAttributes] 
     * @param {module:api/SCIMGroupsApi~getSCIMResourceByIdGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScimResource}
     */
    getSCIMResourceByIdGroups(id, integration, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSCIMResourceByIdGroups");
      }
      // verify the required parameter 'integration' is set
      if (integration === undefined || integration === null) {
        throw new Error("Missing the required parameter 'integration' when calling getSCIMResourceByIdGroups");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getSCIMResourceByIdGroups");
      }

      let pathParams = {
        'id': id,
        'integration': integration,
        'tenant': tenant
      };
      let queryParams = {
        'attributes': opts['attributes'],
        'excludedAttributes': opts['excludedAttributes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/scim+json'];
      let returnType = ScimResource;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/integrations/{integration}/scim/v2/Groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchGroups operation.
     * @callback module:api/SCIMGroupsApi~patchGroupsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch a portion of the backing store
     * @param {String} id 
     * @param {String} integration 
     * @param {String} tenant 
     * @param {module:model/PatchRequest} patchRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [attributes] 
     * @param {String} [excludedAttributes] 
     * @param {module:api/SCIMGroupsApi~patchGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    patchGroups(id, integration, tenant, patchRequest, opts, callback) {
      opts = opts || {};
      let postBody = patchRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchGroups");
      }
      // verify the required parameter 'integration' is set
      if (integration === undefined || integration === null) {
        throw new Error("Missing the required parameter 'integration' when calling patchGroups");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling patchGroups");
      }
      // verify the required parameter 'patchRequest' is set
      if (patchRequest === undefined || patchRequest === null) {
        throw new Error("Missing the required parameter 'patchRequest' when calling patchGroups");
      }

      let pathParams = {
        'id': id,
        'integration': integration,
        'tenant': tenant
      };
      let queryParams = {
        'attributes': opts['attributes'],
        'excludedAttributes': opts['excludedAttributes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/scim+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/integrations/{integration}/scim/v2/Groups/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryGroups operation.
     * @callback module:api/SCIMGroupsApi~queryGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScimResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find by a combination of query parameters
     * @param {String} integration 
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [attributes] 
     * @param {String} [excludedAttributes] 
     * @param {String} [filter] 
     * @param {String} [sortBy] 
     * @param {module:model/SortOrder} [sortOrder] 
     * @param {Number} [startIndex] 
     * @param {Number} [count] 
     * @param {module:api/SCIMGroupsApi~queryGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScimResource}
     */
    queryGroups(integration, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'integration' is set
      if (integration === undefined || integration === null) {
        throw new Error("Missing the required parameter 'integration' when calling queryGroups");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling queryGroups");
      }

      let pathParams = {
        'integration': integration,
        'tenant': tenant
      };
      let queryParams = {
        'attributes': opts['attributes'],
        'excludedAttributes': opts['excludedAttributes'],
        'filter': opts['filter'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'startIndex': opts['startIndex'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/scim+json'];
      let returnType = ScimResource;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/integrations/{integration}/scim/v2/Groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroups operation.
     * @callback module:api/SCIMGroupsApi~updateGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScimResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update
     * @param {String} id 
     * @param {String} integration 
     * @param {String} tenant 
     * @param {module:model/ScimResource} scimResource 
     * @param {Object} opts Optional parameters
     * @param {String} [attributes] 
     * @param {String} [excludedAttributes] 
     * @param {module:api/SCIMGroupsApi~updateGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScimResource}
     */
    updateGroups(id, integration, tenant, scimResource, opts, callback) {
      opts = opts || {};
      let postBody = scimResource;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateGroups");
      }
      // verify the required parameter 'integration' is set
      if (integration === undefined || integration === null) {
        throw new Error("Missing the required parameter 'integration' when calling updateGroups");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling updateGroups");
      }
      // verify the required parameter 'scimResource' is set
      if (scimResource === undefined || scimResource === null) {
        throw new Error("Missing the required parameter 'scimResource' when calling updateGroups");
      }

      let pathParams = {
        'id': id,
        'integration': integration,
        'tenant': tenant
      };
      let queryParams = {
        'attributes': opts['attributes'],
        'excludedAttributes': opts['excludedAttributes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/scim+json'];
      let accepts = ['application/scim+json'];
      let returnType = ScimResource;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/integrations/{integration}/scim/v2/Groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
