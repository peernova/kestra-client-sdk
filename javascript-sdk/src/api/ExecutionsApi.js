/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BulkErrorResponse from '../model/BulkErrorResponse';
import BulkResponse from '../model/BulkResponse';
import DeleteExecutionsByQueryRequest from '../model/DeleteExecutionsByQueryRequest';
import EventExecution from '../model/EventExecution';
import EventExecutionStatusEvent from '../model/EventExecutionStatusEvent';
import Execution from '../model/Execution';
import ExecutionControllerApiValidateExecutionInputsResponse from '../model/ExecutionControllerApiValidateExecutionInputsResponse';
import ExecutionControllerEvalResult from '../model/ExecutionControllerEvalResult';
import ExecutionControllerExecutionResponse from '../model/ExecutionControllerExecutionResponse';
import ExecutionControllerLastExecutionResponse from '../model/ExecutionControllerLastExecutionResponse';
import ExecutionControllerSetLabelsByIdsRequest from '../model/ExecutionControllerSetLabelsByIdsRequest';
import ExecutionControllerStateRequest from '../model/ExecutionControllerStateRequest';
import ExecutionControllerWebhookResponse from '../model/ExecutionControllerWebhookResponse';
import ExecutionKind from '../model/ExecutionKind';
import ExecutionRepositoryInterfaceChildFilter from '../model/ExecutionRepositoryInterfaceChildFilter';
import ExecutionRepositoryInterfaceFlowFilter from '../model/ExecutionRepositoryInterfaceFlowFilter';
import FileMetas from '../model/FileMetas';
import FlowForExecution from '../model/FlowForExecution';
import FlowGraph from '../model/FlowGraph';
import FlowScope from '../model/FlowScope';
import Label from '../model/Label';
import PagedResultsExecution from '../model/PagedResultsExecution';
import PagedResultsTaskRun from '../model/PagedResultsTaskRun';
import QueryFilter from '../model/QueryFilter';
import StateType from '../model/StateType';

/**
* Executions service.
* @module api/ExecutionsApi
* @version 1.0.0
*/
export default class ExecutionsApi {

    /**
    * Constructs a new ExecutionsApi. 
    * @alias module:api/ExecutionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createExecution operation.
     * @callback module:api/ExecutionsApi~createExecutionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ExecutionControllerExecutionResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new execution for a flow
     * @param {String} namespace The flow namespace
     * @param {String} id The flow id
     * @param {Boolean} wait If the server will wait the end of the execution
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [labels] The labels as a list of 'key:value'
     * @param {Number} [revision] The flow revision or latest if null
     * @param {Date} [scheduleDate] Schedule the flow on a specific date
     * @param {String} [breakpoints] Set a list of breakpoints at specific tasks 'id.value', separated by a coma.
     * @param {module:model/ExecutionKind} [kind] Specific execution kind
     * @param {module:api/ExecutionsApi~createExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ExecutionControllerExecutionResponse>}
     */
    createExecution(namespace, id, wait, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createExecution");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createExecution");
      }
      // verify the required parameter 'wait' is set
      if (wait === undefined || wait === null) {
        throw new Error("Missing the required parameter 'wait' when calling createExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createExecution");
      }

      let pathParams = {
        'namespace': namespace,
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'multi'),
        'wait': wait,
        'revision': opts['revision'],
        'scheduleDate': opts['scheduleDate'],
        'breakpoints': opts['breakpoints'],
        'kind': opts['kind']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [ExecutionControllerExecutionResponse];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{namespace}/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExecution operation.
     * @callback module:api/ExecutionsApi~deleteExecutionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an execution
     * @param {String} executionId The execution id
     * @param {Boolean} deleteLogs Whether to delete execution logs
     * @param {Boolean} deleteMetrics Whether to delete execution metrics
     * @param {Boolean} deleteStorage Whether to delete execution files in the internal storage
     * @param {String} tenant 
     * @param {module:api/ExecutionsApi~deleteExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteExecution(executionId, deleteLogs, deleteMetrics, deleteStorage, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling deleteExecution");
      }
      // verify the required parameter 'deleteLogs' is set
      if (deleteLogs === undefined || deleteLogs === null) {
        throw new Error("Missing the required parameter 'deleteLogs' when calling deleteExecution");
      }
      // verify the required parameter 'deleteMetrics' is set
      if (deleteMetrics === undefined || deleteMetrics === null) {
        throw new Error("Missing the required parameter 'deleteMetrics' when calling deleteExecution");
      }
      // verify the required parameter 'deleteStorage' is set
      if (deleteStorage === undefined || deleteStorage === null) {
        throw new Error("Missing the required parameter 'deleteStorage' when calling deleteExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteExecution");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
        'deleteLogs': deleteLogs,
        'deleteMetrics': deleteMetrics,
        'deleteStorage': deleteStorage
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{executionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExecutionsByIds operation.
     * @callback module:api/ExecutionsApi~deleteExecutionsByIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a list of executions
     * @param {Boolean} deleteLogs Whether to delete execution logs
     * @param {Boolean} deleteMetrics Whether to delete execution metrics
     * @param {Boolean} deleteStorage Whether to delete execution files in the internal storage
     * @param {String} tenant 
     * @param {Array.<String>} requestBody The execution id
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeNonTerminated = false)] Whether to delete non-terminated executions
     * @param {module:api/ExecutionsApi~deleteExecutionsByIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkResponse}
     */
    deleteExecutionsByIds(deleteLogs, deleteMetrics, deleteStorage, tenant, requestBody, opts, callback) {
      opts = opts || {};
      let postBody = requestBody;
      // verify the required parameter 'deleteLogs' is set
      if (deleteLogs === undefined || deleteLogs === null) {
        throw new Error("Missing the required parameter 'deleteLogs' when calling deleteExecutionsByIds");
      }
      // verify the required parameter 'deleteMetrics' is set
      if (deleteMetrics === undefined || deleteMetrics === null) {
        throw new Error("Missing the required parameter 'deleteMetrics' when calling deleteExecutionsByIds");
      }
      // verify the required parameter 'deleteStorage' is set
      if (deleteStorage === undefined || deleteStorage === null) {
        throw new Error("Missing the required parameter 'deleteStorage' when calling deleteExecutionsByIds");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteExecutionsByIds");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling deleteExecutionsByIds");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'includeNonTerminated': opts['includeNonTerminated'],
        'deleteLogs': deleteLogs,
        'deleteMetrics': deleteMetrics,
        'deleteStorage': deleteStorage
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/by-ids', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExecutionsByQuery operation.
     * @callback module:api/ExecutionsApi~deleteExecutionsByQueryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete executions filter by query parameters
     * @param {Boolean} deleteLogs Whether to delete execution logs
     * @param {Boolean} deleteMetrics Whether to delete execution metrics
     * @param {Boolean} deleteStorage Whether to delete execution files in the internal storage
     * @param {String} tenant 
     * @param {module:model/DeleteExecutionsByQueryRequest} deleteExecutionsByQueryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<module:model/FlowScope>} [scope] The scope of the executions to include
     * @param {String} [namespace] A namespace filter prefix
     * @param {String} [flowId] A flow id filter
     * @param {Date} [startDate] The start datetime
     * @param {Date} [endDate] The end datetime
     * @param {String} [timeRange] A time range filter relative to the current time
     * @param {Array.<module:model/StateType>} [state] A state filter
     * @param {Array.<String>} [labels] A labels filter as a list of 'key:value'
     * @param {String} [triggerExecutionId] The trigger execution id
     * @param {module:model/ExecutionRepositoryInterfaceChildFilter} [childFilter] A execution child filter
     * @param {Boolean} [includeNonTerminated = false)] Whether to delete non-terminated executions
     * @param {module:api/ExecutionsApi~deleteExecutionsByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteExecutionsByQuery(deleteLogs, deleteMetrics, deleteStorage, tenant, deleteExecutionsByQueryRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteExecutionsByQueryRequest;
      // verify the required parameter 'deleteLogs' is set
      if (deleteLogs === undefined || deleteLogs === null) {
        throw new Error("Missing the required parameter 'deleteLogs' when calling deleteExecutionsByQuery");
      }
      // verify the required parameter 'deleteMetrics' is set
      if (deleteMetrics === undefined || deleteMetrics === null) {
        throw new Error("Missing the required parameter 'deleteMetrics' when calling deleteExecutionsByQuery");
      }
      // verify the required parameter 'deleteStorage' is set
      if (deleteStorage === undefined || deleteStorage === null) {
        throw new Error("Missing the required parameter 'deleteStorage' when calling deleteExecutionsByQuery");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteExecutionsByQuery");
      }
      // verify the required parameter 'deleteExecutionsByQueryRequest' is set
      if (deleteExecutionsByQueryRequest === undefined || deleteExecutionsByQueryRequest === null) {
        throw new Error("Missing the required parameter 'deleteExecutionsByQueryRequest' when calling deleteExecutionsByQuery");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'scope': this.apiClient.buildCollectionParam(opts['scope'], 'csv'),
        'namespace': opts['namespace'],
        'flowId': opts['flowId'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'timeRange': opts['timeRange'],
        'state': this.apiClient.buildCollectionParam(opts['state'], 'csv'),
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'multi'),
        'triggerExecutionId': opts['triggerExecutionId'],
        'childFilter': opts['childFilter'],
        'includeNonTerminated': opts['includeNonTerminated'],
        'deleteLogs': deleteLogs,
        'deleteMetrics': deleteMetrics,
        'deleteStorage': deleteStorage
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/by-query', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadFileFromExecution operation.
     * @callback module:api/ExecutionsApi~downloadFileFromExecutionCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download file for an execution
     * @param {String} executionId The execution id
     * @param {String} path The internal storage uri
     * @param {String} tenant 
     * @param {module:api/ExecutionsApi~downloadFileFromExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    downloadFileFromExecution(executionId, path, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling downloadFileFromExecution");
      }
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling downloadFileFromExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling downloadFileFromExecution");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
        'path': path
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{executionId}/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the evalTaskRunExpression operation.
     * @callback module:api/ExecutionsApi~evalTaskRunExpressionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExecutionControllerEvalResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Evaluate a variable expression for this taskrun
     * @param {String} executionId The execution id
     * @param {String} taskRunId The taskrun id
     * @param {String} tenant 
     * @param {String} body The Pebble expression that should be evaluated
     * @param {module:api/ExecutionsApi~evalTaskRunExpressionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExecutionControllerEvalResult}
     */
    evalTaskRunExpression(executionId, taskRunId, tenant, body, callback) {
      let postBody = body;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling evalTaskRunExpression");
      }
      // verify the required parameter 'taskRunId' is set
      if (taskRunId === undefined || taskRunId === null) {
        throw new Error("Missing the required parameter 'taskRunId' when calling evalTaskRunExpression");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling evalTaskRunExpression");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling evalTaskRunExpression");
      }

      let pathParams = {
        'executionId': executionId,
        'taskRunId': taskRunId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = ExecutionControllerEvalResult;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{executionId}/eval/{taskRunId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the followDependenciesExecutions operation.
     * @callback module:api/ExecutionsApi~followDependenciesExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventExecutionStatusEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow all execution dependencies executions
     * @param {String} executionId The execution id
     * @param {Boolean} destinationOnly If true, list only destination dependencies, otherwise list also source dependencies
     * @param {Boolean} expandAll If true, expand all dependencies recursively
     * @param {String} tenant 
     * @param {module:api/ExecutionsApi~followDependenciesExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventExecutionStatusEvent}
     */
    followDependenciesExecutions(executionId, destinationOnly, expandAll, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling followDependenciesExecutions");
      }
      // verify the required parameter 'destinationOnly' is set
      if (destinationOnly === undefined || destinationOnly === null) {
        throw new Error("Missing the required parameter 'destinationOnly' when calling followDependenciesExecutions");
      }
      // verify the required parameter 'expandAll' is set
      if (expandAll === undefined || expandAll === null) {
        throw new Error("Missing the required parameter 'expandAll' when calling followDependenciesExecutions");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling followDependenciesExecutions");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
        'destinationOnly': destinationOnly,
        'expandAll': expandAll
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['text/event-stream'];
      let returnType = EventExecutionStatusEvent;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{executionId}/follow-dependencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the followExecution operation.
     * @callback module:api/ExecutionsApi~followExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventExecution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow an execution
     * @param {String} executionId The execution id
     * @param {String} tenant 
     * @param {module:api/ExecutionsApi~followExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventExecution}
     */
    followExecution(executionId, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling followExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling followExecution");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['text/event-stream'];
      let returnType = EventExecution;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{executionId}/follow', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forceRunByIds operation.
     * @callback module:api/ExecutionsApi~forceRunByIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Force run a list of executions
     * @param {String} tenant 
     * @param {Array.<String>} requestBody The list of executions id
     * @param {module:api/ExecutionsApi~forceRunByIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkResponse}
     */
    forceRunByIds(tenant, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling forceRunByIds");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling forceRunByIds");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/force-run/by-ids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forceRunExecution operation.
     * @callback module:api/ExecutionsApi~forceRunExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Execution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Force run an execution
     * @param {String} executionId The execution id
     * @param {String} tenant 
     * @param {module:api/ExecutionsApi~forceRunExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Execution}
     */
    forceRunExecution(executionId, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling forceRunExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling forceRunExecution");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Execution;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{executionId}/force-run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forceRunExecutionsByQuery operation.
     * @callback module:api/ExecutionsApi~forceRunExecutionsByQueryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Force run executions filter by query parameters
     * @param {String} tenant 
     * @param {module:model/DeleteExecutionsByQueryRequest} deleteExecutionsByQueryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<module:model/FlowScope>} [scope] The scope of the executions to include
     * @param {String} [namespace] A namespace filter prefix
     * @param {String} [flowId] A flow id filter
     * @param {Date} [startDate] The start datetime
     * @param {Date} [endDate] The end datetime
     * @param {String} [timeRange] A time range filter relative to the current time
     * @param {Array.<module:model/StateType>} [state] A state filter
     * @param {Array.<String>} [labels] A labels filter as a list of 'key:value'
     * @param {String} [triggerExecutionId] The trigger execution id
     * @param {module:model/ExecutionRepositoryInterfaceChildFilter} [childFilter] A execution child filter
     * @param {module:api/ExecutionsApi~forceRunExecutionsByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    forceRunExecutionsByQuery(tenant, deleteExecutionsByQueryRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteExecutionsByQueryRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling forceRunExecutionsByQuery");
      }
      // verify the required parameter 'deleteExecutionsByQueryRequest' is set
      if (deleteExecutionsByQueryRequest === undefined || deleteExecutionsByQueryRequest === null) {
        throw new Error("Missing the required parameter 'deleteExecutionsByQueryRequest' when calling forceRunExecutionsByQuery");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'scope': this.apiClient.buildCollectionParam(opts['scope'], 'csv'),
        'namespace': opts['namespace'],
        'flowId': opts['flowId'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'timeRange': opts['timeRange'],
        'state': this.apiClient.buildCollectionParam(opts['state'], 'csv'),
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'multi'),
        'triggerExecutionId': opts['triggerExecutionId'],
        'childFilter': opts['childFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/force-run/by-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExecution operation.
     * @callback module:api/ExecutionsApi~getExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Execution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an execution
     * @param {String} executionId The execution id
     * @param {String} tenant 
     * @param {module:api/ExecutionsApi~getExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Execution}
     */
    getExecution(executionId, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling getExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getExecution");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Execution;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{executionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExecutionFlowGraph operation.
     * @callback module:api/ExecutionsApi~getExecutionFlowGraphCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlowGraph} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a graph for an execution
     * @param {String} executionId The execution id
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [subflows] The subflow tasks to display
     * @param {module:api/ExecutionsApi~getExecutionFlowGraphCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlowGraph}
     */
    getExecutionFlowGraph(executionId, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling getExecutionFlowGraph");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getExecutionFlowGraph");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
        'subflows': this.apiClient.buildCollectionParam(opts['subflows'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FlowGraph;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{executionId}/graph', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileMetadatasFromExecution operation.
     * @callback module:api/ExecutionsApi~getFileMetadatasFromExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileMetas} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get file meta information for an execution
     * @param {String} executionId The execution id
     * @param {String} path The internal storage uri
     * @param {String} tenant 
     * @param {module:api/ExecutionsApi~getFileMetadatasFromExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileMetas}
     */
    getFileMetadatasFromExecution(executionId, path, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling getFileMetadatasFromExecution");
      }
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getFileMetadatasFromExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getFileMetadatasFromExecution");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
        'path': path
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileMetas;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{executionId}/file/metas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFlowFromExecution operation.
     * @callback module:api/ExecutionsApi~getFlowFromExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlowForExecution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get flow information's for an execution
     * @param {String} namespace The namespace of the flow
     * @param {String} flowId The flow id
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Number} [revision] The flow revision
     * @param {module:api/ExecutionsApi~getFlowFromExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlowForExecution}
     */
    getFlowFromExecution(namespace, flowId, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getFlowFromExecution");
      }
      // verify the required parameter 'flowId' is set
      if (flowId === undefined || flowId === null) {
        throw new Error("Missing the required parameter 'flowId' when calling getFlowFromExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getFlowFromExecution");
      }

      let pathParams = {
        'namespace': namespace,
        'flowId': flowId,
        'tenant': tenant
      };
      let queryParams = {
        'revision': opts['revision']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FlowForExecution;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/flows/{namespace}/{flowId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFlowFromExecutionById operation.
     * @callback module:api/ExecutionsApi~getFlowFromExecutionByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlowForExecution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get flow information's for an execution
     * @param {String} executionId The execution that you want flow information's
     * @param {String} tenant 
     * @param {module:api/ExecutionsApi~getFlowFromExecutionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlowForExecution}
     */
    getFlowFromExecutionById(executionId, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling getFlowFromExecutionById");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getFlowFromExecutionById");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FlowForExecution;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{executionId}/flow', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLatestExecutions operation.
     * @callback module:api/ExecutionsApi~getLatestExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ExecutionControllerLastExecutionResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the latest execution for given flows
     * @param {String} tenant 
     * @param {Array.<module:model/ExecutionRepositoryInterfaceFlowFilter>} executionRepositoryInterfaceFlowFilter 
     * @param {module:api/ExecutionsApi~getLatestExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ExecutionControllerLastExecutionResponse>}
     */
    getLatestExecutions(tenant, executionRepositoryInterfaceFlowFilter, callback) {
      let postBody = executionRepositoryInterfaceFlowFilter;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getLatestExecutions");
      }
      // verify the required parameter 'executionRepositoryInterfaceFlowFilter' is set
      if (executionRepositoryInterfaceFlowFilter === undefined || executionRepositoryInterfaceFlowFilter === null) {
        throw new Error("Missing the required parameter 'executionRepositoryInterfaceFlowFilter' when calling getLatestExecutions");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ExecutionControllerLastExecutionResponse];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/latest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the killExecution operation.
     * @callback module:api/ExecutionsApi~killExecutionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Kill an execution
     * @param {String} executionId The execution id
     * @param {Boolean} isOnKillCascade Specifies whether killing the execution also kill all subflow executions.
     * @param {String} tenant 
     * @param {module:api/ExecutionsApi~killExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    killExecution(executionId, isOnKillCascade, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling killExecution");
      }
      // verify the required parameter 'isOnKillCascade' is set
      if (isOnKillCascade === undefined || isOnKillCascade === null) {
        throw new Error("Missing the required parameter 'isOnKillCascade' when calling killExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling killExecution");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
        'isOnKillCascade': isOnKillCascade
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['text/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{executionId}/kill', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the killExecutionsByIds operation.
     * @callback module:api/ExecutionsApi~killExecutionsByIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Kill a list of executions
     * @param {String} tenant 
     * @param {Array.<String>} requestBody The list of executions id
     * @param {module:api/ExecutionsApi~killExecutionsByIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkResponse}
     */
    killExecutionsByIds(tenant, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling killExecutionsByIds");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling killExecutionsByIds");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/kill/by-ids', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the killExecutionsByQuery operation.
     * @callback module:api/ExecutionsApi~killExecutionsByQueryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Kill executions filter by query parameters
     * @param {String} tenant 
     * @param {module:model/DeleteExecutionsByQueryRequest} deleteExecutionsByQueryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<module:model/FlowScope>} [scope] The scope of the executions to include
     * @param {String} [namespace] A namespace filter prefix
     * @param {String} [flowId] A flow id filter
     * @param {Date} [startDate] The start datetime
     * @param {Date} [endDate] The end datetime
     * @param {String} [timeRange] A time range filter relative to the current time
     * @param {Array.<module:model/StateType>} [state] A state filter
     * @param {Array.<String>} [labels] A labels filter as a list of 'key:value'
     * @param {String} [triggerExecutionId] The trigger execution id
     * @param {module:model/ExecutionRepositoryInterfaceChildFilter} [childFilter] A execution child filter
     * @param {module:api/ExecutionsApi~killExecutionsByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    killExecutionsByQuery(tenant, deleteExecutionsByQueryRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteExecutionsByQueryRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling killExecutionsByQuery");
      }
      // verify the required parameter 'deleteExecutionsByQueryRequest' is set
      if (deleteExecutionsByQueryRequest === undefined || deleteExecutionsByQueryRequest === null) {
        throw new Error("Missing the required parameter 'deleteExecutionsByQueryRequest' when calling killExecutionsByQuery");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'scope': this.apiClient.buildCollectionParam(opts['scope'], 'csv'),
        'namespace': opts['namespace'],
        'flowId': opts['flowId'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'timeRange': opts['timeRange'],
        'state': this.apiClient.buildCollectionParam(opts['state'], 'csv'),
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'multi'),
        'triggerExecutionId': opts['triggerExecutionId'],
        'childFilter': opts['childFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/kill/by-query', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listExecutableDistinctNamespaces operation.
     * @callback module:api/ExecutionsApi~listExecutableDistinctNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all namespaces that have executable flows
     * @param {String} tenant 
     * @param {module:api/ExecutionsApi~listExecutableDistinctNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    listExecutableDistinctNamespaces(tenant, callback) {
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listExecutableDistinctNamespaces");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/namespaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFlowExecutionsByNamespace operation.
     * @callback module:api/ExecutionsApi~listFlowExecutionsByNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FlowForExecution>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all flow ids for a namespace. Data returned are FlowForExecution containing minimal information about a Flow for when you are allowed to executing but not reading.
     * @param {String} namespace The namespace
     * @param {String} tenant 
     * @param {module:api/ExecutionsApi~listFlowExecutionsByNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FlowForExecution>}
     */
    listFlowExecutionsByNamespace(namespace, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling listFlowExecutionsByNamespace");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listFlowExecutionsByNamespace");
      }

      let pathParams = {
        'namespace': namespace,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FlowForExecution];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/namespaces/{namespace}/flows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pauseExecution operation.
     * @callback module:api/ExecutionsApi~pauseExecutionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pause a running execution.
     * @param {String} executionId The execution id
     * @param {String} tenant 
     * @param {module:api/ExecutionsApi~pauseExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pauseExecution(executionId, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling pauseExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling pauseExecution");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{executionId}/pause', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pauseExecutionsByIds operation.
     * @callback module:api/ExecutionsApi~pauseExecutionsByIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pause a list of running executions
     * @param {String} tenant 
     * @param {Array.<String>} requestBody The list of executions id
     * @param {module:api/ExecutionsApi~pauseExecutionsByIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkResponse}
     */
    pauseExecutionsByIds(tenant, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling pauseExecutionsByIds");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling pauseExecutionsByIds");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/pause/by-ids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pauseExecutionsByQuery operation.
     * @callback module:api/ExecutionsApi~pauseExecutionsByQueryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pause executions filter by query parameters
     * @param {String} tenant 
     * @param {module:model/DeleteExecutionsByQueryRequest} deleteExecutionsByQueryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<module:model/FlowScope>} [scope] The scope of the executions to include
     * @param {String} [namespace] A namespace filter prefix
     * @param {String} [flowId] A flow id filter
     * @param {Date} [startDate] The start datetime
     * @param {Date} [endDate] The end datetime
     * @param {String} [timeRange] A time range filter relative to the current time
     * @param {Array.<module:model/StateType>} [state] A state filter
     * @param {Array.<String>} [labels] A labels filter as a list of 'key:value'
     * @param {String} [triggerExecutionId] The trigger execution id
     * @param {module:model/ExecutionRepositoryInterfaceChildFilter} [childFilter] A execution child filter
     * @param {module:api/ExecutionsApi~pauseExecutionsByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    pauseExecutionsByQuery(tenant, deleteExecutionsByQueryRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteExecutionsByQueryRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling pauseExecutionsByQuery");
      }
      // verify the required parameter 'deleteExecutionsByQueryRequest' is set
      if (deleteExecutionsByQueryRequest === undefined || deleteExecutionsByQueryRequest === null) {
        throw new Error("Missing the required parameter 'deleteExecutionsByQueryRequest' when calling pauseExecutionsByQuery");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'scope': this.apiClient.buildCollectionParam(opts['scope'], 'csv'),
        'namespace': opts['namespace'],
        'flowId': opts['flowId'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'timeRange': opts['timeRange'],
        'state': this.apiClient.buildCollectionParam(opts['state'], 'csv'),
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'multi'),
        'triggerExecutionId': opts['triggerExecutionId'],
        'childFilter': opts['childFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/pause/by-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the previewFileFromExecution operation.
     * @callback module:api/ExecutionsApi~previewFileFromExecutionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get file preview for an execution
     * @param {String} executionId The execution id
     * @param {String} path The internal storage uri
     * @param {Number} maxRows The max row returns
     * @param {String} encoding The file encoding as Java charset name. Defaults to UTF-8
     * @param {String} tenant 
     * @param {module:api/ExecutionsApi~previewFileFromExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    previewFileFromExecution(executionId, path, maxRows, encoding, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling previewFileFromExecution");
      }
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling previewFileFromExecution");
      }
      // verify the required parameter 'maxRows' is set
      if (maxRows === undefined || maxRows === null) {
        throw new Error("Missing the required parameter 'maxRows' when calling previewFileFromExecution");
      }
      // verify the required parameter 'encoding' is set
      if (encoding === undefined || encoding === null) {
        throw new Error("Missing the required parameter 'encoding' when calling previewFileFromExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling previewFileFromExecution");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
        'path': path,
        'maxRows': maxRows,
        'encoding': encoding
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{executionId}/file/preview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replayExecution operation.
     * @callback module:api/ExecutionsApi~replayExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Execution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new execution from an old one and start it from a specified task run id
     * @param {String} executionId the original execution id to clone
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [taskRunId] The taskrun id
     * @param {Number} [revision] The flow revision to use for new execution
     * @param {String} [breakpoints] Set a list of breakpoints at specific tasks 'id.value', separated by a coma.
     * @param {module:api/ExecutionsApi~replayExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Execution}
     */
    replayExecution(executionId, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling replayExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling replayExecution");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
        'taskRunId': opts['taskRunId'],
        'revision': opts['revision'],
        'breakpoints': opts['breakpoints']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Execution;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{executionId}/replay', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replayExecutionWithinputs operation.
     * @callback module:api/ExecutionsApi~replayExecutionWithinputsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Execution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new execution from an old one and start it from a specified task run id
     * @param {String} executionId the original execution id to clone
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [taskRunId] The taskrun id
     * @param {Number} [revision] The flow revision to use for new execution
     * @param {String} [breakpoints] Set a list of breakpoints at specific tasks 'id.value', separated by a coma.
     * @param {module:api/ExecutionsApi~replayExecutionWithinputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Execution}
     */
    replayExecutionWithinputs(executionId, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling replayExecutionWithinputs");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling replayExecutionWithinputs");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
        'taskRunId': opts['taskRunId'],
        'revision': opts['revision'],
        'breakpoints': opts['breakpoints']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Execution;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{executionId}/replay-with-inputs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replayExecutionsByIds operation.
     * @callback module:api/ExecutionsApi~replayExecutionsByIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new executions from old ones. Keep the flow revision
     * @param {String} tenant 
     * @param {Array.<String>} requestBody The list of executions id
     * @param {Object} opts Optional parameters
     * @param {Boolean} [latestRevision = false)] If latest revision should be used
     * @param {module:api/ExecutionsApi~replayExecutionsByIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkResponse}
     */
    replayExecutionsByIds(tenant, requestBody, opts, callback) {
      opts = opts || {};
      let postBody = requestBody;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling replayExecutionsByIds");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling replayExecutionsByIds");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'latestRevision': opts['latestRevision']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/replay/by-ids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replayExecutionsByQuery operation.
     * @callback module:api/ExecutionsApi~replayExecutionsByQueryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new executions from old ones filter by query parameters. Keep the flow revision
     * @param {String} tenant 
     * @param {module:model/DeleteExecutionsByQueryRequest} deleteExecutionsByQueryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<module:model/FlowScope>} [scope] The scope of the executions to include
     * @param {String} [namespace] A namespace filter prefix
     * @param {String} [flowId] A flow id filter
     * @param {Date} [startDate] The start datetime
     * @param {Date} [endDate] The end datetime
     * @param {String} [timeRange] A time range filter relative to the current time
     * @param {Array.<module:model/StateType>} [state] A state filter
     * @param {Array.<String>} [labels] A labels filter as a list of 'key:value'
     * @param {String} [triggerExecutionId] The trigger execution id
     * @param {module:model/ExecutionRepositoryInterfaceChildFilter} [childFilter] A execution child filter
     * @param {Boolean} [latestRevision = false)] If latest revision should be used
     * @param {module:api/ExecutionsApi~replayExecutionsByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    replayExecutionsByQuery(tenant, deleteExecutionsByQueryRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteExecutionsByQueryRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling replayExecutionsByQuery");
      }
      // verify the required parameter 'deleteExecutionsByQueryRequest' is set
      if (deleteExecutionsByQueryRequest === undefined || deleteExecutionsByQueryRequest === null) {
        throw new Error("Missing the required parameter 'deleteExecutionsByQueryRequest' when calling replayExecutionsByQuery");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'scope': this.apiClient.buildCollectionParam(opts['scope'], 'csv'),
        'namespace': opts['namespace'],
        'flowId': opts['flowId'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'timeRange': opts['timeRange'],
        'state': this.apiClient.buildCollectionParam(opts['state'], 'csv'),
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'multi'),
        'triggerExecutionId': opts['triggerExecutionId'],
        'childFilter': opts['childFilter'],
        'latestRevision': opts['latestRevision']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/replay/by-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restartExecution operation.
     * @callback module:api/ExecutionsApi~restartExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Execution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart a new execution from an old one
     * @param {String} executionId The execution id
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Number} [revision] The flow revision to use for new execution
     * @param {module:api/ExecutionsApi~restartExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Execution}
     */
    restartExecution(executionId, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling restartExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling restartExecution");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
        'revision': opts['revision']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Execution;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{executionId}/restart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restartExecutionsByIds operation.
     * @callback module:api/ExecutionsApi~restartExecutionsByIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart a list of executions
     * @param {String} tenant 
     * @param {Array.<String>} requestBody The list of executions id
     * @param {module:api/ExecutionsApi~restartExecutionsByIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkResponse}
     */
    restartExecutionsByIds(tenant, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling restartExecutionsByIds");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling restartExecutionsByIds");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/restart/by-ids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restartExecutionsByQuery operation.
     * @callback module:api/ExecutionsApi~restartExecutionsByQueryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart executions filter by query parameters
     * @param {String} tenant 
     * @param {module:model/DeleteExecutionsByQueryRequest} deleteExecutionsByQueryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<module:model/FlowScope>} [scope] The scope of the executions to include
     * @param {String} [namespace] A namespace filter prefix
     * @param {String} [flowId] A flow id filter
     * @param {Date} [startDate] The start datetime
     * @param {Date} [endDate] The end datetime
     * @param {String} [timeRange] A time range filter relative to the current time
     * @param {Array.<module:model/StateType>} [state] A state filter
     * @param {Array.<String>} [labels] A labels filter as a list of 'key:value'
     * @param {String} [triggerExecutionId] The trigger execution id
     * @param {module:model/ExecutionRepositoryInterfaceChildFilter} [childFilter] A execution child filter
     * @param {module:api/ExecutionsApi~restartExecutionsByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    restartExecutionsByQuery(tenant, deleteExecutionsByQueryRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteExecutionsByQueryRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling restartExecutionsByQuery");
      }
      // verify the required parameter 'deleteExecutionsByQueryRequest' is set
      if (deleteExecutionsByQueryRequest === undefined || deleteExecutionsByQueryRequest === null) {
        throw new Error("Missing the required parameter 'deleteExecutionsByQueryRequest' when calling restartExecutionsByQuery");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'scope': this.apiClient.buildCollectionParam(opts['scope'], 'csv'),
        'namespace': opts['namespace'],
        'flowId': opts['flowId'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'timeRange': opts['timeRange'],
        'state': this.apiClient.buildCollectionParam(opts['state'], 'csv'),
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'multi'),
        'triggerExecutionId': opts['triggerExecutionId'],
        'childFilter': opts['childFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/restart/by-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resumeExecution operation.
     * @callback module:api/ExecutionsApi~resumeExecutionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resume a paused execution.
     * @param {String} executionId The execution id
     * @param {String} tenant 
     * @param {module:api/ExecutionsApi~resumeExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    resumeExecution(executionId, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling resumeExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling resumeExecution");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{executionId}/resume', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resumeExecutionFromBreakpoint operation.
     * @callback module:api/ExecutionsApi~resumeExecutionFromBreakpointCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resume an execution from a breakpoint (in the 'BREAKPOINT' state).
     * @param {String} executionId The execution id
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [breakpoints] \"Set a list of breakpoints at specific tasks 'id.value', separated by a coma.
     * @param {module:api/ExecutionsApi~resumeExecutionFromBreakpointCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resumeExecutionFromBreakpoint(executionId, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling resumeExecutionFromBreakpoint");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling resumeExecutionFromBreakpoint");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
        'breakpoints': opts['breakpoints']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{executionId}/resume-from-breakpoint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resumeExecutionsByIds operation.
     * @callback module:api/ExecutionsApi~resumeExecutionsByIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resume a list of paused executions
     * @param {String} tenant 
     * @param {Array.<String>} requestBody The list of executions id
     * @param {module:api/ExecutionsApi~resumeExecutionsByIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkResponse}
     */
    resumeExecutionsByIds(tenant, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling resumeExecutionsByIds");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling resumeExecutionsByIds");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/resume/by-ids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resumeExecutionsByQuery operation.
     * @callback module:api/ExecutionsApi~resumeExecutionsByQueryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resume executions filter by query parameters
     * @param {String} tenant 
     * @param {module:model/DeleteExecutionsByQueryRequest} deleteExecutionsByQueryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<module:model/FlowScope>} [scope] The scope of the executions to include
     * @param {String} [namespace] A namespace filter prefix
     * @param {String} [flowId] A flow id filter
     * @param {Date} [startDate] The start datetime
     * @param {Date} [endDate] The end datetime
     * @param {String} [timeRange] A time range filter relative to the current time
     * @param {Array.<module:model/StateType>} [state] A state filter
     * @param {Array.<String>} [labels] A labels filter as a list of 'key:value'
     * @param {String} [triggerExecutionId] The trigger execution id
     * @param {module:model/ExecutionRepositoryInterfaceChildFilter} [childFilter] A execution child filter
     * @param {module:api/ExecutionsApi~resumeExecutionsByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    resumeExecutionsByQuery(tenant, deleteExecutionsByQueryRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteExecutionsByQueryRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling resumeExecutionsByQuery");
      }
      // verify the required parameter 'deleteExecutionsByQueryRequest' is set
      if (deleteExecutionsByQueryRequest === undefined || deleteExecutionsByQueryRequest === null) {
        throw new Error("Missing the required parameter 'deleteExecutionsByQueryRequest' when calling resumeExecutionsByQuery");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'scope': this.apiClient.buildCollectionParam(opts['scope'], 'csv'),
        'namespace': opts['namespace'],
        'flowId': opts['flowId'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'timeRange': opts['timeRange'],
        'state': this.apiClient.buildCollectionParam(opts['state'], 'csv'),
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'multi'),
        'triggerExecutionId': opts['triggerExecutionId'],
        'childFilter': opts['childFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/resume/by-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchExecutions operation.
     * @callback module:api/ExecutionsApi~searchExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsExecution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for executions
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [sort] The sort of current page
     * @param {Array.<module:model/QueryFilter>} [filters] Filters
     * @param {String} [q] A string filter
     * @param {Array.<module:model/FlowScope>} [scope] The scope of the executions to include
     * @param {String} [namespace] A namespace filter prefix
     * @param {String} [flowId] A flow id filter
     * @param {Date} [startDate] The start datetime
     * @param {Date} [endDate] The end datetime
     * @param {String} [timeRange] A time range filter relative to the current time
     * @param {Array.<module:model/StateType>} [state] A state filter
     * @param {Array.<String>} [labels] A labels filter as a list of 'key:value'
     * @param {String} [triggerExecutionId] The trigger execution id
     * @param {module:model/ExecutionRepositoryInterfaceChildFilter} [childFilter] A execution child filter
     * @param {module:api/ExecutionsApi~searchExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsExecution}
     */
    searchExecutions(page, size, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchExecutions");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchExecutions");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchExecutions");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'filters': this.apiClient.buildCollectionParam(opts['filters'], 'csv'),
        'q': opts['q'],
        'scope': this.apiClient.buildCollectionParam(opts['scope'], 'csv'),
        'namespace': opts['namespace'],
        'flowId': opts['flowId'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'timeRange': opts['timeRange'],
        'state': this.apiClient.buildCollectionParam(opts['state'], 'csv'),
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'multi'),
        'triggerExecutionId': opts['triggerExecutionId'],
        'childFilter': opts['childFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsExecution;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchExecutionsByFlowId operation.
     * @callback module:api/ExecutionsApi~searchExecutionsByFlowIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsExecution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for executions for a flow
     * @param {String} namespace The flow namespace
     * @param {String} flowId The flow id
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {module:api/ExecutionsApi~searchExecutionsByFlowIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsExecution}
     */
    searchExecutionsByFlowId(namespace, flowId, page, size, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling searchExecutionsByFlowId");
      }
      // verify the required parameter 'flowId' is set
      if (flowId === undefined || flowId === null) {
        throw new Error("Missing the required parameter 'flowId' when calling searchExecutionsByFlowId");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchExecutionsByFlowId");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchExecutionsByFlowId");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchExecutionsByFlowId");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'namespace': namespace,
        'flowId': flowId,
        'page': page,
        'size': size
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsExecution;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchTaskRun operation.
     * @callback module:api/ExecutionsApi~searchTaskRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsTaskRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for taskruns, only available with the Elasticsearch repository
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [sort] The sort of current page
     * @param {Array.<module:model/QueryFilter>} [filters] Filters
     * @param {String} [q] A string filter
     * @param {String} [namespace] A namespace filter prefix
     * @param {String} [flowId] A flow id filter
     * @param {Date} [startDate] The start datetime
     * @param {Date} [endDate] The end datetime
     * @param {String} [timeRange] A time range filter relative to the current time
     * @param {Array.<module:model/StateType>} [state] A state filter
     * @param {Array.<String>} [labels] A labels filter as a list of 'key:value'
     * @param {String} [triggerExecutionId] The trigger execution id
     * @param {module:model/ExecutionRepositoryInterfaceChildFilter} [childFilter] A execution child filter
     * @param {module:api/ExecutionsApi~searchTaskRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsTaskRun}
     */
    searchTaskRun(page, size, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchTaskRun");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchTaskRun");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchTaskRun");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'filters': this.apiClient.buildCollectionParam(opts['filters'], 'csv'),
        'q': opts['q'],
        'namespace': opts['namespace'],
        'flowId': opts['flowId'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'timeRange': opts['timeRange'],
        'state': this.apiClient.buildCollectionParam(opts['state'], 'csv'),
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'multi'),
        'triggerExecutionId': opts['triggerExecutionId'],
        'childFilter': opts['childFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsTaskRun;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/taskruns/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setLabelsOnTerminatedExecution operation.
     * @callback module:api/ExecutionsApi~setLabelsOnTerminatedExecutionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update labels of a terminated execution
     * @param {String} executionId The execution id
     * @param {String} tenant 
     * @param {Array.<module:model/Label>} label The labels to add to the execution
     * @param {module:api/ExecutionsApi~setLabelsOnTerminatedExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setLabelsOnTerminatedExecution(executionId, tenant, label, callback) {
      let postBody = label;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling setLabelsOnTerminatedExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling setLabelsOnTerminatedExecution");
      }
      // verify the required parameter 'label' is set
      if (label === undefined || label === null) {
        throw new Error("Missing the required parameter 'label' when calling setLabelsOnTerminatedExecution");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{executionId}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setLabelsOnTerminatedExecutionsByIds operation.
     * @callback module:api/ExecutionsApi~setLabelsOnTerminatedExecutionsByIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set labels on a list of executions
     * @param {String} tenant 
     * @param {module:model/ExecutionControllerSetLabelsByIdsRequest} executionControllerSetLabelsByIdsRequest The request containing a list of labels and a list of executions
     * @param {module:api/ExecutionsApi~setLabelsOnTerminatedExecutionsByIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkResponse}
     */
    setLabelsOnTerminatedExecutionsByIds(tenant, executionControllerSetLabelsByIdsRequest, callback) {
      let postBody = executionControllerSetLabelsByIdsRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling setLabelsOnTerminatedExecutionsByIds");
      }
      // verify the required parameter 'executionControllerSetLabelsByIdsRequest' is set
      if (executionControllerSetLabelsByIdsRequest === undefined || executionControllerSetLabelsByIdsRequest === null) {
        throw new Error("Missing the required parameter 'executionControllerSetLabelsByIdsRequest' when calling setLabelsOnTerminatedExecutionsByIds");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/labels/by-ids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setLabelsOnTerminatedExecutionsByQuery operation.
     * @callback module:api/ExecutionsApi~setLabelsOnTerminatedExecutionsByQueryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set label on executions filter by query parameters
     * @param {String} tenant 
     * @param {module:model/Label} label The labels to add to the execution
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<module:model/FlowScope>} [scope] The scope of the executions to include
     * @param {String} [namespace] A namespace filter prefix
     * @param {String} [flowId] A flow id filter
     * @param {Date} [startDate] The start datetime
     * @param {Date} [endDate] The end datetime
     * @param {String} [timeRange] A time range filter relative to the current time
     * @param {Array.<module:model/StateType>} [state] A state filter
     * @param {Array.<String>} [labels] A labels filter as a list of 'key:value'
     * @param {String} [triggerExecutionId] The trigger execution id
     * @param {module:model/ExecutionRepositoryInterfaceChildFilter} [childFilter] A execution child filter
     * @param {module:api/ExecutionsApi~setLabelsOnTerminatedExecutionsByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setLabelsOnTerminatedExecutionsByQuery(tenant, label, opts, callback) {
      opts = opts || {};
      let postBody = label;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling setLabelsOnTerminatedExecutionsByQuery");
      }
      // verify the required parameter 'label' is set
      if (label === undefined || label === null) {
        throw new Error("Missing the required parameter 'label' when calling setLabelsOnTerminatedExecutionsByQuery");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'scope': this.apiClient.buildCollectionParam(opts['scope'], 'csv'),
        'namespace': opts['namespace'],
        'flowId': opts['flowId'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'timeRange': opts['timeRange'],
        'state': this.apiClient.buildCollectionParam(opts['state'], 'csv'),
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'multi'),
        'triggerExecutionId': opts['triggerExecutionId'],
        'childFilter': opts['childFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/labels/by-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the triggerExecution operation.
     * @callback module:api/ExecutionsApi~triggerExecutionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ExecutionControllerExecutionResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger a new execution for a flow
     * @param {String} namespace The flow namespace
     * @param {String} id The flow id
     * @param {Boolean} wait If the server will wait the end of the execution
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [labels] The labels as a list of 'key:value'
     * @param {Number} [revision] The flow revision or latest if null
     * @param {module:api/ExecutionsApi~triggerExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ExecutionControllerExecutionResponse>}
     */
    triggerExecution(namespace, id, wait, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling triggerExecution");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling triggerExecution");
      }
      // verify the required parameter 'wait' is set
      if (wait === undefined || wait === null) {
        throw new Error("Missing the required parameter 'wait' when calling triggerExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling triggerExecution");
      }

      let pathParams = {
        'namespace': namespace,
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'multi'),
        'wait': wait,
        'revision': opts['revision']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [ExecutionControllerExecutionResponse];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/trigger/{namespace}/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the triggerExecutionByGetWebhook operation.
     * @callback module:api/ExecutionsApi~triggerExecutionByGetWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExecutionControllerWebhookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger a new execution by GET webhook trigger
     * @param {String} namespace The flow namespace
     * @param {String} id The flow id
     * @param {String} key The webhook trigger uid
     * @param {String} tenant 
     * @param {module:api/ExecutionsApi~triggerExecutionByGetWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExecutionControllerWebhookResponse}
     */
    triggerExecutionByGetWebhook(namespace, id, key, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling triggerExecutionByGetWebhook");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling triggerExecutionByGetWebhook");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling triggerExecutionByGetWebhook");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling triggerExecutionByGetWebhook");
      }

      let pathParams = {
        'namespace': namespace,
        'id': id,
        'key': key,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExecutionControllerWebhookResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/webhook/{namespace}/{id}/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the triggerExecutionByPostWebhook operation.
     * @callback module:api/ExecutionsApi~triggerExecutionByPostWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExecutionControllerWebhookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger a new execution by POST webhook trigger
     * @param {String} namespace The flow namespace
     * @param {String} id The flow id
     * @param {String} key The webhook trigger uid
     * @param {String} tenant 
     * @param {module:api/ExecutionsApi~triggerExecutionByPostWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExecutionControllerWebhookResponse}
     */
    triggerExecutionByPostWebhook(namespace, id, key, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling triggerExecutionByPostWebhook");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling triggerExecutionByPostWebhook");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling triggerExecutionByPostWebhook");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling triggerExecutionByPostWebhook");
      }

      let pathParams = {
        'namespace': namespace,
        'id': id,
        'key': key,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExecutionControllerWebhookResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/webhook/{namespace}/{id}/{key}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the triggerExecutionByPutWebhook operation.
     * @callback module:api/ExecutionsApi~triggerExecutionByPutWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExecutionControllerWebhookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger a new execution by PUT webhook trigger
     * @param {String} namespace The flow namespace
     * @param {String} id The flow id
     * @param {String} key The webhook trigger uid
     * @param {String} tenant 
     * @param {module:api/ExecutionsApi~triggerExecutionByPutWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExecutionControllerWebhookResponse}
     */
    triggerExecutionByPutWebhook(namespace, id, key, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling triggerExecutionByPutWebhook");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling triggerExecutionByPutWebhook");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling triggerExecutionByPutWebhook");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling triggerExecutionByPutWebhook");
      }

      let pathParams = {
        'namespace': namespace,
        'id': id,
        'key': key,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExecutionControllerWebhookResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/webhook/{namespace}/{id}/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unqueueExecution operation.
     * @callback module:api/ExecutionsApi~unqueueExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Execution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unqueue an execution
     * @param {String} executionId The execution id
     * @param {module:model/StateType} state The new state of the execution
     * @param {String} tenant 
     * @param {module:api/ExecutionsApi~unqueueExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Execution}
     */
    unqueueExecution(executionId, state, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling unqueueExecution");
      }
      // verify the required parameter 'state' is set
      if (state === undefined || state === null) {
        throw new Error("Missing the required parameter 'state' when calling unqueueExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling unqueueExecution");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
        'state': state
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Execution;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{executionId}/unqueue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unqueueExecutionsByIds operation.
     * @callback module:api/ExecutionsApi~unqueueExecutionsByIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unqueue a list of executions
     * @param {module:model/StateType} state The new state of the unqueued executions
     * @param {String} tenant 
     * @param {Array.<String>} requestBody The list of executions id
     * @param {module:api/ExecutionsApi~unqueueExecutionsByIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkResponse}
     */
    unqueueExecutionsByIds(state, tenant, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'state' is set
      if (state === undefined || state === null) {
        throw new Error("Missing the required parameter 'state' when calling unqueueExecutionsByIds");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling unqueueExecutionsByIds");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling unqueueExecutionsByIds");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'state': state
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/unqueue/by-ids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unqueueExecutionsByQuery operation.
     * @callback module:api/ExecutionsApi~unqueueExecutionsByQueryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unqueue executions filter by query parameters
     * @param {String} tenant 
     * @param {module:model/DeleteExecutionsByQueryRequest} deleteExecutionsByQueryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<module:model/FlowScope>} [scope] The scope of the executions to include
     * @param {String} [namespace] A namespace filter prefix
     * @param {String} [flowId] A flow id filter
     * @param {Date} [startDate] The start datetime
     * @param {Date} [endDate] The end datetime
     * @param {String} [timeRange] A time range filter relative to the current time
     * @param {Array.<module:model/StateType>} [state] A state filter
     * @param {Array.<String>} [labels] A labels filter as a list of 'key:value'
     * @param {String} [triggerExecutionId] The trigger execution id
     * @param {module:model/ExecutionRepositoryInterfaceChildFilter} [childFilter] A execution child filter
     * @param {module:model/StateType} [newState] The new state of the unqueued executions
     * @param {module:api/ExecutionsApi~unqueueExecutionsByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    unqueueExecutionsByQuery(tenant, deleteExecutionsByQueryRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteExecutionsByQueryRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling unqueueExecutionsByQuery");
      }
      // verify the required parameter 'deleteExecutionsByQueryRequest' is set
      if (deleteExecutionsByQueryRequest === undefined || deleteExecutionsByQueryRequest === null) {
        throw new Error("Missing the required parameter 'deleteExecutionsByQueryRequest' when calling unqueueExecutionsByQuery");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'scope': this.apiClient.buildCollectionParam(opts['scope'], 'csv'),
        'namespace': opts['namespace'],
        'flowId': opts['flowId'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'timeRange': opts['timeRange'],
        'state': this.apiClient.buildCollectionParam(opts['state'], 'csv'),
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'multi'),
        'triggerExecutionId': opts['triggerExecutionId'],
        'childFilter': opts['childFilter'],
        'newState': opts['newState']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/unqueue/by-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExecutionStatus operation.
     * @callback module:api/ExecutionsApi~updateExecutionStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Execution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change the state of an execution
     * @param {String} executionId The execution id
     * @param {module:model/StateType} status The new state of the execution
     * @param {String} tenant 
     * @param {module:api/ExecutionsApi~updateExecutionStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Execution}
     */
    updateExecutionStatus(executionId, status, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling updateExecutionStatus");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling updateExecutionStatus");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling updateExecutionStatus");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
        'status': status
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Execution;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{executionId}/change-status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExecutionsStatusByIds operation.
     * @callback module:api/ExecutionsApi~updateExecutionsStatusByIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change executions state by id
     * @param {module:model/StateType} newStatus The new state of the executions
     * @param {String} tenant 
     * @param {Array.<String>} requestBody The list of executions id
     * @param {module:api/ExecutionsApi~updateExecutionsStatusByIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkResponse}
     */
    updateExecutionsStatusByIds(newStatus, tenant, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'newStatus' is set
      if (newStatus === undefined || newStatus === null) {
        throw new Error("Missing the required parameter 'newStatus' when calling updateExecutionsStatusByIds");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling updateExecutionsStatusByIds");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling updateExecutionsStatusByIds");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'newStatus': newStatus
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/change-status/by-ids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExecutionsStatusByQuery operation.
     * @callback module:api/ExecutionsApi~updateExecutionsStatusByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change executions state by query parameters
     * @param {module:model/StateType} newStatus The new state of the executions
     * @param {String} tenant 
     * @param {module:model/DeleteExecutionsByQueryRequest} deleteExecutionsByQueryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<module:model/FlowScope>} [scope] The scope of the executions to include
     * @param {String} [namespace] A namespace filter prefix
     * @param {String} [flowId] A flow id filter
     * @param {Date} [startDate] The start datetime
     * @param {Date} [endDate] The end datetime
     * @param {String} [timeRange] A time range filter relative to the current time
     * @param {Array.<module:model/StateType>} [state] A state filter
     * @param {Array.<String>} [labels] A labels filter as a list of 'key:value'
     * @param {String} [triggerExecutionId] The trigger execution id
     * @param {module:model/ExecutionRepositoryInterfaceChildFilter} [childFilter] A execution child filter
     * @param {module:api/ExecutionsApi~updateExecutionsStatusByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkResponse}
     */
    updateExecutionsStatusByQuery(newStatus, tenant, deleteExecutionsByQueryRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteExecutionsByQueryRequest;
      // verify the required parameter 'newStatus' is set
      if (newStatus === undefined || newStatus === null) {
        throw new Error("Missing the required parameter 'newStatus' when calling updateExecutionsStatusByQuery");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling updateExecutionsStatusByQuery");
      }
      // verify the required parameter 'deleteExecutionsByQueryRequest' is set
      if (deleteExecutionsByQueryRequest === undefined || deleteExecutionsByQueryRequest === null) {
        throw new Error("Missing the required parameter 'deleteExecutionsByQueryRequest' when calling updateExecutionsStatusByQuery");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'scope': this.apiClient.buildCollectionParam(opts['scope'], 'csv'),
        'namespace': opts['namespace'],
        'flowId': opts['flowId'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'timeRange': opts['timeRange'],
        'state': this.apiClient.buildCollectionParam(opts['state'], 'csv'),
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'multi'),
        'triggerExecutionId': opts['triggerExecutionId'],
        'childFilter': opts['childFilter'],
        'newStatus': newStatus
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/change-status/by-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaskRunState operation.
     * @callback module:api/ExecutionsApi~updateTaskRunStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Execution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change state for a taskrun in an execution
     * @param {String} executionId The execution id
     * @param {String} tenant 
     * @param {module:model/ExecutionControllerStateRequest} executionControllerStateRequest the taskRun id and state to apply
     * @param {module:api/ExecutionsApi~updateTaskRunStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Execution}
     */
    updateTaskRunState(executionId, tenant, executionControllerStateRequest, callback) {
      let postBody = executionControllerStateRequest;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling updateTaskRunState");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling updateTaskRunState");
      }
      // verify the required parameter 'executionControllerStateRequest' is set
      if (executionControllerStateRequest === undefined || executionControllerStateRequest === null) {
        throw new Error("Missing the required parameter 'executionControllerStateRequest' when calling updateTaskRunState");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Execution;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{executionId}/state', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateNewExecutionInputs operation.
     * @callback module:api/ExecutionsApi~validateNewExecutionInputsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ExecutionControllerApiValidateExecutionInputsResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate the creation of a new execution for a flow
     * @param {String} namespace The flow namespace
     * @param {String} id The flow id
     * @param {Array.<String>} labels The labels as a list of 'key:value'
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Number} [revision] The flow revision or latest if null
     * @param {module:api/ExecutionsApi~validateNewExecutionInputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ExecutionControllerApiValidateExecutionInputsResponse>}
     */
    validateNewExecutionInputs(namespace, id, labels, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling validateNewExecutionInputs");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateNewExecutionInputs");
      }
      // verify the required parameter 'labels' is set
      if (labels === undefined || labels === null) {
        throw new Error("Missing the required parameter 'labels' when calling validateNewExecutionInputs");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling validateNewExecutionInputs");
      }

      let pathParams = {
        'namespace': namespace,
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
        'labels': this.apiClient.buildCollectionParam(labels, 'multi'),
        'revision': opts['revision']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [ExecutionControllerApiValidateExecutionInputsResponse];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{namespace}/{id}/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateResumeExecutionInputs operation.
     * @callback module:api/ExecutionsApi~validateResumeExecutionInputsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ExecutionControllerApiValidateExecutionInputsResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate inputs to resume a paused execution.
     * @param {String} executionId The execution id
     * @param {String} tenant 
     * @param {module:api/ExecutionsApi~validateResumeExecutionInputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ExecutionControllerApiValidateExecutionInputsResponse>}
     */
    validateResumeExecutionInputs(executionId, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling validateResumeExecutionInputs");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling validateResumeExecutionInputs");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [ExecutionControllerApiValidateExecutionInputsResponse];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/executions/{executionId}/resume/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
