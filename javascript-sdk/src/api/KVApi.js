/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import KVControllerApiDeleteBulkRequest from '../model/KVControllerApiDeleteBulkRequest';
import KVControllerApiDeleteBulkResponse from '../model/KVControllerApiDeleteBulkResponse';
import KVControllerTypedValue from '../model/KVControllerTypedValue';
import KVEntry from '../model/KVEntry';

/**
* KV service.
* @module api/KVApi
* @version 1.0.0
*/
export default class KVApi {

    /**
    * Constructs a new KVApi. 
    * @alias module:api/KVApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteKeyValue operation.
     * @callback module:api/KVApi~deleteKeyValueCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a key-value pair
     * @param {String} namespace The namespace id
     * @param {String} key The key
     * @param {String} tenant 
     * @param {module:api/KVApi~deleteKeyValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    deleteKeyValue(namespace, key, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteKeyValue");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteKeyValue");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteKeyValue");
      }

      let pathParams = {
        'namespace': namespace,
        'key': key,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/{namespace}/kv/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteKeyValues operation.
     * @callback module:api/KVApi~deleteKeyValuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KVControllerApiDeleteBulkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk-delete multiple key/value pairs from the given namespace.
     * @param {String} namespace The namespace id
     * @param {String} tenant 
     * @param {module:model/KVControllerApiDeleteBulkRequest} kVControllerApiDeleteBulkRequest The keys
     * @param {module:api/KVApi~deleteKeyValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KVControllerApiDeleteBulkResponse}
     */
    deleteKeyValues(namespace, tenant, kVControllerApiDeleteBulkRequest, callback) {
      let postBody = kVControllerApiDeleteBulkRequest;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteKeyValues");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteKeyValues");
      }
      // verify the required parameter 'kVControllerApiDeleteBulkRequest' is set
      if (kVControllerApiDeleteBulkRequest === undefined || kVControllerApiDeleteBulkRequest === null) {
        throw new Error("Missing the required parameter 'kVControllerApiDeleteBulkRequest' when calling deleteKeyValues");
      }

      let pathParams = {
        'namespace': namespace,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KVControllerApiDeleteBulkResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/{namespace}/kv', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getKeyValue operation.
     * @callback module:api/KVApi~getKeyValueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KVControllerTypedValue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get value for a key
     * @param {String} namespace The namespace id
     * @param {String} key The key
     * @param {String} tenant 
     * @param {module:api/KVApi~getKeyValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KVControllerTypedValue}
     */
    getKeyValue(namespace, key, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getKeyValue");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getKeyValue");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getKeyValue");
      }

      let pathParams = {
        'namespace': namespace,
        'key': key,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KVControllerTypedValue;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/{namespace}/kv/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listKeys operation.
     * @callback module:api/KVApi~listKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/KVEntry>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all keys for a namespace
     * @param {String} namespace The namespace id
     * @param {String} tenant 
     * @param {module:api/KVApi~listKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/KVEntry>}
     */
    listKeys(namespace, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling listKeys");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listKeys");
      }

      let pathParams = {
        'namespace': namespace,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [KVEntry];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/{namespace}/kv', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listKeysWithInheritence operation.
     * @callback module:api/KVApi~listKeysWithInheritenceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/KVEntry>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all keys for a namespace and parent namespaces
     * @param {String} namespace The namespace id
     * @param {String} tenant 
     * @param {module:api/KVApi~listKeysWithInheritenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/KVEntry>}
     */
    listKeysWithInheritence(namespace, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling listKeysWithInheritence");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listKeysWithInheritence");
      }

      let pathParams = {
        'namespace': namespace,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [KVEntry];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/{namespace}/kv/inheritance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setKeyValue operation.
     * @callback module:api/KVApi~setKeyValueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Puts a key-value pair in store
     * @param {String} namespace The namespace id
     * @param {String} key The key
     * @param {String} tenant 
     * @param {String} body The value of the key
     * @param {module:api/KVApi~setKeyValueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setKeyValue(namespace, key, tenant, body, callback) {
      let postBody = body;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling setKeyValue");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling setKeyValue");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling setKeyValue");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setKeyValue");
      }

      let pathParams = {
        'namespace': namespace,
        'key': key,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/namespaces/{namespace}/kv/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
