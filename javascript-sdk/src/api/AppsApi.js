/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppResponse from '../model/AppResponse';
import AppsControllerApiApp from '../model/AppsControllerApiApp';
import AppsControllerApiAppSource from '../model/AppsControllerApiAppSource';
import AppsControllerApiAppTags from '../model/AppsControllerApiAppTags';
import AppsControllerApiBulkOperationRequest from '../model/AppsControllerApiBulkOperationRequest';
import EventAppResponse from '../model/EventAppResponse';
import FileMetas from '../model/FileMetas';
import HttpParameters from '../model/HttpParameters';
import Level from '../model/Level';
import PagedResultsAppsControllerApiApp from '../model/PagedResultsAppsControllerApiApp';
import PagedResultsAppsControllerApiAppCatalogItem from '../model/PagedResultsAppsControllerApiAppCatalogItem';
import PreviewAppRequest from '../model/PreviewAppRequest';

/**
* Apps service.
* @module api/AppsApi
* @version 1.0.0
*/
export default class AppsApi {

    /**
    * Constructs a new AppsApi. 
    * @alias module:api/AppsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bulkDeleteApps operation.
     * @callback module:api/AppsApi~bulkDeleteAppsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete existing apps
     * @param {String} tenant 
     * @param {module:model/AppsControllerApiBulkOperationRequest} appsControllerApiBulkOperationRequest The list of Apps UID
     * @param {module:api/AppsApi~bulkDeleteAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    bulkDeleteApps(tenant, appsControllerApiBulkOperationRequest, callback) {
      let postBody = appsControllerApiBulkOperationRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling bulkDeleteApps");
      }
      // verify the required parameter 'appsControllerApiBulkOperationRequest' is set
      if (appsControllerApiBulkOperationRequest === undefined || appsControllerApiBulkOperationRequest === null) {
        throw new Error("Missing the required parameter 'appsControllerApiBulkOperationRequest' when calling bulkDeleteApps");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/apps', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkDisableApps operation.
     * @callback module:api/AppsApi~bulkDisableAppsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable existing apps
     * @param {String} tenant 
     * @param {module:model/AppsControllerApiBulkOperationRequest} appsControllerApiBulkOperationRequest The list of Apps UID
     * @param {module:api/AppsApi~bulkDisableAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    bulkDisableApps(tenant, appsControllerApiBulkOperationRequest, callback) {
      let postBody = appsControllerApiBulkOperationRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling bulkDisableApps");
      }
      // verify the required parameter 'appsControllerApiBulkOperationRequest' is set
      if (appsControllerApiBulkOperationRequest === undefined || appsControllerApiBulkOperationRequest === null) {
        throw new Error("Missing the required parameter 'appsControllerApiBulkOperationRequest' when calling bulkDisableApps");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/apps/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkEnableApps operation.
     * @callback module:api/AppsApi~bulkEnableAppsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable existing apps
     * @param {String} tenant 
     * @param {module:model/AppsControllerApiBulkOperationRequest} appsControllerApiBulkOperationRequest The list of Apps UID
     * @param {module:api/AppsApi~bulkEnableAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    bulkEnableApps(tenant, appsControllerApiBulkOperationRequest, callback) {
      let postBody = appsControllerApiBulkOperationRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling bulkEnableApps");
      }
      // verify the required parameter 'appsControllerApiBulkOperationRequest' is set
      if (appsControllerApiBulkOperationRequest === undefined || appsControllerApiBulkOperationRequest === null) {
        throw new Error("Missing the required parameter 'appsControllerApiBulkOperationRequest' when calling bulkEnableApps");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/apps/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkExportApps operation.
     * @callback module:api/AppsApi~bulkExportAppsCallback
     * @param {String} error Error message, if any.
     * @param {Blob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export apps as a ZIP archive of YAML sources.
     * @param {String} tenant 
     * @param {module:model/AppsControllerApiBulkOperationRequest} appsControllerApiBulkOperationRequest The list of Apps UID
     * @param {module:api/AppsApi~bulkExportAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Blob}
     */
    bulkExportApps(tenant, appsControllerApiBulkOperationRequest, callback) {
      let postBody = appsControllerApiBulkOperationRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling bulkExportApps");
      }
      // verify the required parameter 'appsControllerApiBulkOperationRequest' is set
      if (appsControllerApiBulkOperationRequest === undefined || appsControllerApiBulkOperationRequest === null) {
        throw new Error("Missing the required parameter 'appsControllerApiBulkOperationRequest' when calling bulkExportApps");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/octet-stream'];
      let returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/v1/{tenant}/apps/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createApp operation.
     * @callback module:api/AppsApi~createAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsControllerApiAppSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new app
     * @param {String} tenant 
     * @param {String} body The app
     * @param {module:api/AppsApi~createAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsControllerApiAppSource}
     */
    createApp(tenant, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createApp");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createApp");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/x-yaml'];
      let accepts = ['application/json'];
      let returnType = AppsControllerApiAppSource;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/apps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApp operation.
     * @callback module:api/AppsApi~deleteAppCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing app
     * @param {String} uid The ID of the app
     * @param {String} tenant 
     * @param {module:api/AppsApi~deleteAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteApp(uid, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling deleteApp");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteApp");
      }

      let pathParams = {
        'uid': uid,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/apps/{uid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableApp operation.
     * @callback module:api/AppsApi~disableAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsControllerApiApp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable the app.
     * @param {String} uid The ID of app
     * @param {String} tenant 
     * @param {module:api/AppsApi~disableAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsControllerApiApp}
     */
    disableApp(uid, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling disableApp");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling disableApp");
      }

      let pathParams = {
        'uid': uid,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsControllerApiApp;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/apps/{uid}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dispatchApp operation.
     * @callback module:api/AppsApi~dispatchAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dispatch for a given app.
     * @param {String} id The ID of the app.
     * @param {String} dispatch The ID to dispatch
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {module:model/HttpParameters} [parameters] 
     * @param {module:api/AppsApi~dispatchAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppResponse}
     */
    dispatchApp(id, dispatch, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dispatchApp");
      }
      // verify the required parameter 'dispatch' is set
      if (dispatch === undefined || dispatch === null) {
        throw new Error("Missing the required parameter 'dispatch' when calling dispatchApp");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling dispatchApp");
      }

      let pathParams = {
        'id': id,
        'dispatch': dispatch,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'parameters': opts['parameters']
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AppResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/apps/view/{id}/dispatch/{dispatch}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadFileFromAppExecution operation.
     * @callback module:api/AppsApi~downloadFileFromAppExecutionCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download file from an app execution
     * @param {String} id The ID of the app.
     * @param {String} path The internal storage uri
     * @param {String} tenant 
     * @param {module:api/AppsApi~downloadFileFromAppExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    downloadFileFromAppExecution(id, path, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadFileFromAppExecution");
      }
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling downloadFileFromAppExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling downloadFileFromAppExecution");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
        'path': path
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/apps/view/{id}/file/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableApp operation.
     * @callback module:api/AppsApi~enableAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsControllerApiApp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable the app.
     * @param {String} uid The ID of app
     * @param {String} tenant 
     * @param {module:api/AppsApi~enableAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsControllerApiApp}
     */
    enableApp(uid, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling enableApp");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling enableApp");
      }

      let pathParams = {
        'uid': uid,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsControllerApiApp;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/apps/{uid}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApp operation.
     * @callback module:api/AppsApi~getAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsControllerApiAppSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an app
     * @param {String} uid The ID of the app
     * @param {String} tenant 
     * @param {module:api/AppsApi~getAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsControllerApiAppSource}
     */
    getApp(uid, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling getApp");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getApp");
      }

      let pathParams = {
        'uid': uid,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsControllerApiAppSource;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/apps/{uid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileMetaFromAppExecution operation.
     * @callback module:api/AppsApi~getFileMetaFromAppExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileMetas} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get file meta information from an app execution
     * @param {String} id The ID of the app.
     * @param {String} path The internal storage uri
     * @param {String} tenant 
     * @param {module:api/AppsApi~getFileMetaFromAppExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileMetas}
     */
    getFileMetaFromAppExecution(id, path, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFileMetaFromAppExecution");
      }
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getFileMetaFromAppExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getFileMetaFromAppExecution");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
        'path': path
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileMetas;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/apps/view/{id}/file/meta', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFilePreviewFromAppExecution operation.
     * @callback module:api/AppsApi~getFilePreviewFromAppExecutionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get file preview from an app execution
     * @param {String} id The ID of the app.
     * @param {String} path The internal storage uri
     * @param {String} encoding The file encoding as Java charset name. Defaults to UTF-8
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Number} [maxRows] The max row returns
     * @param {module:api/AppsApi~getFilePreviewFromAppExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getFilePreviewFromAppExecution(id, path, encoding, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFilePreviewFromAppExecution");
      }
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getFilePreviewFromAppExecution");
      }
      // verify the required parameter 'encoding' is set
      if (encoding === undefined || encoding === null) {
        throw new Error("Missing the required parameter 'encoding' when calling getFilePreviewFromAppExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getFilePreviewFromAppExecution");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
        'path': path,
        'maxRows': opts['maxRows'],
        'encoding': encoding
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/apps/view/{id}/file/preview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLogsFromAppExecution operation.
     * @callback module:api/AppsApi~getLogsFromAppExecutionCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download logs for an app execution
     * @param {String} uid The ID of the app.
     * @param {String} executionId The ID of the execution.
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {module:model/Level} [minLevel] The min log level filter
     * @param {Array.<String>} [taskIds] The tasks' IDs
     * @param {module:api/AppsApi~getLogsFromAppExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getLogsFromAppExecution(uid, executionId, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling getLogsFromAppExecution");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling getLogsFromAppExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getLogsFromAppExecution");
      }

      let pathParams = {
        'uid': uid,
        'tenant': tenant
      };
      let queryParams = {
        'executionId': executionId,
        'minLevel': opts['minLevel'],
        'taskIds': this.apiClient.buildCollectionParam(opts['taskIds'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/apps/view/{uid}/logs/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStreamEventsFromApp operation.
     * @callback module:api/AppsApi~getStreamEventsFromAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventAppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an event stream from a given app.
     * @param {String} id The ID of the app.
     * @param {String} stream The ID of the stream to get
     * @param {Object.<String, module:model/HttpParameters>} parameters 
     * @param {String} tenant 
     * @param {module:api/AppsApi~getStreamEventsFromAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventAppResponse}
     */
    getStreamEventsFromApp(id, stream, parameters, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStreamEventsFromApp");
      }
      // verify the required parameter 'stream' is set
      if (stream === undefined || stream === null) {
        throw new Error("Missing the required parameter 'stream' when calling getStreamEventsFromApp");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling getStreamEventsFromApp");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getStreamEventsFromApp");
      }

      let pathParams = {
        'id': id,
        'stream': stream,
        'tenant': tenant
      };
      let queryParams = {
        'parameters': parameters
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['text/event-stream'];
      let returnType = EventAppResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/apps/view/{id}/streams/{stream}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTags operation.
     * @callback module:api/AppsApi~listTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsControllerApiAppTags} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the app tags
     * @param {String} tenant 
     * @param {module:api/AppsApi~listTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsControllerApiAppTags}
     */
    listTags(tenant, callback) {
      let postBody = null;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listTags");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsControllerApiAppTags;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/apps/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the openApp operation.
     * @callback module:api/AppsApi~openAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Open an app
     * @param {String} uid The ID of the app
     * @param {Object.<String, module:model/HttpParameters>} parameters 
     * @param {String} tenant 
     * @param {module:api/AppsApi~openAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppResponse}
     */
    openApp(uid, parameters, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling openApp");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling openApp");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling openApp");
      }

      let pathParams = {
        'uid': uid,
        'tenant': tenant
      };
      let queryParams = {
        'parameters': parameters
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/apps/view/{uid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the previewApp operation.
     * @callback module:api/AppsApi~previewAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Open the app for the given source
     * @param {String} tenant 
     * @param {module:model/PreviewAppRequest} previewAppRequest The app
     * @param {module:api/AppsApi~previewAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppResponse}
     */
    previewApp(tenant, previewAppRequest, callback) {
      let postBody = previewAppRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling previewApp");
      }
      // verify the required parameter 'previewAppRequest' is set
      if (previewAppRequest === undefined || previewAppRequest === null) {
        throw new Error("Missing the required parameter 'previewAppRequest' when calling previewApp");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/x-yaml'];
      let accepts = ['application/json'];
      let returnType = AppResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/apps/preview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchApps operation.
     * @callback module:api/AppsApi~searchAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsAppsControllerApiApp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for apps
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [sort] The sort of current page
     * @param {Array.<String>} [tags] A tags filter
     * @param {String} [q] A string filter
     * @param {String} [namespace] A namespace filter prefix
     * @param {String} [flowId] A flow id filter
     * @param {module:api/AppsApi~searchAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsAppsControllerApiApp}
     */
    searchApps(page, size, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchApps");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchApps");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchApps");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'q': opts['q'],
        'namespace': opts['namespace'],
        'flowId': opts['flowId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsAppsControllerApiApp;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/apps/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchAppsFromCatalog operation.
     * @callback module:api/AppsApi~searchAppsFromCatalogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsAppsControllerApiAppCatalogItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for apps from catalog
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [tags] Tags filter
     * @param {String} [q] String filter
     * @param {module:api/AppsApi~searchAppsFromCatalogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsAppsControllerApiAppCatalogItem}
     */
    searchAppsFromCatalog(page, size, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchAppsFromCatalog");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchAppsFromCatalog");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchAppsFromCatalog");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'page': page,
        'size': size,
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsAppsControllerApiAppCatalogItem;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/apps/catalog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApp operation.
     * @callback module:api/AppsApi~updateAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsControllerApiAppSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing app
     * @param {String} uid The ID of the app
     * @param {String} tenant 
     * @param {String} body The app
     * @param {module:api/AppsApi~updateAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsControllerApiAppSource}
     */
    updateApp(uid, tenant, body, callback) {
      let postBody = body;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling updateApp");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling updateApp");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateApp");
      }

      let pathParams = {
        'uid': uid,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/x-yaml'];
      let accepts = ['application/json'];
      let returnType = AppsControllerApiAppSource;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/apps/{uid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
