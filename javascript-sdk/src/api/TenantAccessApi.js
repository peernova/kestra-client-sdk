/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IAMTenantAccessControllerApiCreateTenantAccessRequest from '../model/IAMTenantAccessControllerApiCreateTenantAccessRequest';
import IAMTenantAccessControllerApiTenantAccess from '../model/IAMTenantAccessControllerApiTenantAccess';
import PagedResultsIAMTenantAccessControllerApiUserTenantAccess from '../model/PagedResultsIAMTenantAccessControllerApiUserTenantAccess';
import UserType from '../model/UserType';

/**
* TenantAccess service.
* @module api/TenantAccessApi
* @version 1.0.0
*/
export default class TenantAccessApi {

    /**
    * Constructs a new TenantAccessApi. 
    * @alias module:api/TenantAccessApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTenantAccess operation.
     * @callback module:api/TenantAccessApi~createTenantAccessCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create tenant access for a user
     * Grants tenant access permissions to a user identified by email
     * @param {String} tenant 
     * @param {module:model/IAMTenantAccessControllerApiCreateTenantAccessRequest} iAMTenantAccessControllerApiCreateTenantAccessRequest 
     * @param {module:api/TenantAccessApi~createTenantAccessCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createTenantAccess(tenant, iAMTenantAccessControllerApiCreateTenantAccessRequest, callback) {
      let postBody = iAMTenantAccessControllerApiCreateTenantAccessRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createTenantAccess");
      }
      // verify the required parameter 'iAMTenantAccessControllerApiCreateTenantAccessRequest' is set
      if (iAMTenantAccessControllerApiCreateTenantAccessRequest === undefined || iAMTenantAccessControllerApiCreateTenantAccessRequest === null) {
        throw new Error("Missing the required parameter 'iAMTenantAccessControllerApiCreateTenantAccessRequest' when calling createTenantAccess");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/tenant-access', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTenantAccess1 operation.
     * @callback module:api/TenantAccessApi~createTenantAccess1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create tenant access for a user
     * Grants tenant access permissions to a user identified by userId
     * @param {String} userId The user id
     * @param {String} tenant 
     * @param {module:api/TenantAccessApi~createTenantAccess1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    createTenantAccess1(userId, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createTenantAccess1");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createTenantAccess1");
      }

      let pathParams = {
        'userId': userId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/tenant-access/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTenantAccess operation.
     * @callback module:api/TenantAccessApi~deleteTenantAccessCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete tenant access for a user
     * Removes tenant access permissions for the specified user
     * @param {String} userId The user id
     * @param {String} tenant 
     * @param {module:api/TenantAccessApi~deleteTenantAccessCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTenantAccess(userId, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteTenantAccess");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteTenantAccess");
      }

      let pathParams = {
        'userId': userId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/tenant-access/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTenantAccess operation.
     * @callback module:api/TenantAccessApi~getTenantAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IAMTenantAccessControllerApiTenantAccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve tenant access for a user
     * Fetches the tenant access configuration for a given user
     * @param {String} userId The user id
     * @param {String} tenant 
     * @param {module:api/TenantAccessApi~getTenantAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IAMTenantAccessControllerApiTenantAccess}
     */
    getTenantAccess(userId, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getTenantAccess");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getTenantAccess");
      }

      let pathParams = {
        'userId': userId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IAMTenantAccessControllerApiTenantAccess;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/tenant-access/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTenantAccess operation.
     * @callback module:api/TenantAccessApi~listTenantAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsIAMTenantAccessControllerApiUserTenantAccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve users belonging to the tenant
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<String>} [sort] The sort of current page
     * @param {module:model/UserType} [type] The type of user
     * @param {module:api/TenantAccessApi~listTenantAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsIAMTenantAccessControllerApiUserTenantAccess}
     */
    listTenantAccess(page, size, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling listTenantAccess");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling listTenantAccess");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listTenantAccess");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsIAMTenantAccessControllerApiUserTenantAccess;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/tenant-access', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
