/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BulkResponse from '../model/BulkResponse';
import PagedResultsTestSuite from '../model/PagedResultsTestSuite';
import PagedResultsTestSuiteRunResult from '../model/PagedResultsTestSuiteRunResult';
import TestSuite from '../model/TestSuite';
import TestSuiteControllerRunRequest from '../model/TestSuiteControllerRunRequest';
import TestSuiteControllerSearchTestsLastResult from '../model/TestSuiteControllerSearchTestsLastResult';
import TestSuiteControllerTestSuiteBulkRequest from '../model/TestSuiteControllerTestSuiteBulkRequest';
import TestSuiteControllerTestsLastResultResponse from '../model/TestSuiteControllerTestsLastResultResponse';
import TestSuiteRunResult from '../model/TestSuiteRunResult';
import TestSuiteServiceRunByQueryRequest from '../model/TestSuiteServiceRunByQueryRequest';
import TestSuiteServiceTestRunByQueryResult from '../model/TestSuiteServiceTestRunByQueryResult';
import ValidateConstraintViolation from '../model/ValidateConstraintViolation';

/**
* TestSuites service.
* @module api/TestSuitesApi
* @version 1.0.0
*/
export default class TestSuitesApi {

    /**
    * Constructs a new TestSuitesApi. 
    * @alias module:api/TestSuitesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTestSuite operation.
     * @callback module:api/TestSuitesApi~createTestSuiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestSuite} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a test from YAML source
     * Creates a new test from a YAML definition. Requires TEST permission with the CREATE action.
     * @param {String} tenant 
     * @param {String} body The TestSuite source code
     * @param {module:api/TestSuitesApi~createTestSuiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestSuite}
     */
    createTestSuite(tenant, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createTestSuite");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createTestSuite");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/x-yaml'];
      let accepts = ['application/json'];
      let returnType = TestSuite;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/tests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTestSuite operation.
     * @callback module:api/TestSuitesApi~deleteTestSuiteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a test
     * Deletes a test by namespace and ID. Requires TEST permission with the DELETE action.
     * @param {String} namespace The TestSuite namespace
     * @param {String} id The TestSuite ID
     * @param {String} tenant 
     * @param {module:api/TestSuitesApi~deleteTestSuiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteTestSuite(namespace, id, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteTestSuite");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTestSuite");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteTestSuite");
      }

      let pathParams = {
        'namespace': namespace,
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/tests/{namespace}/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTestSuitesByIds operation.
     * @callback module:api/TestSuitesApi~deleteTestSuitesByIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete multiple tests by id
     * Deletes a test by namespace and ID. Requires TEST permission with the DELETE action.
     * @param {String} tenant 
     * @param {module:model/TestSuiteControllerTestSuiteBulkRequest} testSuiteControllerTestSuiteBulkRequest 
     * @param {module:api/TestSuitesApi~deleteTestSuitesByIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkResponse}
     */
    deleteTestSuitesByIds(tenant, testSuiteControllerTestSuiteBulkRequest, callback) {
      let postBody = testSuiteControllerTestSuiteBulkRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteTestSuitesByIds");
      }
      // verify the required parameter 'testSuiteControllerTestSuiteBulkRequest' is set
      if (testSuiteControllerTestSuiteBulkRequest === undefined || testSuiteControllerTestSuiteBulkRequest === null) {
        throw new Error("Missing the required parameter 'testSuiteControllerTestSuiteBulkRequest' when calling deleteTestSuitesByIds");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/tests/by-ids', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableTestSuitesByIds operation.
     * @callback module:api/TestSuitesApi~disableTestSuitesByIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable multiple tests by id
     * Disable a test by namespace and ID. Requires TEST permission with the UPDATE action.
     * @param {String} tenant 
     * @param {module:model/TestSuiteControllerTestSuiteBulkRequest} testSuiteControllerTestSuiteBulkRequest 
     * @param {module:api/TestSuitesApi~disableTestSuitesByIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkResponse}
     */
    disableTestSuitesByIds(tenant, testSuiteControllerTestSuiteBulkRequest, callback) {
      let postBody = testSuiteControllerTestSuiteBulkRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling disableTestSuitesByIds");
      }
      // verify the required parameter 'testSuiteControllerTestSuiteBulkRequest' is set
      if (testSuiteControllerTestSuiteBulkRequest === undefined || testSuiteControllerTestSuiteBulkRequest === null) {
        throw new Error("Missing the required parameter 'testSuiteControllerTestSuiteBulkRequest' when calling disableTestSuitesByIds");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/tests/disable/by-ids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableTestSuitesByIds operation.
     * @callback module:api/TestSuitesApi~enableTestSuitesByIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable multiple tests by id
     * Enable a test by namespace and ID. Requires TEST permission with the UPDATE action.
     * @param {String} tenant 
     * @param {module:model/TestSuiteControllerTestSuiteBulkRequest} testSuiteControllerTestSuiteBulkRequest 
     * @param {module:api/TestSuitesApi~enableTestSuitesByIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkResponse}
     */
    enableTestSuitesByIds(tenant, testSuiteControllerTestSuiteBulkRequest, callback) {
      let postBody = testSuiteControllerTestSuiteBulkRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling enableTestSuitesByIds");
      }
      // verify the required parameter 'testSuiteControllerTestSuiteBulkRequest' is set
      if (testSuiteControllerTestSuiteBulkRequest === undefined || testSuiteControllerTestSuiteBulkRequest === null) {
        throw new Error("Missing the required parameter 'testSuiteControllerTestSuiteBulkRequest' when calling enableTestSuitesByIds");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/tests/enable/by-ids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTestResult operation.
     * @callback module:api/TestSuitesApi~getTestResultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestSuiteRunResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a test result
     * Get a test result once it was run.
     * @param {String} id The test run ID
     * @param {String} tenant 
     * @param {module:api/TestSuitesApi~getTestResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestSuiteRunResult}
     */
    getTestResult(id, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTestResult");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getTestResult");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestSuiteRunResult;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/tests/results/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTestSuite operation.
     * @callback module:api/TestSuitesApi~getTestSuiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestSuite} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a test
     * Retrieves a test by namespace and ID. Requires TEST permission with the READ action.
     * @param {String} namespace The TestSuite namespace
     * @param {String} id The TestSuite ID
     * @param {String} tenant 
     * @param {module:api/TestSuitesApi~getTestSuiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestSuite}
     */
    getTestSuite(namespace, id, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getTestSuite");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTestSuite");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getTestSuite");
      }

      let pathParams = {
        'namespace': namespace,
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestSuite;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/tests/{namespace}/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTestsLastResult operation.
     * @callback module:api/TestSuitesApi~getTestsLastResultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestSuiteControllerTestsLastResultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tests last result
     * Get multiple tests last result for a query.
     * @param {String} tenant 
     * @param {module:model/TestSuiteControllerSearchTestsLastResult} testSuiteControllerSearchTestsLastResult 
     * @param {module:api/TestSuitesApi~getTestsLastResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestSuiteControllerTestsLastResultResponse}
     */
    getTestsLastResult(tenant, testSuiteControllerSearchTestsLastResult, callback) {
      let postBody = testSuiteControllerSearchTestsLastResult;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getTestsLastResult");
      }
      // verify the required parameter 'testSuiteControllerSearchTestsLastResult' is set
      if (testSuiteControllerSearchTestsLastResult === undefined || testSuiteControllerSearchTestsLastResult === null) {
        throw new Error("Missing the required parameter 'testSuiteControllerSearchTestsLastResult' when calling getTestsLastResult");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestSuiteControllerTestsLastResultResponse;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/tests/results/search/last', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the runTestSuite operation.
     * @callback module:api/TestSuitesApi~runTestSuiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestSuiteRunResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run a full test
     * Executes all test cases in the specified test. Requires TEST permission with the CREATE action.
     * @param {String} namespace The TestSuite namespace
     * @param {String} id The TestSuite ID
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {module:model/TestSuiteControllerRunRequest} [testSuiteControllerRunRequest] 
     * @param {module:api/TestSuitesApi~runTestSuiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestSuiteRunResult}
     */
    runTestSuite(namespace, id, tenant, opts, callback) {
      opts = opts || {};
      let postBody = opts['testSuiteControllerRunRequest'];
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling runTestSuite");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling runTestSuite");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling runTestSuite");
      }

      let pathParams = {
        'namespace': namespace,
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestSuiteRunResult;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/tests/{namespace}/{id}/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the runTestSuitesByQuery operation.
     * @callback module:api/TestSuitesApi~runTestSuitesByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestSuiteServiceTestRunByQueryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run multiple TestSuites by query
     * Executes all TestSuites impacted by the specified filter. Requires TEST permission with the CREATE action.
     * @param {String} tenant 
     * @param {module:model/TestSuiteServiceRunByQueryRequest} testSuiteServiceRunByQueryRequest 
     * @param {module:api/TestSuitesApi~runTestSuitesByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestSuiteServiceTestRunByQueryResult}
     */
    runTestSuitesByQuery(tenant, testSuiteServiceRunByQueryRequest, callback) {
      let postBody = testSuiteServiceRunByQueryRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling runTestSuitesByQuery");
      }
      // verify the required parameter 'testSuiteServiceRunByQueryRequest' is set
      if (testSuiteServiceRunByQueryRequest === undefined || testSuiteServiceRunByQueryRequest === null) {
        throw new Error("Missing the required parameter 'testSuiteServiceRunByQueryRequest' when calling runTestSuitesByQuery");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestSuiteServiceTestRunByQueryResult;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/tests/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchTestSuites operation.
     * @callback module:api/TestSuitesApi~searchTestSuitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsTestSuite} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for tests
     * Searches for tests with optional filtering by namespace and flow ID. Requires TEST permission with the READ action.
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {Boolean} includeChildNamespaces Include child namespaces in filter or not
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [sort] The sort of current page
     * @param {String} [namespace] The namespace to filter on
     * @param {String} [flowId] The flow id to filter on
     * @param {module:api/TestSuitesApi~searchTestSuitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsTestSuite}
     */
    searchTestSuites(page, size, includeChildNamespaces, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchTestSuites");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchTestSuites");
      }
      // verify the required parameter 'includeChildNamespaces' is set
      if (includeChildNamespaces === undefined || includeChildNamespaces === null) {
        throw new Error("Missing the required parameter 'includeChildNamespaces' when calling searchTestSuites");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchTestSuites");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'namespace': opts['namespace'],
        'flowId': opts['flowId'],
        'includeChildNamespaces': includeChildNamespaces
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsTestSuite;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/tests/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchTestSuitesResults operation.
     * @callback module:api/TestSuitesApi~searchTestSuitesResultsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsTestSuiteRunResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for tests results
     * with optional filtering by namespace, test suite ID and flow ID. Requires TEST permission with the READ action.
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} testSuiteId The test suite id to filter on
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [sort] The sort of current page
     * @param {String} [namespace] The namespace to filter on
     * @param {String} [flowId] The flow id to filter on
     * @param {module:api/TestSuitesApi~searchTestSuitesResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsTestSuiteRunResult}
     */
    searchTestSuitesResults(page, size, testSuiteId, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchTestSuitesResults");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchTestSuitesResults");
      }
      // verify the required parameter 'testSuiteId' is set
      if (testSuiteId === undefined || testSuiteId === null) {
        throw new Error("Missing the required parameter 'testSuiteId' when calling searchTestSuitesResults");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchTestSuitesResults");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'testSuiteId': testSuiteId,
        'namespace': opts['namespace'],
        'flowId': opts['flowId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsTestSuiteRunResult;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/tests/results/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTestSuite operation.
     * @callback module:api/TestSuitesApi~updateTestSuiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestSuite} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a test from YAML source
     * Updates an existing test with a new YAML definition. Requires TEST permission with the UPDATE action.
     * @param {String} namespace The TestSuite namespace
     * @param {String} id The TestSuite ID
     * @param {String} tenant 
     * @param {String} body The TestSuite source code
     * @param {module:api/TestSuitesApi~updateTestSuiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestSuite}
     */
    updateTestSuite(namespace, id, tenant, body, callback) {
      let postBody = body;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling updateTestSuite");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTestSuite");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling updateTestSuite");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTestSuite");
      }

      let pathParams = {
        'namespace': namespace,
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/x-yaml'];
      let accepts = ['application/json'];
      let returnType = TestSuite;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/tests/{namespace}/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateTestSuite operation.
     * @callback module:api/TestSuitesApi~validateTestSuiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidateConstraintViolation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate a test
     * Validates a test YAML definition without persisting it. Returns constraint violations if any. Requires TEST permission with the READ action.
     * @param {String} tenant 
     * @param {String} body The TestSuite source code
     * @param {module:api/TestSuitesApi~validateTestSuiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValidateConstraintViolation}
     */
    validateTestSuite(tenant, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling validateTestSuite");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling validateTestSuite");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/x-yaml'];
      let accepts = ['application/json'];
      let returnType = ValidateConstraintViolation;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/tests/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
