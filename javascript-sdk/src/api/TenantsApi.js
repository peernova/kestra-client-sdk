/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiTenant from '../model/ApiTenant';
import FlowTopologyGraph from '../model/FlowTopologyGraph';
import PagedResultsTenant from '../model/PagedResultsTenant';
import Tenant from '../model/Tenant';

/**
* Tenants service.
* @module api/TenantsApi
* @version 1.0.0
*/
export default class TenantsApi {

    /**
    * Constructs a new TenantsApi. 
    * @alias module:api/TenantsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the callDelete operation.
     * @callback module:api/TenantsApi~callDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tenant and all its resources
     * Superadmin-only. Deletes all resources linked to the tenant, including flows, namespaces, apps, etc.
     * @param {String} id The tenant id
     * @param {module:api/TenantsApi~callDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    callDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling callDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/tenants/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the create operation.
     * @callback module:api/TenantsApi~createCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tenant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a tenant
     * Superadmin-only.
     * @param {module:model/Tenant} tenant 
     * @param {module:api/TenantsApi~createCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tenant}
     */
    create(tenant, callback) {
      let postBody = tenant;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling create");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tenant;
      return this.apiClient.callApi(
        '/api/v1/tenants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the find operation.
     * @callback module:api/TenantsApi~findCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsTenant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for tenants
     * Superadmin-only.
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<String>} [sort] The sort of current page
     * @param {module:api/TenantsApi~findCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsTenant}
     */
    find(page, size, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling find");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling find");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsTenant;
      return this.apiClient.callApi(
        '/api/v1/tenants/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the get operation.
     * @callback module:api/TenantsApi~getCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tenant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a tenant
     * Superadmin-only.
     * @param {String} id The tenant id
     * @param {module:api/TenantsApi~getCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tenant}
     */
    get(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling get");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tenant;
      return this.apiClient.callApi(
        '/api/v1/tenants/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFlowDependenciesFromTenant operation.
     * @callback module:api/TenantsApi~getFlowDependenciesFromTenantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlowTopologyGraph} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tenant dependencies
     * @param {Boolean} destinationOnly if true, list only destination dependencies, otherwise list also source dependencies
     * @param {String} tenant 
     * @param {module:api/TenantsApi~getFlowDependenciesFromTenantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlowTopologyGraph}
     */
    getFlowDependenciesFromTenant(destinationOnly, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'destinationOnly' is set
      if (destinationOnly === undefined || destinationOnly === null) {
        throw new Error("Missing the required parameter 'destinationOnly' when calling getFlowDependenciesFromTenant");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getFlowDependenciesFromTenant");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'destinationOnly': destinationOnly
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FlowTopologyGraph;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/dependencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setLogo operation.
     * @callback module:api/TenantsApi~setLogoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiTenant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set a tenant logo
     * Superadmin-only.
     * @param {String} id The tenant id
     * @param {Object} opts Optional parameters
     * @param {File} [logo] The logo file
     * @param {module:api/TenantsApi~setLogoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiTenant}
     */
    setLogo(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLogo");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'logo': opts['logo']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApiTenant;
      return this.apiClient.callApi(
        '/api/v1/tenants/{id}/logo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/TenantsApi~updateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tenant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a tenant
     * Superadmin-only.
     * @param {String} id The tenant id
     * @param {module:model/Tenant} tenant 
     * @param {module:api/TenantsApi~updateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tenant}
     */
    update(id, tenant, callback) {
      let postBody = tenant;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling update");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling update");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tenant;
      return this.apiClient.callApi(
        '/api/v1/tenants/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
