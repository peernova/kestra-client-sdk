/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InstanceControllerApiCreateOrUpdateWorkerGroupRequest from '../model/InstanceControllerApiCreateOrUpdateWorkerGroupRequest';
import InstanceControllerApiWorkerGroup from '../model/InstanceControllerApiWorkerGroup';
import InstanceControllerApiWorkerGroupDetails from '../model/InstanceControllerApiWorkerGroupDetails';
import InstanceControllerApiWorkerGroupList from '../model/InstanceControllerApiWorkerGroupList';

/**
* WorkerGroups service.
* @module api/WorkerGroupsApi
* @version 1.0.0
*/
export default class WorkerGroupsApi {

    /**
    * Constructs a new WorkerGroupsApi. 
    * @alias module:api/WorkerGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createWorkerGroup operation.
     * @callback module:api/WorkerGroupsApi~createWorkerGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceControllerApiWorkerGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a worker group
     * Requires a role with the INFRASTRUCTURE permission (Superadmin-only).
     * @param {module:model/InstanceControllerApiCreateOrUpdateWorkerGroupRequest} instanceControllerApiCreateOrUpdateWorkerGroupRequest The worker group definition
     * @param {module:api/WorkerGroupsApi~createWorkerGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceControllerApiWorkerGroup}
     */
    createWorkerGroup(instanceControllerApiCreateOrUpdateWorkerGroupRequest, callback) {
      let postBody = instanceControllerApiCreateOrUpdateWorkerGroupRequest;
      // verify the required parameter 'instanceControllerApiCreateOrUpdateWorkerGroupRequest' is set
      if (instanceControllerApiCreateOrUpdateWorkerGroupRequest === undefined || instanceControllerApiCreateOrUpdateWorkerGroupRequest === null) {
        throw new Error("Missing the required parameter 'instanceControllerApiCreateOrUpdateWorkerGroupRequest' when calling createWorkerGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InstanceControllerApiWorkerGroup;
      return this.apiClient.callApi(
        '/api/v1/instance/workergroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkerGroupById operation.
     * @callback module:api/WorkerGroupsApi~deleteWorkerGroupByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a worker group
     * Requires a role with the INFRASTRUCTURE permission (Superadmin-only).
     * @param {String} id 
     * @param {module:api/WorkerGroupsApi~deleteWorkerGroupByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteWorkerGroupById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteWorkerGroupById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/instance/workergroups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkerGroupById operation.
     * @callback module:api/WorkerGroupsApi~getWorkerGroupByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceControllerApiWorkerGroupDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve details of a specific worker group
     * Requires a role with the INFRASTRUCTURE permission (Superadmin-only).
     * @param {String} id 
     * @param {module:api/WorkerGroupsApi~getWorkerGroupByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceControllerApiWorkerGroupDetails}
     */
    getWorkerGroupById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWorkerGroupById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceControllerApiWorkerGroupDetails;
      return this.apiClient.callApi(
        '/api/v1/instance/workergroups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWorkerGroups operation.
     * @callback module:api/WorkerGroupsApi~listWorkerGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceControllerApiWorkerGroupList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all worker groups
     * Requires a role with the INFRASTRUCTURE permission (Superadmin-only).
     * @param {module:api/WorkerGroupsApi~listWorkerGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceControllerApiWorkerGroupList}
     */
    listWorkerGroups(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceControllerApiWorkerGroupList;
      return this.apiClient.callApi(
        '/api/v1/instance/workergroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkerGroupById operation.
     * @callback module:api/WorkerGroupsApi~updateWorkerGroupByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceControllerApiWorkerGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a worker group
     * Requires a role with the INFRASTRUCTURE permission (Superadmin-only).
     * @param {String} id 
     * @param {module:model/InstanceControllerApiCreateOrUpdateWorkerGroupRequest} instanceControllerApiCreateOrUpdateWorkerGroupRequest The worker group definition
     * @param {module:api/WorkerGroupsApi~updateWorkerGroupByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceControllerApiWorkerGroup}
     */
    updateWorkerGroupById(id, instanceControllerApiCreateOrUpdateWorkerGroupRequest, callback) {
      let postBody = instanceControllerApiCreateOrUpdateWorkerGroupRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWorkerGroupById");
      }
      // verify the required parameter 'instanceControllerApiCreateOrUpdateWorkerGroupRequest' is set
      if (instanceControllerApiCreateOrUpdateWorkerGroupRequest === undefined || instanceControllerApiCreateOrUpdateWorkerGroupRequest === null) {
        throw new Error("Missing the required parameter 'instanceControllerApiCreateOrUpdateWorkerGroupRequest' when calling updateWorkerGroupById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InstanceControllerApiWorkerGroup;
      return this.apiClient.callApi(
        '/api/v1/instance/workergroups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
