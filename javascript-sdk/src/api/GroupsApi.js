/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiAutocomplete from '../model/ApiAutocomplete';
import ApiGroupSummary from '../model/ApiGroupSummary';
import ApiIds from '../model/ApiIds';
import GroupIdentifierMembership from '../model/GroupIdentifierMembership';
import IAMGroupControllerApiCreateGroupRequest from '../model/IAMGroupControllerApiCreateGroupRequest';
import IAMGroupControllerApiGroupDetail from '../model/IAMGroupControllerApiGroupDetail';
import IAMGroupControllerApiGroupMember from '../model/IAMGroupControllerApiGroupMember';
import IAMGroupControllerApiUpdateGroupRequest from '../model/IAMGroupControllerApiUpdateGroupRequest';
import PagedResultsApiGroupSummary from '../model/PagedResultsApiGroupSummary';
import PagedResultsIAMGroupControllerApiGroupMember from '../model/PagedResultsIAMGroupControllerApiGroupMember';

/**
* Groups service.
* @module api/GroupsApi
* @version 1.0.0
*/
export default class GroupsApi {

    /**
    * Constructs a new GroupsApi. 
    * @alias module:api/GroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addUserToGroup operation.
     * @callback module:api/GroupsApi~addUserToGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IAMGroupControllerApiGroupMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a user to a group
     * Adds the specified user to the given group. If the user does not already have access to the tenant, tenant access will be created automatically.
     * @param {String} id The ID of the group
     * @param {String} userId The ID of the user to add to the group
     * @param {String} tenant 
     * @param {module:api/GroupsApi~addUserToGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IAMGroupControllerApiGroupMember}
     */
    addUserToGroup(id, userId, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addUserToGroup");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addUserToGroup");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling addUserToGroup");
      }

      let pathParams = {
        'id': id,
        'userId': userId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IAMGroupControllerApiGroupMember;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/groups/{id}/members/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the autocompleteGroups operation.
     * @callback module:api/GroupsApi~autocompleteGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiGroupSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List groups for autocomplete
     * @param {String} tenant 
     * @param {module:model/ApiAutocomplete} apiAutocomplete Autocomplete request
     * @param {module:api/GroupsApi~autocompleteGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApiGroupSummary>}
     */
    autocompleteGroups(tenant, apiAutocomplete, callback) {
      let postBody = apiAutocomplete;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling autocompleteGroups");
      }
      // verify the required parameter 'apiAutocomplete' is set
      if (apiAutocomplete === undefined || apiAutocomplete === null) {
        throw new Error("Missing the required parameter 'apiAutocomplete' when calling autocompleteGroups");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ApiGroupSummary];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/groups/autocomplete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGroup operation.
     * @callback module:api/GroupsApi~createGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IAMGroupControllerApiGroupDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a group
     * @param {String} tenant 
     * @param {module:model/IAMGroupControllerApiCreateGroupRequest} iAMGroupControllerApiCreateGroupRequest The group
     * @param {module:api/GroupsApi~createGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IAMGroupControllerApiGroupDetail}
     */
    createGroup(tenant, iAMGroupControllerApiCreateGroupRequest, callback) {
      let postBody = iAMGroupControllerApiCreateGroupRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createGroup");
      }
      // verify the required parameter 'iAMGroupControllerApiCreateGroupRequest' is set
      if (iAMGroupControllerApiCreateGroupRequest === undefined || iAMGroupControllerApiCreateGroupRequest === null) {
        throw new Error("Missing the required parameter 'iAMGroupControllerApiCreateGroupRequest' when calling createGroup");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IAMGroupControllerApiGroupDetail;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGroup operation.
     * @callback module:api/GroupsApi~deleteGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a group
     * @param {String} id The group id
     * @param {String} tenant 
     * @param {module:api/GroupsApi~deleteGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGroup(id, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteGroup");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteGroup");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserFromGroup operation.
     * @callback module:api/GroupsApi~deleteUserFromGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IAMGroupControllerApiGroupMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a user from a group
     * Removes the specified user from the given group. If the user has no other group bindings within the tenant, their access to the tenant will also be revoked.
     * @param {String} id The ID of the group
     * @param {String} userId The ID of the user to remove from the group
     * @param {String} tenant 
     * @param {module:api/GroupsApi~deleteUserFromGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IAMGroupControllerApiGroupMember}
     */
    deleteUserFromGroup(id, userId, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUserFromGroup");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserFromGroup");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteUserFromGroup");
      }

      let pathParams = {
        'id': id,
        'userId': userId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IAMGroupControllerApiGroupMember;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/groups/{id}/members/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroup operation.
     * @callback module:api/GroupsApi~getGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IAMGroupControllerApiGroupDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a group
     * Retrieves details of a specific group by its ID within the current tenant.
     * @param {String} id The group id
     * @param {String} tenant 
     * @param {module:api/GroupsApi~getGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IAMGroupControllerApiGroupDetail}
     */
    getGroup(id, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroup");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getGroup");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IAMGroupControllerApiGroupDetail;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGroupIds operation.
     * @callback module:api/GroupsApi~listGroupIdsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiGroupSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List groups by ids
     * @param {String} tenant 
     * @param {module:model/ApiIds} apiIds The ids that must be present on results
     * @param {module:api/GroupsApi~listGroupIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApiGroupSummary>}
     */
    listGroupIds(tenant, apiIds, callback) {
      let postBody = apiIds;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listGroupIds");
      }
      // verify the required parameter 'apiIds' is set
      if (apiIds === undefined || apiIds === null) {
        throw new Error("Missing the required parameter 'apiIds' when calling listGroupIds");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ApiGroupSummary];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/groups/ids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchGroupMembers operation.
     * @callback module:api/GroupsApi~searchGroupMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsIAMGroupControllerApiGroupMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for users in a group
     * @param {String} id The group id
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<String>} [sort] The sort of current page
     * @param {module:api/GroupsApi~searchGroupMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsIAMGroupControllerApiGroupMember}
     */
    searchGroupMembers(id, page, size, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling searchGroupMembers");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchGroupMembers");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchGroupMembers");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchGroupMembers");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsIAMGroupControllerApiGroupMember;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/groups/{id}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchGroups operation.
     * @callback module:api/GroupsApi~searchGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsApiGroupSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for groups
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<String>} [sort] The sort of current page
     * @param {module:api/GroupsApi~searchGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsApiGroupSummary}
     */
    searchGroups(page, size, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchGroups");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchGroups");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchGroups");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'q': opts['q'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsApiGroupSummary;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/groups/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setUserMembershipForGroup operation.
     * @callback module:api/GroupsApi~setUserMembershipForGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IAMGroupControllerApiGroupMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user's membership type in a group
     * Allows a group owner or an authorized user to change the role of a user within a group to OWNER or MEMBER.
     * @param {String} id The ID of the group
     * @param {String} userId The ID of the user whose membership is being updated
     * @param {module:model/GroupIdentifierMembership} membership The new membership type to assign to the user.
     * @param {String} tenant 
     * @param {module:api/GroupsApi~setUserMembershipForGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IAMGroupControllerApiGroupMember}
     */
    setUserMembershipForGroup(id, userId, membership, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setUserMembershipForGroup");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling setUserMembershipForGroup");
      }
      // verify the required parameter 'membership' is set
      if (membership === undefined || membership === null) {
        throw new Error("Missing the required parameter 'membership' when calling setUserMembershipForGroup");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling setUserMembershipForGroup");
      }

      let pathParams = {
        'id': id,
        'userId': userId,
        'tenant': tenant
      };
      let queryParams = {
        'membership': membership
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IAMGroupControllerApiGroupMember;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/groups/{id}/members/membership/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroup operation.
     * @callback module:api/GroupsApi~updateGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IAMGroupControllerApiGroupDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a group
     * @param {String} id The group id
     * @param {String} tenant 
     * @param {module:model/IAMGroupControllerApiUpdateGroupRequest} iAMGroupControllerApiUpdateGroupRequest The group
     * @param {module:api/GroupsApi~updateGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IAMGroupControllerApiGroupDetail}
     */
    updateGroup(id, tenant, iAMGroupControllerApiUpdateGroupRequest, callback) {
      let postBody = iAMGroupControllerApiUpdateGroupRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateGroup");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling updateGroup");
      }
      // verify the required parameter 'iAMGroupControllerApiUpdateGroupRequest' is set
      if (iAMGroupControllerApiUpdateGroupRequest === undefined || iAMGroupControllerApiUpdateGroupRequest === null) {
        throw new Error("Missing the required parameter 'iAMGroupControllerApiUpdateGroupRequest' when calling updateGroup");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IAMGroupControllerApiGroupDetail;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
