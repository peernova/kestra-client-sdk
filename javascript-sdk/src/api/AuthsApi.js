/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthControllerAuth from '../model/AuthControllerAuth';
import CreateApiTokenRequest from '../model/CreateApiTokenRequest';
import MeControllerApiMe from '../model/MeControllerApiMe';
import MeControllerApiUserDetailsRequest from '../model/MeControllerApiUserDetailsRequest';

/**
* Auths service.
* @module api/AuthsApi
* @version 1.0.0
*/
export default class AuthsApi {

    /**
    * Constructs a new AuthsApi. 
    * @alias module:api/AuthsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createApiTokenForCurrentUser operation.
     * @callback module:api/AuthsApi~createApiTokenForCurrentUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create API token for the authenticated user
     * @param {module:model/CreateApiTokenRequest} createApiTokenRequest 
     * @param {module:api/AuthsApi~createApiTokenForCurrentUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createApiTokenForCurrentUser(createApiTokenRequest, callback) {
      let postBody = createApiTokenRequest;
      // verify the required parameter 'createApiTokenRequest' is set
      if (createApiTokenRequest === undefined || createApiTokenRequest === null) {
        throw new Error("Missing the required parameter 'createApiTokenRequest' when calling createApiTokenForCurrentUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/me/api-tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApiTokenForCurrentUser operation.
     * @callback module:api/AuthsApi~deleteApiTokenForCurrentUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete API token for the authenticated user
     * @param {String} tokenId The token id
     * @param {module:api/AuthsApi~deleteApiTokenForCurrentUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteApiTokenForCurrentUser(tokenId, callback) {
      let postBody = null;
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling deleteApiTokenForCurrentUser");
      }

      let pathParams = {
        'tokenId': tokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/me/api-tokens/{tokenId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentUser operation.
     * @callback module:api/AuthsApi~getCurrentUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MeControllerApiMe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details about the authenticated user
     * Requires the ME permission.
     * @param {module:api/AuthsApi~getCurrentUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MeControllerApiMe}
     */
    getCurrentUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MeControllerApiMe;
      return this.apiClient.callApi(
        '/api/v1/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the index operation.
     * @callback module:api/AuthsApi~indexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthControllerAuth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve list of authentication methods
     * @param {module:api/AuthsApi~indexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthControllerAuth}
     */
    index(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthControllerAuth;
      return this.apiClient.callApi(
        '/api/v1/auths', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApiTokensForCurrentUser operation.
     * @callback module:api/AuthsApi~listApiTokensForCurrentUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List API tokens for authenticated user
     * Returns all API tokens belonging to the authenticated user.
     * @param {module:api/AuthsApi~listApiTokensForCurrentUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listApiTokensForCurrentUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/me/api-tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchCurrentUser operation.
     * @callback module:api/AuthsApi~patchCurrentUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update authenticated user details
     * Updates the authenticated user's profile information and returns the updated user.
     * @param {module:model/MeControllerApiUserDetailsRequest} meControllerApiUserDetailsRequest The user details
     * @param {module:api/AuthsApi~patchCurrentUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    patchCurrentUser(meControllerApiUserDetailsRequest, callback) {
      let postBody = meControllerApiUserDetailsRequest;
      // verify the required parameter 'meControllerApiUserDetailsRequest' is set
      if (meControllerApiUserDetailsRequest === undefined || meControllerApiUserDetailsRequest === null) {
        throw new Error("Missing the required parameter 'meControllerApiUserDetailsRequest' when calling patchCurrentUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/me', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
