/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChartFiltersOverrides from '../model/ChartFiltersOverrides';
import Dashboard from '../model/Dashboard';
import DashboardControllerPreviewRequest from '../model/DashboardControllerPreviewRequest';
import PagedResultsDashboard from '../model/PagedResultsDashboard';
import PagedResultsMapStringObject from '../model/PagedResultsMapStringObject';
import ValidateConstraintViolation from '../model/ValidateConstraintViolation';

/**
* Dashboards service.
* @module api/DashboardsApi
* @version 1.0.0
*/
export default class DashboardsApi {

    /**
    * Constructs a new DashboardsApi. 
    * @alias module:api/DashboardsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDashboard operation.
     * @callback module:api/DashboardsApi~createDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a dashboard from yaml source
     * @param {String} tenant 
     * @param {String} body The dashboard definition as YAML
     * @param {module:api/DashboardsApi~createDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    createDashboard(tenant, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createDashboard");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDashboard");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/x-yaml'];
      let accepts = ['application/json'];
      let returnType = Dashboard;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/dashboards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDashboard operation.
     * @callback module:api/DashboardsApi~deleteDashboardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a dashboard
     * @param {String} id The dashboard id
     * @param {String} tenant 
     * @param {module:api/DashboardsApi~deleteDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDashboard(id, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDashboard");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteDashboard");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/dashboards/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportChartToCsv operation.
     * @callback module:api/DashboardsApi~exportChartToCsvCallback
     * @param {String} error Error message, if any.
     * @param {Blob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export a table chart data to CSV
     * @param {String} tenant 
     * @param {module:model/DashboardControllerPreviewRequest} dashboardControllerPreviewRequest 
     * @param {module:api/DashboardsApi~exportChartToCsvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Blob}
     */
    exportChartToCsv(tenant, dashboardControllerPreviewRequest, callback) {
      let postBody = dashboardControllerPreviewRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling exportChartToCsv");
      }
      // verify the required parameter 'dashboardControllerPreviewRequest' is set
      if (dashboardControllerPreviewRequest === undefined || dashboardControllerPreviewRequest === null) {
        throw new Error("Missing the required parameter 'dashboardControllerPreviewRequest' when calling exportChartToCsv");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/octet-stream'];
      let returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/v1/{tenant}/dashboards/charts/export/to-csv', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportDashboardChartDataToCSV operation.
     * @callback module:api/DashboardsApi~exportDashboardChartDataToCSVCallback
     * @param {String} error Error message, if any.
     * @param {Blob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export a dashboard chart data to CSV
     * @param {String} id The dashboard id
     * @param {String} chartId The chart id
     * @param {String} tenant 
     * @param {module:model/ChartFiltersOverrides} chartFiltersOverrides The filters to apply, some can override chart definition like labels & namespace
     * @param {module:api/DashboardsApi~exportDashboardChartDataToCSVCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Blob}
     */
    exportDashboardChartDataToCSV(id, chartId, tenant, chartFiltersOverrides, callback) {
      let postBody = chartFiltersOverrides;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportDashboardChartDataToCSV");
      }
      // verify the required parameter 'chartId' is set
      if (chartId === undefined || chartId === null) {
        throw new Error("Missing the required parameter 'chartId' when calling exportDashboardChartDataToCSV");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling exportDashboardChartDataToCSV");
      }
      // verify the required parameter 'chartFiltersOverrides' is set
      if (chartFiltersOverrides === undefined || chartFiltersOverrides === null) {
        throw new Error("Missing the required parameter 'chartFiltersOverrides' when calling exportDashboardChartDataToCSV");
      }

      let pathParams = {
        'id': id,
        'chartId': chartId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/octet-stream'];
      let returnType = 'Blob';
      return this.apiClient.callApi(
        '/api/v1/{tenant}/dashboards/{id}/charts/{chartId}/export/to-csv', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDashboard operation.
     * @callback module:api/DashboardsApi~getDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a dashboard
     * @param {String} id The dashboard id
     * @param {String} tenant 
     * @param {module:api/DashboardsApi~getDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    getDashboard(id, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDashboard");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getDashboard");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dashboard;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/dashboards/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDashboardChartData operation.
     * @callback module:api/DashboardsApi~getDashboardChartDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsMapStringObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a dashboard chart data
     * @param {String} id The dashboard id
     * @param {String} chartId The chart id
     * @param {String} tenant 
     * @param {module:model/ChartFiltersOverrides} chartFiltersOverrides The filters to apply, some can override chart definition like labels & namespace
     * @param {module:api/DashboardsApi~getDashboardChartDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsMapStringObject}
     */
    getDashboardChartData(id, chartId, tenant, chartFiltersOverrides, callback) {
      let postBody = chartFiltersOverrides;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDashboardChartData");
      }
      // verify the required parameter 'chartId' is set
      if (chartId === undefined || chartId === null) {
        throw new Error("Missing the required parameter 'chartId' when calling getDashboardChartData");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling getDashboardChartData");
      }
      // verify the required parameter 'chartFiltersOverrides' is set
      if (chartFiltersOverrides === undefined || chartFiltersOverrides === null) {
        throw new Error("Missing the required parameter 'chartFiltersOverrides' when calling getDashboardChartData");
      }

      let pathParams = {
        'id': id,
        'chartId': chartId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PagedResultsMapStringObject;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/dashboards/{id}/charts/{chartId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the previewChart operation.
     * @callback module:api/DashboardsApi~previewChartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsMapStringObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Preview a chart data
     * @param {String} tenant 
     * @param {module:model/DashboardControllerPreviewRequest} dashboardControllerPreviewRequest 
     * @param {module:api/DashboardsApi~previewChartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsMapStringObject}
     */
    previewChart(tenant, dashboardControllerPreviewRequest, callback) {
      let postBody = dashboardControllerPreviewRequest;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling previewChart");
      }
      // verify the required parameter 'dashboardControllerPreviewRequest' is set
      if (dashboardControllerPreviewRequest === undefined || dashboardControllerPreviewRequest === null) {
        throw new Error("Missing the required parameter 'dashboardControllerPreviewRequest' when calling previewChart");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PagedResultsMapStringObject;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/dashboards/charts/preview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchDashboards operation.
     * @callback module:api/DashboardsApi~searchDashboardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsDashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for dashboards
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {String} [q] The filter query
     * @param {Array.<String>} [sort] The sort of current page
     * @param {module:api/DashboardsApi~searchDashboardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsDashboard}
     */
    searchDashboards(page, size, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchDashboards");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchDashboards");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchDashboards");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'page': page,
        'size': size,
        'q': opts['q'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsDashboard;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/dashboards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDashboard operation.
     * @callback module:api/DashboardsApi~updateDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a dashboard
     * @param {String} id The dashboard id
     * @param {String} tenant 
     * @param {String} body The dashboard definition as YAML
     * @param {module:api/DashboardsApi~updateDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    updateDashboard(id, tenant, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDashboard");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling updateDashboard");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDashboard");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/x-yaml'];
      let accepts = ['application/json'];
      let returnType = Dashboard;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/dashboards/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateChart operation.
     * @callback module:api/DashboardsApi~validateChartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidateConstraintViolation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate a chart from yaml source
     * @param {String} tenant 
     * @param {String} body The chart definition as YAML
     * @param {module:api/DashboardsApi~validateChartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValidateConstraintViolation}
     */
    validateChart(tenant, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling validateChart");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling validateChart");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/x-yaml'];
      let accepts = ['application/json'];
      let returnType = ValidateConstraintViolation;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/dashboards/validate/chart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateDashboard operation.
     * @callback module:api/DashboardsApi~validateDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidateConstraintViolation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate dashboard from yaml source
     * @param {String} tenant 
     * @param {String} body The dashboard definition as YAML
     * @param {module:api/DashboardsApi~validateDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValidateConstraintViolation}
     */
    validateDashboard(tenant, body, callback) {
      let postBody = body;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling validateDashboard");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling validateDashboard");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/x-yaml'];
      let accepts = ['application/json'];
      let returnType = ValidateConstraintViolation;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/dashboards/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
