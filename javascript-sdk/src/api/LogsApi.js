/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EventLogEntry from '../model/EventLogEntry';
import Level from '../model/Level';
import LogEntry from '../model/LogEntry';
import PagedResultsLogEntry from '../model/PagedResultsLogEntry';
import QueryFilter from '../model/QueryFilter';

/**
* Logs service.
* @module api/LogsApi
* @version 1.0.0
*/
export default class LogsApi {

    /**
    * Constructs a new LogsApi. 
    * @alias module:api/LogsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteLogsFromExecution operation.
     * @callback module:api/LogsApi~deleteLogsFromExecutionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete logs for a specific execution, taskrun or task
     * @param {String} executionId The execution id
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {module:model/Level} [minLevel] The min log level filter
     * @param {String} [taskRunId] The taskrun id
     * @param {String} [taskId] The task id
     * @param {Number} [attempt] The attempt number
     * @param {module:api/LogsApi~deleteLogsFromExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLogsFromExecution(executionId, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling deleteLogsFromExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteLogsFromExecution");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
        'minLevel': opts['minLevel'],
        'taskRunId': opts['taskRunId'],
        'taskId': opts['taskId'],
        'attempt': opts['attempt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/logs/{executionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLogsFromFlow operation.
     * @callback module:api/LogsApi~deleteLogsFromFlowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete logs for a specific execution, taskrun or task
     * @param {String} namespace The namespace
     * @param {String} flowId The flow identifier
     * @param {String} triggerId The trigger id
     * @param {String} tenant 
     * @param {module:api/LogsApi~deleteLogsFromFlowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLogsFromFlow(namespace, flowId, triggerId, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteLogsFromFlow");
      }
      // verify the required parameter 'flowId' is set
      if (flowId === undefined || flowId === null) {
        throw new Error("Missing the required parameter 'flowId' when calling deleteLogsFromFlow");
      }
      // verify the required parameter 'triggerId' is set
      if (triggerId === undefined || triggerId === null) {
        throw new Error("Missing the required parameter 'triggerId' when calling deleteLogsFromFlow");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteLogsFromFlow");
      }

      let pathParams = {
        'namespace': namespace,
        'flowId': flowId,
        'tenant': tenant
      };
      let queryParams = {
        'triggerId': triggerId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/logs/{namespace}/{flowId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadLogsFromExecution operation.
     * @callback module:api/LogsApi~downloadLogsFromExecutionCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download logs for a specific execution, taskrun or task
     * @param {String} executionId The execution id
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {module:model/Level} [minLevel] The min log level filter
     * @param {String} [taskRunId] The taskrun id
     * @param {String} [taskId] The task id
     * @param {Number} [attempt] The attempt number
     * @param {module:api/LogsApi~downloadLogsFromExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    downloadLogsFromExecution(executionId, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling downloadLogsFromExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling downloadLogsFromExecution");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
        'minLevel': opts['minLevel'],
        'taskRunId': opts['taskRunId'],
        'taskId': opts['taskId'],
        'attempt': opts['attempt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = File;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/logs/{executionId}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the followLogsFromExecution operation.
     * @callback module:api/LogsApi~followLogsFromExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventLogEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow logs for a specific execution
     * @param {String} executionId The execution id
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {module:model/Level} [minLevel] The min log level filter
     * @param {module:api/LogsApi~followLogsFromExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventLogEntry}
     */
    followLogsFromExecution(executionId, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling followLogsFromExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling followLogsFromExecution");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
        'minLevel': opts['minLevel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['text/event-stream'];
      let returnType = EventLogEntry;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/logs/{executionId}/follow', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLogsFromExecution operation.
     * @callback module:api/LogsApi~listLogsFromExecutionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LogEntry>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get logs for a specific execution, taskrun or task
     * @param {String} executionId The execution id
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {module:model/Level} [minLevel] The min log level filter
     * @param {String} [taskRunId] The taskrun id
     * @param {String} [taskId] The task id
     * @param {Number} [attempt] The attempt number
     * @param {module:api/LogsApi~listLogsFromExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LogEntry>}
     */
    listLogsFromExecution(executionId, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling listLogsFromExecution");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listLogsFromExecution");
      }

      let pathParams = {
        'executionId': executionId,
        'tenant': tenant
      };
      let queryParams = {
        'minLevel': opts['minLevel'],
        'taskRunId': opts['taskRunId'],
        'taskId': opts['taskId'],
        'attempt': opts['attempt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LogEntry];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/logs/{executionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchLogs operation.
     * @callback module:api/LogsApi~searchLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsLogEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for logs
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {String} tenant 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [sort] The sort of current page
     * @param {Array.<module:model/QueryFilter>} [filters] Filters
     * @param {String} [q] A string filter
     * @param {String} [namespace] A namespace filter prefix
     * @param {String} [flowId] A flow id filter
     * @param {String} [triggerId] A trigger id filter
     * @param {module:model/Level} [minLevel] The min log level filter
     * @param {Date} [startDate] The start datetime
     * @param {Date} [endDate] The end datetime
     * @param {module:api/LogsApi~searchLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsLogEntry}
     */
    searchLogs(page, size, tenant, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling searchLogs");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling searchLogs");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling searchLogs");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'filters': this.apiClient.buildCollectionParam(opts['filters'], 'csv'),
        'q': opts['q'],
        'namespace': opts['namespace'],
        'flowId': opts['flowId'],
        'triggerId': opts['triggerId'],
        'minLevel': opts['minLevel'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsLogEntry;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/logs/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
