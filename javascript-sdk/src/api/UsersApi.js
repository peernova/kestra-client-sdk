/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiPatchSuperAdminRequest from '../model/ApiPatchSuperAdminRequest';
import CreateApiTokenRequest from '../model/CreateApiTokenRequest';
import CreateApiTokenResponse from '../model/CreateApiTokenResponse';
import IAMTenantAccessControllerApiUserTenantAccess from '../model/IAMTenantAccessControllerApiUserTenantAccess';
import IAMTenantAccessControllerUserApiAutocomplete from '../model/IAMTenantAccessControllerUserApiAutocomplete';
import IAMUserControllerApiCreateOrUpdateUserRequest from '../model/IAMUserControllerApiCreateOrUpdateUserRequest';
import IAMUserControllerApiPatchRestrictedRequest from '../model/IAMUserControllerApiPatchRestrictedRequest';
import IAMUserControllerApiPatchUserPasswordRequest from '../model/IAMUserControllerApiPatchUserPasswordRequest';
import IAMUserControllerApiUser from '../model/IAMUserControllerApiUser';
import IAMUserGroupControllerApiUpdateUserGroupsRequest from '../model/IAMUserGroupControllerApiUpdateUserGroupsRequest';
import MeControllerApiUpdatePasswordRequest from '../model/MeControllerApiUpdatePasswordRequest';
import MeControllerApiUserDetailsRequest from '../model/MeControllerApiUserDetailsRequest';
import PagedResultsIAMUserControllerApiUserSummary from '../model/PagedResultsIAMUserControllerApiUserSummary';

/**
* Users service.
* @module api/UsersApi
* @version 1.0.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the autocompleteUsers operation.
     * @callback module:api/UsersApi~autocompleteUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IAMTenantAccessControllerApiUserTenantAccess>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users for autocomplete
     * @param {String} tenant 
     * @param {module:model/IAMTenantAccessControllerUserApiAutocomplete} iAMTenantAccessControllerUserApiAutocomplete Autocomplete request
     * @param {module:api/UsersApi~autocompleteUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IAMTenantAccessControllerApiUserTenantAccess>}
     */
    autocompleteUsers(tenant, iAMTenantAccessControllerUserApiAutocomplete, callback) {
      let postBody = iAMTenantAccessControllerUserApiAutocomplete;
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling autocompleteUsers");
      }
      // verify the required parameter 'iAMTenantAccessControllerUserApiAutocomplete' is set
      if (iAMTenantAccessControllerUserApiAutocomplete === undefined || iAMTenantAccessControllerUserApiAutocomplete === null) {
        throw new Error("Missing the required parameter 'iAMTenantAccessControllerUserApiAutocomplete' when calling autocompleteUsers");
      }

      let pathParams = {
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [IAMTenantAccessControllerApiUserTenantAccess];
      return this.apiClient.callApi(
        '/api/v1/{tenant}/tenant-access/autocomplete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createApiTokensForUser operation.
     * @callback module:api/UsersApi~createApiTokensForUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new API Token for a specific user
     * @param {String} id The user id
     * @param {module:model/CreateApiTokenRequest} createApiTokenRequest The create api-token request
     * @param {module:api/UsersApi~createApiTokensForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createApiTokensForUser(id, createApiTokenRequest, callback) {
      let postBody = createApiTokenRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createApiTokensForUser");
      }
      // verify the required parameter 'createApiTokenRequest' is set
      if (createApiTokenRequest === undefined || createApiTokenRequest === null) {
        throw new Error("Missing the required parameter 'createApiTokenRequest' when calling createApiTokensForUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/service-accounts/{id}/api-tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createApiTokensForUser1 operation.
     * @callback module:api/UsersApi~createApiTokensForUser1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateApiTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new API Token for a specific user
     * Superadmin-only. Create a new API token for a user.
     * @param {String} id The user id
     * @param {module:model/CreateApiTokenRequest} createApiTokenRequest The create api-token request
     * @param {module:api/UsersApi~createApiTokensForUser1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateApiTokenResponse}
     */
    createApiTokensForUser1(id, createApiTokenRequest, callback) {
      let postBody = createApiTokenRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createApiTokensForUser1");
      }
      // verify the required parameter 'createApiTokenRequest' is set
      if (createApiTokenRequest === undefined || createApiTokenRequest === null) {
        throw new Error("Missing the required parameter 'createApiTokenRequest' when calling createApiTokensForUser1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateApiTokenResponse;
      return this.apiClient.callApi(
        '/api/v1/users/{id}/api-tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createApiTokensForUserWithTenant operation.
     * @callback module:api/UsersApi~createApiTokensForUserWithTenantCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new API Token for a specific user
     * @param {String} id The user id
     * @param {String} tenant 
     * @param {module:model/CreateApiTokenRequest} createApiTokenRequest The create api-token request
     * @param {module:api/UsersApi~createApiTokensForUserWithTenantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createApiTokensForUserWithTenant(id, tenant, createApiTokenRequest, callback) {
      let postBody = createApiTokenRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createApiTokensForUserWithTenant");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling createApiTokensForUserWithTenant");
      }
      // verify the required parameter 'createApiTokenRequest' is set
      if (createApiTokenRequest === undefined || createApiTokenRequest === null) {
        throw new Error("Missing the required parameter 'createApiTokenRequest' when calling createApiTokensForUserWithTenant");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/service-accounts/{id}/api-tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/UsersApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new user account
     * Superadmin-only. Create a new user account with an optional password based authentication method.
     * @param {module:model/IAMUserControllerApiCreateOrUpdateUserRequest} iAMUserControllerApiCreateOrUpdateUserRequest 
     * @param {module:api/UsersApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createUser(iAMUserControllerApiCreateOrUpdateUserRequest, callback) {
      let postBody = iAMUserControllerApiCreateOrUpdateUserRequest;
      // verify the required parameter 'iAMUserControllerApiCreateOrUpdateUserRequest' is set
      if (iAMUserControllerApiCreateOrUpdateUserRequest === undefined || iAMUserControllerApiCreateOrUpdateUserRequest === null) {
        throw new Error("Missing the required parameter 'iAMUserControllerApiCreateOrUpdateUserRequest' when calling createUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApiToken operation.
     * @callback module:api/UsersApi~deleteApiTokenCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an API Token for specific user and token id
     * @param {String} id The user id
     * @param {String} tokenId The token id
     * @param {module:api/UsersApi~deleteApiTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteApiToken(id, tokenId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteApiToken");
      }
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling deleteApiToken");
      }

      let pathParams = {
        'id': id,
        'tokenId': tokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/service-accounts/{id}/api-tokens/{tokenId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApiToken1 operation.
     * @callback module:api/UsersApi~deleteApiToken1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an API Token for specific user and token id
     * Superadmin-only. Delete an API token for a user.
     * @param {String} id The user id
     * @param {String} tokenId The token id
     * @param {module:api/UsersApi~deleteApiToken1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApiToken1(id, tokenId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteApiToken1");
      }
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling deleteApiToken1");
      }

      let pathParams = {
        'id': id,
        'tokenId': tokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users/{id}/api-tokens/{tokenId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApiTokenWithTenant operation.
     * @callback module:api/UsersApi~deleteApiTokenWithTenantCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an API Token for specific user and token id
     * @param {String} id The user id
     * @param {String} tokenId The token id
     * @param {String} tenant 
     * @param {module:api/UsersApi~deleteApiTokenWithTenantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteApiTokenWithTenant(id, tokenId, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteApiTokenWithTenant");
      }
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling deleteApiTokenWithTenant");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling deleteApiTokenWithTenant");
      }

      let pathParams = {
        'id': id,
        'tokenId': tokenId,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/service-accounts/{id}/api-tokens/{tokenId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRefreshToken operation.
     * @callback module:api/UsersApi~deleteRefreshTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user refresh token
     * @param {String} id The user id
     * @param {module:api/UsersApi~deleteRefreshTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRefreshToken(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRefreshToken");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users/{id}/refresh-token', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/UsersApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user
     * Superadmin-only. Delete a user including all its access.
     * @param {String} id The user id
     * @param {module:api/UsersApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUser(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserAuthMethod operation.
     * @callback module:api/UsersApi~deleteUserAuthMethodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IAMUserControllerApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user password
     * Superadmin-only. Updates whether a user is a superadmin.
     * @param {String} id The user id
     * @param {String} auth The user auth method id
     * @param {module:api/UsersApi~deleteUserAuthMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IAMUserControllerApiUser}
     */
    deleteUserAuthMethod(id, auth, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUserAuthMethod");
      }
      // verify the required parameter 'auth' is set
      if (auth === undefined || auth === null) {
        throw new Error("Missing the required parameter 'auth' when calling deleteUserAuthMethod");
      }

      let pathParams = {
        'id': id,
        'auth': auth
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IAMUserControllerApiUser;
      return this.apiClient.callApi(
        '/api/v1/users/{id}/auths/{auth}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/UsersApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IAMUserControllerApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user
     * Superadmin-only. Get user account details.
     * @param {String} id The user id
     * @param {module:api/UsersApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IAMUserControllerApiUser}
     */
    getUser(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IAMUserControllerApiUser;
      return this.apiClient.callApi(
        '/api/v1/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the impersonate operation.
     * @callback module:api/UsersApi~impersonateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Impersonate a user
     * Superadmin-only. Allows an admin to impersonate another user.
     * @param {String} id The user id
     * @param {module:api/UsersApi~impersonateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    impersonate(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling impersonate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{id}/impersonate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApiTokens operation.
     * @callback module:api/UsersApi~listApiTokensCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List API tokens for a specific user
     * @param {String} id The user id
     * @param {module:api/UsersApi~listApiTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listApiTokens(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listApiTokens");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/service-accounts/{id}/api-tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApiTokens1 operation.
     * @callback module:api/UsersApi~listApiTokens1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List API tokens for a specific user
     * Superadmin-only. Get all API token existing for a user.
     * @param {String} id The user id
     * @param {module:api/UsersApi~listApiTokens1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listApiTokens1(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listApiTokens1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{id}/api-tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApiTokensWithTenant operation.
     * @callback module:api/UsersApi~listApiTokensWithTenantCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List API tokens for a specific user
     * @param {String} id The user id
     * @param {String} tenant 
     * @param {module:api/UsersApi~listApiTokensWithTenantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listApiTokensWithTenant(id, tenant, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listApiTokensWithTenant");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling listApiTokensWithTenant");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/service-accounts/{id}/api-tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUsers operation.
     * @callback module:api/UsersApi~listUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultsIAMUserControllerApiUserSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve users
     * @param {Number} page The current page
     * @param {Number} size The current page size
     * @param {Object} opts Optional parameters
     * @param {String} [q] A string filter
     * @param {Array.<String>} [sort] The sort of current page
     * @param {module:api/UsersApi~listUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultsIAMUserControllerApiUserSummary}
     */
    listUsers(page, size, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling listUsers");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling listUsers");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'page': page,
        'size': size,
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResultsIAMUserControllerApiUserSummary;
      return this.apiClient.callApi(
        '/api/v1/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchUser operation.
     * @callback module:api/UsersApi~patchUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IAMUserControllerApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user details
     * Superadmin-only. Updates the the details of a user.
     * @param {String} id The user id
     * @param {module:model/MeControllerApiUserDetailsRequest} meControllerApiUserDetailsRequest The user details
     * @param {module:api/UsersApi~patchUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IAMUserControllerApiUser}
     */
    patchUser(id, meControllerApiUserDetailsRequest, callback) {
      let postBody = meControllerApiUserDetailsRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchUser");
      }
      // verify the required parameter 'meControllerApiUserDetailsRequest' is set
      if (meControllerApiUserDetailsRequest === undefined || meControllerApiUserDetailsRequest === null) {
        throw new Error("Missing the required parameter 'meControllerApiUserDetailsRequest' when calling patchUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IAMUserControllerApiUser;
      return this.apiClient.callApi(
        '/api/v1/users/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchUserDemo operation.
     * @callback module:api/UsersApi~patchUserDemoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user demo
     * Superadmin-only. Updates whether a user is for demo.
     * @param {String} id The user id
     * @param {module:model/IAMUserControllerApiPatchRestrictedRequest} iAMUserControllerApiPatchRestrictedRequest 
     * @param {module:api/UsersApi~patchUserDemoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    patchUserDemo(id, iAMUserControllerApiPatchRestrictedRequest, callback) {
      let postBody = iAMUserControllerApiPatchRestrictedRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchUserDemo");
      }
      // verify the required parameter 'iAMUserControllerApiPatchRestrictedRequest' is set
      if (iAMUserControllerApiPatchRestrictedRequest === undefined || iAMUserControllerApiPatchRestrictedRequest === null) {
        throw new Error("Missing the required parameter 'iAMUserControllerApiPatchRestrictedRequest' when calling patchUserDemo");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users/{id}/restricted', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchUserPassword operation.
     * @callback module:api/UsersApi~patchUserPasswordCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user password
     * Superadmin-only. Updates whether a user is a superadmin.
     * @param {String} id The user id
     * @param {module:model/IAMUserControllerApiPatchUserPasswordRequest} iAMUserControllerApiPatchUserPasswordRequest 
     * @param {module:api/UsersApi~patchUserPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    patchUserPassword(id, iAMUserControllerApiPatchUserPasswordRequest, callback) {
      let postBody = iAMUserControllerApiPatchUserPasswordRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchUserPassword");
      }
      // verify the required parameter 'iAMUserControllerApiPatchUserPasswordRequest' is set
      if (iAMUserControllerApiPatchUserPasswordRequest === undefined || iAMUserControllerApiPatchUserPasswordRequest === null) {
        throw new Error("Missing the required parameter 'iAMUserControllerApiPatchUserPasswordRequest' when calling patchUserPassword");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{id}/password', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchUserSuperAdmin operation.
     * @callback module:api/UsersApi~patchUserSuperAdminCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user superadmin privileges
     * Superadmin-only. Updates whether a user is a superadmin.
     * @param {String} id The user id
     * @param {module:model/ApiPatchSuperAdminRequest} apiPatchSuperAdminRequest 
     * @param {module:api/UsersApi~patchUserSuperAdminCallback} callback The callback function, accepting three arguments: error, data, response
     */
    patchUserSuperAdmin(id, apiPatchSuperAdminRequest, callback) {
      let postBody = apiPatchSuperAdminRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchUserSuperAdmin");
      }
      // verify the required parameter 'apiPatchSuperAdminRequest' is set
      if (apiPatchSuperAdminRequest === undefined || apiPatchSuperAdminRequest === null) {
        throw new Error("Missing the required parameter 'apiPatchSuperAdminRequest' when calling patchUserSuperAdmin");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users/{id}/superadmin', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCurrentUserPassword operation.
     * @callback module:api/UsersApi~updateCurrentUserPasswordCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update authenticated user password
     * Changes the login password for the authenticated user.
     * @param {module:model/MeControllerApiUpdatePasswordRequest} meControllerApiUpdatePasswordRequest 
     * @param {module:api/UsersApi~updateCurrentUserPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateCurrentUserPassword(meControllerApiUpdatePasswordRequest, callback) {
      let postBody = meControllerApiUpdatePasswordRequest;
      // verify the required parameter 'meControllerApiUpdatePasswordRequest' is set
      if (meControllerApiUpdatePasswordRequest === undefined || meControllerApiUpdatePasswordRequest === null) {
        throw new Error("Missing the required parameter 'meControllerApiUpdatePasswordRequest' when calling updateCurrentUserPassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/me/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/UsersApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IAMUserControllerApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user account
     * Superadmin-only. Update an existing user account with an optional password based authentication method.
     * @param {String} id The user id
     * @param {module:model/IAMUserControllerApiCreateOrUpdateUserRequest} iAMUserControllerApiCreateOrUpdateUserRequest 
     * @param {module:api/UsersApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IAMUserControllerApiUser}
     */
    updateUser(id, iAMUserControllerApiCreateOrUpdateUserRequest, callback) {
      let postBody = iAMUserControllerApiCreateOrUpdateUserRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUser");
      }
      // verify the required parameter 'iAMUserControllerApiCreateOrUpdateUserRequest' is set
      if (iAMUserControllerApiCreateOrUpdateUserRequest === undefined || iAMUserControllerApiCreateOrUpdateUserRequest === null) {
        throw new Error("Missing the required parameter 'iAMUserControllerApiCreateOrUpdateUserRequest' when calling updateUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IAMUserControllerApiUser;
      return this.apiClient.callApi(
        '/api/v1/users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserGroups operation.
     * @callback module:api/UsersApi~updateUserGroupsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the list of groups a user belongs to for the given tenant
     * @param {String} id The user ID
     * @param {String} tenant 
     * @param {module:model/IAMUserGroupControllerApiUpdateUserGroupsRequest} iAMUserGroupControllerApiUpdateUserGroupsRequest 
     * @param {module:api/UsersApi~updateUserGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateUserGroups(id, tenant, iAMUserGroupControllerApiUpdateUserGroupsRequest, callback) {
      let postBody = iAMUserGroupControllerApiUpdateUserGroupsRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUserGroups");
      }
      // verify the required parameter 'tenant' is set
      if (tenant === undefined || tenant === null) {
        throw new Error("Missing the required parameter 'tenant' when calling updateUserGroups");
      }
      // verify the required parameter 'iAMUserGroupControllerApiUpdateUserGroupsRequest' is set
      if (iAMUserGroupControllerApiUpdateUserGroupsRequest === undefined || iAMUserGroupControllerApiUpdateUserGroupsRequest === null) {
        throw new Error("Missing the required parameter 'iAMUserGroupControllerApiUpdateUserGroupsRequest' when calling updateUserGroups");
      }

      let pathParams = {
        'id': id,
        'tenant': tenant
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/{tenant}/users/{id}/groups', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
