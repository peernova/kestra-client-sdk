/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InstanceControllerApiServerInstance from './InstanceControllerApiServerInstance';
import ServiceServiceState from './ServiceServiceState';
import ServiceType from './ServiceType';

/**
 * The InstanceControllerApiServiceInstance model module.
 * @module model/InstanceControllerApiServiceInstance
 * @version 1.0.0
 */
class InstanceControllerApiServiceInstance {
    /**
     * Constructs a new <code>InstanceControllerApiServiceInstance</code>.
     * @alias module:model/InstanceControllerApiServiceInstance
     * @param id {String} 
     * @param type {module:model/ServiceType} 
     * @param state {module:model/ServiceServiceState} 
     * @param server {module:model/InstanceControllerApiServerInstance} 
     * @param createdAt {Date} 
     * @param updatedAt {Date} 
     */
    constructor(id, type, state, server, createdAt, updatedAt) { 
        
        InstanceControllerApiServiceInstance.initialize(this, id, type, state, server, createdAt, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, type, state, server, createdAt, updatedAt) { 
        obj['id'] = id;
        obj['type'] = type;
        obj['state'] = state;
        obj['server'] = server;
        obj['createdAt'] = createdAt;
        obj['updatedAt'] = updatedAt;
    }

    /**
     * Constructs a <code>InstanceControllerApiServiceInstance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InstanceControllerApiServiceInstance} obj Optional instance to populate.
     * @return {module:model/InstanceControllerApiServiceInstance} The populated <code>InstanceControllerApiServiceInstance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstanceControllerApiServiceInstance();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ServiceType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ServiceServiceState.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('server')) {
                obj['server'] = InstanceControllerApiServerInstance.constructFromObject(data['server']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InstanceControllerApiServiceInstance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InstanceControllerApiServiceInstance</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InstanceControllerApiServiceInstance.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `server`
        if (data['server']) { // data not null
          InstanceControllerApiServerInstance.validateJSON(data['server']);
        }

        return true;
    }


}

InstanceControllerApiServiceInstance.RequiredProperties = ["id", "type", "state", "server", "createdAt", "updatedAt"];

/**
 * @member {String} id
 */
InstanceControllerApiServiceInstance.prototype['id'] = undefined;

/**
 * @member {module:model/ServiceType} type
 */
InstanceControllerApiServiceInstance.prototype['type'] = undefined;

/**
 * @member {module:model/ServiceServiceState} state
 */
InstanceControllerApiServiceInstance.prototype['state'] = undefined;

/**
 * @member {module:model/InstanceControllerApiServerInstance} server
 */
InstanceControllerApiServiceInstance.prototype['server'] = undefined;

/**
 * @member {Date} createdAt
 */
InstanceControllerApiServiceInstance.prototype['createdAt'] = undefined;

/**
 * @member {Date} updatedAt
 */
InstanceControllerApiServiceInstance.prototype['updatedAt'] = undefined;






export default InstanceControllerApiServiceInstance;

