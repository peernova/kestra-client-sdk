/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BindingType from './BindingType';

/**
 * The Binding model module.
 * @module model/Binding
 * @version 1.0.0
 */
class Binding {
    /**
     * Constructs a new <code>Binding</code>.
     * @alias module:model/Binding
     * @param id {String} 
     * @param type {module:model/BindingType} 
     * @param externalId {String} 
     * @param roleId {String} 
     * @param namespaceId {String} 
     * @param deleted {Boolean} 
     */
    constructor(id, type, externalId, roleId, namespaceId, deleted) { 
        
        Binding.initialize(this, id, type, externalId, roleId, namespaceId, deleted);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, type, externalId, roleId, namespaceId, deleted) { 
        obj['id'] = id;
        obj['type'] = type;
        obj['externalId'] = externalId;
        obj['roleId'] = roleId;
        obj['namespaceId'] = namespaceId;
        obj['deleted'] = deleted;
    }

    /**
     * Constructs a <code>Binding</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Binding} obj Optional instance to populate.
     * @return {module:model/Binding} The populated <code>Binding</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Binding();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = BindingType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('externalId')) {
                obj['externalId'] = ApiClient.convertToType(data['externalId'], 'String');
            }
            if (data.hasOwnProperty('roleId')) {
                obj['roleId'] = ApiClient.convertToType(data['roleId'], 'String');
            }
            if (data.hasOwnProperty('namespaceId')) {
                obj['namespaceId'] = ApiClient.convertToType(data['namespaceId'], 'String');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Binding</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Binding</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Binding.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['externalId'] && !(typeof data['externalId'] === 'string' || data['externalId'] instanceof String)) {
            throw new Error("Expected the field `externalId` to be a primitive type in the JSON string but got " + data['externalId']);
        }
        // ensure the json data is a string
        if (data['roleId'] && !(typeof data['roleId'] === 'string' || data['roleId'] instanceof String)) {
            throw new Error("Expected the field `roleId` to be a primitive type in the JSON string but got " + data['roleId']);
        }
        // ensure the json data is a string
        if (data['namespaceId'] && !(typeof data['namespaceId'] === 'string' || data['namespaceId'] instanceof String)) {
            throw new Error("Expected the field `namespaceId` to be a primitive type in the JSON string but got " + data['namespaceId']);
        }

        return true;
    }


}

Binding.RequiredProperties = ["id", "type", "externalId", "roleId", "namespaceId", "deleted"];

/**
 * @member {String} id
 */
Binding.prototype['id'] = undefined;

/**
 * @member {module:model/BindingType} type
 */
Binding.prototype['type'] = undefined;

/**
 * @member {String} externalId
 */
Binding.prototype['externalId'] = undefined;

/**
 * @member {String} roleId
 */
Binding.prototype['roleId'] = undefined;

/**
 * @member {String} namespaceId
 */
Binding.prototype['namespaceId'] = undefined;

/**
 * @member {Boolean} deleted
 */
Binding.prototype['deleted'] = undefined;






export default Binding;

