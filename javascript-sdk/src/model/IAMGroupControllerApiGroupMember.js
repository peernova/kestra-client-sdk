/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IAMGroupControllerApiGroupMembership from './IAMGroupControllerApiGroupMembership';

/**
 * The IAMGroupControllerApiGroupMember model module.
 * @module model/IAMGroupControllerApiGroupMember
 * @version 1.0.0
 */
class IAMGroupControllerApiGroupMember {
    /**
     * Constructs a new <code>IAMGroupControllerApiGroupMember</code>.
     * @alias module:model/IAMGroupControllerApiGroupMember
     * @param id {String} 
     * @param username {String} 
     * @param displayName {String} 
     * @param groups {Array.<module:model/IAMGroupControllerApiGroupMembership>} 
     */
    constructor(id, username, displayName, groups) { 
        
        IAMGroupControllerApiGroupMember.initialize(this, id, username, displayName, groups);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, username, displayName, groups) { 
        obj['id'] = id;
        obj['username'] = username;
        obj['displayName'] = displayName;
        obj['groups'] = groups;
    }

    /**
     * Constructs a <code>IAMGroupControllerApiGroupMember</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IAMGroupControllerApiGroupMember} obj Optional instance to populate.
     * @return {module:model/IAMGroupControllerApiGroupMember} The populated <code>IAMGroupControllerApiGroupMember</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IAMGroupControllerApiGroupMember();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], [IAMGroupControllerApiGroupMembership]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IAMGroupControllerApiGroupMember</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IAMGroupControllerApiGroupMember</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IAMGroupControllerApiGroupMember.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['groups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groups'])) {
                throw new Error("Expected the field `groups` to be an array in the JSON data but got " + data['groups']);
            }
            // validate the optional field `groups` (array)
            for (const item of data['groups']) {
                IAMGroupControllerApiGroupMembership.validateJSON(item);
            };
        }

        return true;
    }


}

IAMGroupControllerApiGroupMember.RequiredProperties = ["id", "username", "displayName", "groups"];

/**
 * @member {String} id
 */
IAMGroupControllerApiGroupMember.prototype['id'] = undefined;

/**
 * @member {String} username
 */
IAMGroupControllerApiGroupMember.prototype['username'] = undefined;

/**
 * @member {String} displayName
 */
IAMGroupControllerApiGroupMember.prototype['displayName'] = undefined;

/**
 * @member {Array.<module:model/IAMGroupControllerApiGroupMembership>} groups
 */
IAMGroupControllerApiGroupMember.prototype['groups'] = undefined;






export default IAMGroupControllerApiGroupMember;

