/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import State from './State';
import TaskRunAttempt from './TaskRunAttempt';

/**
 * The TaskRun model module.
 * @module model/TaskRun
 * @version 1.0.0
 */
class TaskRun {
    /**
     * Constructs a new <code>TaskRun</code>.
     * @alias module:model/TaskRun
     * @param id {String} 
     * @param executionId {String} 
     * @param namespace {String} 
     * @param flowId {String} 
     * @param taskId {String} 
     * @param parentTaskRunId {String} 
     * @param value {String} 
     * @param attempts {Array.<module:model/TaskRunAttempt>} 
     * @param outputs {Object.<String, Object>} 
     * @param state {module:model/State} 
     * @param iteration {Number} 
     * @param dynamic {Boolean} 
     */
    constructor(id, executionId, namespace, flowId, taskId, parentTaskRunId, value, attempts, outputs, state, iteration, dynamic) { 
        
        TaskRun.initialize(this, id, executionId, namespace, flowId, taskId, parentTaskRunId, value, attempts, outputs, state, iteration, dynamic);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, executionId, namespace, flowId, taskId, parentTaskRunId, value, attempts, outputs, state, iteration, dynamic) { 
        obj['id'] = id;
        obj['executionId'] = executionId;
        obj['namespace'] = namespace;
        obj['flowId'] = flowId;
        obj['taskId'] = taskId;
        obj['parentTaskRunId'] = parentTaskRunId;
        obj['value'] = value;
        obj['attempts'] = attempts;
        obj['outputs'] = outputs;
        obj['state'] = state;
        obj['iteration'] = iteration;
        obj['dynamic'] = dynamic;
    }

    /**
     * Constructs a <code>TaskRun</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskRun} obj Optional instance to populate.
     * @return {module:model/TaskRun} The populated <code>TaskRun</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskRun();

            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('executionId')) {
                obj['executionId'] = ApiClient.convertToType(data['executionId'], 'String');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('flowId')) {
                obj['flowId'] = ApiClient.convertToType(data['flowId'], 'String');
            }
            if (data.hasOwnProperty('taskId')) {
                obj['taskId'] = ApiClient.convertToType(data['taskId'], 'String');
            }
            if (data.hasOwnProperty('parentTaskRunId')) {
                obj['parentTaskRunId'] = ApiClient.convertToType(data['parentTaskRunId'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('attempts')) {
                obj['attempts'] = ApiClient.convertToType(data['attempts'], [TaskRunAttempt]);
            }
            if (data.hasOwnProperty('outputs')) {
                obj['outputs'] = ApiClient.convertToType(data['outputs'], {'String': Object});
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = State.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('iteration')) {
                obj['iteration'] = ApiClient.convertToType(data['iteration'], 'Number');
            }
            if (data.hasOwnProperty('dynamic')) {
                obj['dynamic'] = ApiClient.convertToType(data['dynamic'], 'Boolean');
            }
            if (data.hasOwnProperty('forceExecution')) {
                obj['forceExecution'] = ApiClient.convertToType(data['forceExecution'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskRun</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskRun</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TaskRun.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['items'] && !(typeof data['items'] === 'string' || data['items'] instanceof String)) {
            throw new Error("Expected the field `items` to be a primitive type in the JSON string but got " + data['items']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['executionId'] && !(typeof data['executionId'] === 'string' || data['executionId'] instanceof String)) {
            throw new Error("Expected the field `executionId` to be a primitive type in the JSON string but got " + data['executionId']);
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // ensure the json data is a string
        if (data['flowId'] && !(typeof data['flowId'] === 'string' || data['flowId'] instanceof String)) {
            throw new Error("Expected the field `flowId` to be a primitive type in the JSON string but got " + data['flowId']);
        }
        // ensure the json data is a string
        if (data['taskId'] && !(typeof data['taskId'] === 'string' || data['taskId'] instanceof String)) {
            throw new Error("Expected the field `taskId` to be a primitive type in the JSON string but got " + data['taskId']);
        }
        // ensure the json data is a string
        if (data['parentTaskRunId'] && !(typeof data['parentTaskRunId'] === 'string' || data['parentTaskRunId'] instanceof String)) {
            throw new Error("Expected the field `parentTaskRunId` to be a primitive type in the JSON string but got " + data['parentTaskRunId']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }
        if (data['attempts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attempts'])) {
                throw new Error("Expected the field `attempts` to be an array in the JSON data but got " + data['attempts']);
            }
            // validate the optional field `attempts` (array)
            for (const item of data['attempts']) {
                TaskRunAttempt.validateJSON(item);
            };
        }
        // validate the optional field `state`
        if (data['state']) { // data not null
          State.validateJSON(data['state']);
        }

        return true;
    }


}

TaskRun.RequiredProperties = ["id", "executionId", "namespace", "flowId", "taskId", "parentTaskRunId", "value", "attempts", "outputs", "state", "iteration", "dynamic"];

/**
 * @member {String} items
 */
TaskRun.prototype['items'] = undefined;

/**
 * @member {String} id
 */
TaskRun.prototype['id'] = undefined;

/**
 * @member {String} executionId
 */
TaskRun.prototype['executionId'] = undefined;

/**
 * @member {String} namespace
 */
TaskRun.prototype['namespace'] = undefined;

/**
 * @member {String} flowId
 */
TaskRun.prototype['flowId'] = undefined;

/**
 * @member {String} taskId
 */
TaskRun.prototype['taskId'] = undefined;

/**
 * @member {String} parentTaskRunId
 */
TaskRun.prototype['parentTaskRunId'] = undefined;

/**
 * @member {String} value
 */
TaskRun.prototype['value'] = undefined;

/**
 * @member {Array.<module:model/TaskRunAttempt>} attempts
 */
TaskRun.prototype['attempts'] = undefined;

/**
 * @member {Object.<String, Object>} outputs
 */
TaskRun.prototype['outputs'] = undefined;

/**
 * @member {module:model/State} state
 */
TaskRun.prototype['state'] = undefined;

/**
 * @member {Number} iteration
 */
TaskRun.prototype['iteration'] = undefined;

/**
 * @member {Boolean} dynamic
 */
TaskRun.prototype['dynamic'] = undefined;

/**
 * @member {Boolean} forceExecution
 */
TaskRun.prototype['forceExecution'] = undefined;






export default TaskRun;

