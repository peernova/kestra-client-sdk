/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UnitTest from './UnitTest';

/**
 * The TestSuite model module.
 * @module model/TestSuite
 * @version 1.0.0
 */
class TestSuite {
    /**
     * Constructs a new <code>TestSuite</code>.
     * @alias module:model/TestSuite
     * @param id {String} 
     * @param namespace {String} 
     * @param flowId {String} 
     * @param testCases {Array.<module:model/UnitTest>} 
     */
    constructor(id, namespace, flowId, testCases) { 
        
        TestSuite.initialize(this, id, namespace, flowId, testCases);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, namespace, flowId, testCases) { 
        obj['id'] = id;
        obj['namespace'] = namespace;
        obj['flowId'] = flowId;
        obj['testCases'] = testCases;
    }

    /**
     * Constructs a <code>TestSuite</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestSuite} obj Optional instance to populate.
     * @return {module:model/TestSuite} The populated <code>TestSuite</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestSuite();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('flowId')) {
                obj['flowId'] = ApiClient.convertToType(data['flowId'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('testCases')) {
                obj['testCases'] = ApiClient.convertToType(data['testCases'], [UnitTest]);
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestSuite</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestSuite</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TestSuite.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // ensure the json data is a string
        if (data['flowId'] && !(typeof data['flowId'] === 'string' || data['flowId'] instanceof String)) {
            throw new Error("Expected the field `flowId` to be a primitive type in the JSON string but got " + data['flowId']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        if (data['testCases']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['testCases'])) {
                throw new Error("Expected the field `testCases` to be an array in the JSON data but got " + data['testCases']);
            }
            // validate the optional field `testCases` (array)
            for (const item of data['testCases']) {
                UnitTest.validateJSON(item);
            };
        }

        return true;
    }


}

TestSuite.RequiredProperties = ["id", "namespace", "flowId", "testCases"];

/**
 * @member {String} id
 */
TestSuite.prototype['id'] = undefined;

/**
 * @member {String} description
 */
TestSuite.prototype['description'] = undefined;

/**
 * @member {String} namespace
 */
TestSuite.prototype['namespace'] = undefined;

/**
 * @member {String} flowId
 */
TestSuite.prototype['flowId'] = undefined;

/**
 * @member {String} source
 */
TestSuite.prototype['source'] = undefined;

/**
 * @member {Array.<module:model/UnitTest>} testCases
 */
TestSuite.prototype['testCases'] = undefined;

/**
 * @member {Boolean} deleted
 */
TestSuite.prototype['deleted'] = undefined;

/**
 * @member {Boolean} disabled
 */
TestSuite.prototype['disabled'] = undefined;






export default TestSuite;

