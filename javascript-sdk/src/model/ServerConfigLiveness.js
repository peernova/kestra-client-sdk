/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ServerConfigLiveness model module.
 * @module model/ServerConfigLiveness
 * @version 1.0.0
 */
class ServerConfigLiveness {
    /**
     * Constructs a new <code>ServerConfigLiveness</code>.
     * @alias module:model/ServerConfigLiveness
     * @param enabled {Boolean} 
     * @param interval {String} 
     * @param timeout {String} 
     * @param initialDelay {String} 
     * @param heartbeatInterval {String} 
     */
    constructor(enabled, interval, timeout, initialDelay, heartbeatInterval) { 
        
        ServerConfigLiveness.initialize(this, enabled, interval, timeout, initialDelay, heartbeatInterval);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, enabled, interval, timeout, initialDelay, heartbeatInterval) { 
        obj['enabled'] = enabled || true;
        obj['interval'] = interval || '5s';
        obj['timeout'] = timeout || '45s';
        obj['initialDelay'] = initialDelay || '45s';
        obj['heartbeatInterval'] = heartbeatInterval || '3s';
    }

    /**
     * Constructs a <code>ServerConfigLiveness</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServerConfigLiveness} obj Optional instance to populate.
     * @return {module:model/ServerConfigLiveness} The populated <code>ServerConfigLiveness</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServerConfigLiveness();

            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = ApiClient.convertToType(data['interval'], 'String');
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'String');
            }
            if (data.hasOwnProperty('initialDelay')) {
                obj['initialDelay'] = ApiClient.convertToType(data['initialDelay'], 'String');
            }
            if (data.hasOwnProperty('heartbeatInterval')) {
                obj['heartbeatInterval'] = ApiClient.convertToType(data['heartbeatInterval'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServerConfigLiveness</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServerConfigLiveness</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServerConfigLiveness.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['interval'] && !(typeof data['interval'] === 'string' || data['interval'] instanceof String)) {
            throw new Error("Expected the field `interval` to be a primitive type in the JSON string but got " + data['interval']);
        }
        // ensure the json data is a string
        if (data['timeout'] && !(typeof data['timeout'] === 'string' || data['timeout'] instanceof String)) {
            throw new Error("Expected the field `timeout` to be a primitive type in the JSON string but got " + data['timeout']);
        }
        // ensure the json data is a string
        if (data['initialDelay'] && !(typeof data['initialDelay'] === 'string' || data['initialDelay'] instanceof String)) {
            throw new Error("Expected the field `initialDelay` to be a primitive type in the JSON string but got " + data['initialDelay']);
        }
        // ensure the json data is a string
        if (data['heartbeatInterval'] && !(typeof data['heartbeatInterval'] === 'string' || data['heartbeatInterval'] instanceof String)) {
            throw new Error("Expected the field `heartbeatInterval` to be a primitive type in the JSON string but got " + data['heartbeatInterval']);
        }

        return true;
    }


}

ServerConfigLiveness.RequiredProperties = ["enabled", "interval", "timeout", "initialDelay", "heartbeatInterval"];

/**
 * @member {Boolean} enabled
 * @default true
 */
ServerConfigLiveness.prototype['enabled'] = true;

/**
 * @member {String} interval
 * @default '5s'
 */
ServerConfigLiveness.prototype['interval'] = '5s';

/**
 * @member {String} timeout
 * @default '45s'
 */
ServerConfigLiveness.prototype['timeout'] = '45s';

/**
 * @member {String} initialDelay
 * @default '45s'
 */
ServerConfigLiveness.prototype['initialDelay'] = '45s';

/**
 * @member {String} heartbeatInterval
 * @default '3s'
 */
ServerConfigLiveness.prototype['heartbeatInterval'] = '3s';






export default ServerConfigLiveness;

