/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseResourceScimResource from './BaseResourceScimResource';
import Meta from './Meta';
import ScimExtension from './ScimExtension';
import ScimResource from './ScimResource';
import ScimResourceWithOptionalId from './ScimResourceWithOptionalId';
import ServiceProviderConfigurationAuthenticationSchema from './ServiceProviderConfigurationAuthenticationSchema';
import ServiceProviderConfigurationBulkConfiguration from './ServiceProviderConfigurationBulkConfiguration';
import ServiceProviderConfigurationFilterConfiguration from './ServiceProviderConfigurationFilterConfiguration';
import ServiceProviderConfigurationSupportedConfiguration from './ServiceProviderConfigurationSupportedConfiguration';

/**
 * The ServiceProviderConfiguration model module.
 * @module model/ServiceProviderConfiguration
 * @version 1.0.0
 */
class ServiceProviderConfiguration {
    /**
     * Constructs a new <code>ServiceProviderConfiguration</code>.
     * @alias module:model/ServiceProviderConfiguration
     * @implements module:model/ScimResourceWithOptionalId
     * @implements module:model/ScimResource
     * @implements module:model/BaseResourceScimResource
     * @param meta {module:model/Meta} 
     * @param resourceType {String} 
     */
    constructor(meta, resourceType) { 
        ScimResourceWithOptionalId.initialize(this, meta, resourceType);ScimResource.initialize(this, meta, resourceType);BaseResourceScimResource.initialize(this);
        ServiceProviderConfiguration.initialize(this, meta, resourceType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, meta, resourceType) { 
        obj['meta'] = meta;
        obj['resourceType'] = resourceType;
    }

    /**
     * Constructs a <code>ServiceProviderConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceProviderConfiguration} obj Optional instance to populate.
     * @return {module:model/ServiceProviderConfiguration} The populated <code>ServiceProviderConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceProviderConfiguration();
            ScimResourceWithOptionalId.constructFromObject(data, obj);
            ScimResource.constructFromObject(data, obj);
            BaseResourceScimResource.constructFromObject(data, obj);

            if (data.hasOwnProperty('schemas')) {
                obj['schemas'] = ApiClient.convertToType(data['schemas'], ['String']);
            }
            if (data.hasOwnProperty('baseUrn')) {
                obj['baseUrn'] = ApiClient.convertToType(data['baseUrn'], 'String');
            }
            if (data.hasOwnProperty('extensions')) {
                obj['extensions'] = ApiClient.convertToType(data['extensions'], {'String': ScimExtension});
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = Meta.constructFromObject(data['meta']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('externalId')) {
                obj['externalId'] = ApiClient.convertToType(data['externalId'], 'String');
            }
            if (data.hasOwnProperty('resourceType')) {
                obj['resourceType'] = ApiClient.convertToType(data['resourceType'], 'String');
            }
            if (data.hasOwnProperty('documentationUrl')) {
                obj['documentationUrl'] = ApiClient.convertToType(data['documentationUrl'], 'String');
            }
            if (data.hasOwnProperty('patch')) {
                obj['patch'] = ServiceProviderConfigurationSupportedConfiguration.constructFromObject(data['patch']);
            }
            if (data.hasOwnProperty('bulk')) {
                obj['bulk'] = ServiceProviderConfigurationBulkConfiguration.constructFromObject(data['bulk']);
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ServiceProviderConfigurationFilterConfiguration.constructFromObject(data['filter']);
            }
            if (data.hasOwnProperty('changePassword')) {
                obj['changePassword'] = ServiceProviderConfigurationSupportedConfiguration.constructFromObject(data['changePassword']);
            }
            if (data.hasOwnProperty('sort')) {
                obj['sort'] = ServiceProviderConfigurationSupportedConfiguration.constructFromObject(data['sort']);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ServiceProviderConfigurationSupportedConfiguration.constructFromObject(data['etag']);
            }
            if (data.hasOwnProperty('authenticationSchemes')) {
                obj['authenticationSchemes'] = ApiClient.convertToType(data['authenticationSchemes'], [ServiceProviderConfigurationAuthenticationSchema]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceProviderConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceProviderConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServiceProviderConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['schemas'])) {
            throw new Error("Expected the field `schemas` to be an array in the JSON data but got " + data['schemas']);
        }
        // ensure the json data is a string
        if (data['baseUrn'] && !(typeof data['baseUrn'] === 'string' || data['baseUrn'] instanceof String)) {
            throw new Error("Expected the field `baseUrn` to be a primitive type in the JSON string but got " + data['baseUrn']);
        }
        // validate the optional field `meta`
        if (data['meta']) { // data not null
          Meta.validateJSON(data['meta']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['externalId'] && !(typeof data['externalId'] === 'string' || data['externalId'] instanceof String)) {
            throw new Error("Expected the field `externalId` to be a primitive type in the JSON string but got " + data['externalId']);
        }
        // ensure the json data is a string
        if (data['resourceType'] && !(typeof data['resourceType'] === 'string' || data['resourceType'] instanceof String)) {
            throw new Error("Expected the field `resourceType` to be a primitive type in the JSON string but got " + data['resourceType']);
        }
        // ensure the json data is a string
        if (data['documentationUrl'] && !(typeof data['documentationUrl'] === 'string' || data['documentationUrl'] instanceof String)) {
            throw new Error("Expected the field `documentationUrl` to be a primitive type in the JSON string but got " + data['documentationUrl']);
        }
        // validate the optional field `patch`
        if (data['patch']) { // data not null
          ServiceProviderConfigurationSupportedConfiguration.validateJSON(data['patch']);
        }
        // validate the optional field `bulk`
        if (data['bulk']) { // data not null
          ServiceProviderConfigurationBulkConfiguration.validateJSON(data['bulk']);
        }
        // validate the optional field `filter`
        if (data['filter']) { // data not null
          ServiceProviderConfigurationFilterConfiguration.validateJSON(data['filter']);
        }
        // validate the optional field `changePassword`
        if (data['changePassword']) { // data not null
          ServiceProviderConfigurationSupportedConfiguration.validateJSON(data['changePassword']);
        }
        // validate the optional field `sort`
        if (data['sort']) { // data not null
          ServiceProviderConfigurationSupportedConfiguration.validateJSON(data['sort']);
        }
        // validate the optional field `etag`
        if (data['etag']) { // data not null
          ServiceProviderConfigurationSupportedConfiguration.validateJSON(data['etag']);
        }
        if (data['authenticationSchemes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authenticationSchemes'])) {
                throw new Error("Expected the field `authenticationSchemes` to be an array in the JSON data but got " + data['authenticationSchemes']);
            }
            // validate the optional field `authenticationSchemes` (array)
            for (const item of data['authenticationSchemes']) {
                ServiceProviderConfigurationAuthenticationSchema.validateJSON(item);
            };
        }

        return true;
    }


}

ServiceProviderConfiguration.RequiredProperties = ["meta", "resourceType"];

/**
 * @member {Array.<String>} schemas
 */
ServiceProviderConfiguration.prototype['schemas'] = undefined;

/**
 * @member {String} baseUrn
 */
ServiceProviderConfiguration.prototype['baseUrn'] = undefined;

/**
 * @member {Object.<String, module:model/ScimExtension>} extensions
 */
ServiceProviderConfiguration.prototype['extensions'] = undefined;

/**
 * @member {module:model/Meta} meta
 */
ServiceProviderConfiguration.prototype['meta'] = undefined;

/**
 * @member {String} id
 */
ServiceProviderConfiguration.prototype['id'] = undefined;

/**
 * @member {String} externalId
 */
ServiceProviderConfiguration.prototype['externalId'] = undefined;

/**
 * @member {String} resourceType
 */
ServiceProviderConfiguration.prototype['resourceType'] = undefined;

/**
 * @member {String} documentationUrl
 */
ServiceProviderConfiguration.prototype['documentationUrl'] = undefined;

/**
 * @member {module:model/ServiceProviderConfigurationSupportedConfiguration} patch
 */
ServiceProviderConfiguration.prototype['patch'] = undefined;

/**
 * @member {module:model/ServiceProviderConfigurationBulkConfiguration} bulk
 */
ServiceProviderConfiguration.prototype['bulk'] = undefined;

/**
 * @member {module:model/ServiceProviderConfigurationFilterConfiguration} filter
 */
ServiceProviderConfiguration.prototype['filter'] = undefined;

/**
 * @member {module:model/ServiceProviderConfigurationSupportedConfiguration} changePassword
 */
ServiceProviderConfiguration.prototype['changePassword'] = undefined;

/**
 * @member {module:model/ServiceProviderConfigurationSupportedConfiguration} sort
 */
ServiceProviderConfiguration.prototype['sort'] = undefined;

/**
 * @member {module:model/ServiceProviderConfigurationSupportedConfiguration} etag
 */
ServiceProviderConfiguration.prototype['etag'] = undefined;

/**
 * @member {Array.<module:model/ServiceProviderConfigurationAuthenticationSchema>} authenticationSchemes
 */
ServiceProviderConfiguration.prototype['authenticationSchemes'] = undefined;


// Implement ScimResourceWithOptionalId interface:
/**
 * @member {Array.<String>} schemas
 */
ScimResourceWithOptionalId.prototype['schemas'] = undefined;
/**
 * @member {String} baseUrn
 */
ScimResourceWithOptionalId.prototype['baseUrn'] = undefined;
/**
 * @member {Object.<String, module:model/ScimExtension>} extensions
 */
ScimResourceWithOptionalId.prototype['extensions'] = undefined;
/**
 * @member {module:model/Meta} meta
 */
ScimResourceWithOptionalId.prototype['meta'] = undefined;
/**
 * @member {String} id
 */
ScimResourceWithOptionalId.prototype['id'] = undefined;
/**
 * @member {String} externalId
 */
ScimResourceWithOptionalId.prototype['externalId'] = undefined;
/**
 * @member {String} resourceType
 */
ScimResourceWithOptionalId.prototype['resourceType'] = undefined;
// Implement ScimResource interface:
/**
 * @member {Array.<String>} schemas
 */
ScimResource.prototype['schemas'] = undefined;
/**
 * @member {String} baseUrn
 */
ScimResource.prototype['baseUrn'] = undefined;
/**
 * @member {Object.<String, module:model/ScimExtension>} extensions
 */
ScimResource.prototype['extensions'] = undefined;
/**
 * @member {module:model/Meta} meta
 */
ScimResource.prototype['meta'] = undefined;
/**
 * @member {String} id
 */
ScimResource.prototype['id'] = undefined;
/**
 * @member {String} externalId
 */
ScimResource.prototype['externalId'] = undefined;
/**
 * @member {String} resourceType
 */
ScimResource.prototype['resourceType'] = undefined;
// Implement BaseResourceScimResource interface:
/**
 * @member {Array.<String>} schemas
 */
BaseResourceScimResource.prototype['schemas'] = undefined;




export default ServiceProviderConfiguration;

