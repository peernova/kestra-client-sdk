/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiGroupSummary from './ApiGroupSummary';
import ApiRoleSummary from './ApiRoleSummary';
import InvitationInvitationStatus from './InvitationInvitationStatus';

/**
 * The IAMInvitationControllerApiInvitationDetail model module.
 * @module model/IAMInvitationControllerApiInvitationDetail
 * @version 1.0.0
 */
class IAMInvitationControllerApiInvitationDetail {
    /**
     * Constructs a new <code>IAMInvitationControllerApiInvitationDetail</code>.
     * @alias module:model/IAMInvitationControllerApiInvitationDetail
     * @param id {String} 
     * @param roles {Array.<module:model/ApiRoleSummary>} 
     * @param groups {Array.<module:model/ApiGroupSummary>} 
     * @param tenantId {String} 
     * @param email {String} 
     * @param status {module:model/InvitationInvitationStatus} 
     * @param sentAt {Date} 
     * @param expiredAt {Date} 
     * @param acceptedAt {Date} 
     * @param superAdmin {Boolean} 
     * @param link {String} 
     */
    constructor(id, roles, groups, tenantId, email, status, sentAt, expiredAt, acceptedAt, superAdmin, link) { 
        
        IAMInvitationControllerApiInvitationDetail.initialize(this, id, roles, groups, tenantId, email, status, sentAt, expiredAt, acceptedAt, superAdmin, link);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, roles, groups, tenantId, email, status, sentAt, expiredAt, acceptedAt, superAdmin, link) { 
        obj['id'] = id;
        obj['roles'] = roles;
        obj['groups'] = groups;
        obj['tenantId'] = tenantId;
        obj['email'] = email;
        obj['status'] = status;
        obj['sentAt'] = sentAt;
        obj['expiredAt'] = expiredAt;
        obj['acceptedAt'] = acceptedAt;
        obj['superAdmin'] = superAdmin;
        obj['link'] = link;
    }

    /**
     * Constructs a <code>IAMInvitationControllerApiInvitationDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IAMInvitationControllerApiInvitationDetail} obj Optional instance to populate.
     * @return {module:model/IAMInvitationControllerApiInvitationDetail} The populated <code>IAMInvitationControllerApiInvitationDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IAMInvitationControllerApiInvitationDetail();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], [ApiRoleSummary]);
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], [ApiGroupSummary]);
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = InvitationInvitationStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('sentAt')) {
                obj['sentAt'] = ApiClient.convertToType(data['sentAt'], 'Date');
            }
            if (data.hasOwnProperty('expiredAt')) {
                obj['expiredAt'] = ApiClient.convertToType(data['expiredAt'], 'Date');
            }
            if (data.hasOwnProperty('acceptedAt')) {
                obj['acceptedAt'] = ApiClient.convertToType(data['acceptedAt'], 'Date');
            }
            if (data.hasOwnProperty('superAdmin')) {
                obj['superAdmin'] = ApiClient.convertToType(data['superAdmin'], 'Boolean');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IAMInvitationControllerApiInvitationDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IAMInvitationControllerApiInvitationDetail</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IAMInvitationControllerApiInvitationDetail.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['roles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['roles'])) {
                throw new Error("Expected the field `roles` to be an array in the JSON data but got " + data['roles']);
            }
            // validate the optional field `roles` (array)
            for (const item of data['roles']) {
                ApiRoleSummary.validateJSON(item);
            };
        }
        if (data['groups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groups'])) {
                throw new Error("Expected the field `groups` to be an array in the JSON data but got " + data['groups']);
            }
            // validate the optional field `groups` (array)
            for (const item of data['groups']) {
                ApiGroupSummary.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }

        return true;
    }


}

IAMInvitationControllerApiInvitationDetail.RequiredProperties = ["id", "roles", "groups", "tenantId", "email", "status", "sentAt", "expiredAt", "acceptedAt", "superAdmin", "link"];

/**
 * @member {String} id
 */
IAMInvitationControllerApiInvitationDetail.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/ApiRoleSummary>} roles
 */
IAMInvitationControllerApiInvitationDetail.prototype['roles'] = undefined;

/**
 * @member {Array.<module:model/ApiGroupSummary>} groups
 */
IAMInvitationControllerApiInvitationDetail.prototype['groups'] = undefined;

/**
 * @member {String} tenantId
 */
IAMInvitationControllerApiInvitationDetail.prototype['tenantId'] = undefined;

/**
 * @member {String} email
 */
IAMInvitationControllerApiInvitationDetail.prototype['email'] = undefined;

/**
 * @member {module:model/InvitationInvitationStatus} status
 */
IAMInvitationControllerApiInvitationDetail.prototype['status'] = undefined;

/**
 * @member {Date} sentAt
 */
IAMInvitationControllerApiInvitationDetail.prototype['sentAt'] = undefined;

/**
 * @member {Date} expiredAt
 */
IAMInvitationControllerApiInvitationDetail.prototype['expiredAt'] = undefined;

/**
 * @member {Date} acceptedAt
 */
IAMInvitationControllerApiInvitationDetail.prototype['acceptedAt'] = undefined;

/**
 * @member {Boolean} superAdmin
 */
IAMInvitationControllerApiInvitationDetail.prototype['superAdmin'] = undefined;

/**
 * @member {String} link
 */
IAMInvitationControllerApiInvitationDetail.prototype['link'] = undefined;






export default IAMInvitationControllerApiInvitationDetail;

