/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppResponseUILayout from './AppResponseUILayout';

/**
 * The AppResponse model module.
 * @module model/AppResponse
 * @version 1.0.0
 */
class AppResponse {
    /**
     * Constructs a new <code>AppResponse</code>.
     * @alias module:model/AppResponse
     * @param dispatch {String} 
     * @param stream {String} 
     * @param layout {module:model/AppResponseUILayout} 
     */
    constructor(dispatch, stream, layout) { 
        
        AppResponse.initialize(this, dispatch, stream, layout);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dispatch, stream, layout) { 
        obj['dispatch'] = dispatch;
        obj['stream'] = stream;
        obj['layout'] = layout;
    }

    /**
     * Constructs a <code>AppResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppResponse} obj Optional instance to populate.
     * @return {module:model/AppResponse} The populated <code>AppResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppResponse();

            if (data.hasOwnProperty('dispatch')) {
                obj['dispatch'] = ApiClient.convertToType(data['dispatch'], 'String');
            }
            if (data.hasOwnProperty('stream')) {
                obj['stream'] = ApiClient.convertToType(data['stream'], 'String');
            }
            if (data.hasOwnProperty('layout')) {
                obj['layout'] = AppResponseUILayout.constructFromObject(data['layout']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AppResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dispatch'] && !(typeof data['dispatch'] === 'string' || data['dispatch'] instanceof String)) {
            throw new Error("Expected the field `dispatch` to be a primitive type in the JSON string but got " + data['dispatch']);
        }
        // ensure the json data is a string
        if (data['stream'] && !(typeof data['stream'] === 'string' || data['stream'] instanceof String)) {
            throw new Error("Expected the field `stream` to be a primitive type in the JSON string but got " + data['stream']);
        }
        // validate the optional field `layout`
        if (data['layout']) { // data not null
          AppResponseUILayout.validateJSON(data['layout']);
        }

        return true;
    }


}

AppResponse.RequiredProperties = ["dispatch", "stream", "layout"];

/**
 * @member {String} dispatch
 */
AppResponse.prototype['dispatch'] = undefined;

/**
 * @member {String} stream
 */
AppResponse.prototype['stream'] = undefined;

/**
 * @member {module:model/AppResponseUILayout} layout
 */
AppResponse.prototype['layout'] = undefined;






export default AppResponse;

