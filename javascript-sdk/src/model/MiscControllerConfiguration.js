/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EditionProviderEdition from './EditionProviderEdition';
import MiscControllerEnvironment from './MiscControllerEnvironment';
import MiscControllerPreview from './MiscControllerPreview';
import QueryFilterResourceField from './QueryFilterResourceField';

/**
 * The MiscControllerConfiguration model module.
 * @module model/MiscControllerConfiguration
 * @version 1.0.0
 */
class MiscControllerConfiguration {
    /**
     * Constructs a new <code>MiscControllerConfiguration</code>.
     * @alias module:model/MiscControllerConfiguration
     */
    constructor() { 
        
        MiscControllerConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MiscControllerConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MiscControllerConfiguration} obj Optional instance to populate.
     * @return {module:model/MiscControllerConfiguration} The populated <code>MiscControllerConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MiscControllerConfiguration();

            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('edition')) {
                obj['edition'] = EditionProviderEdition.constructFromObject(data['edition']);
            }
            if (data.hasOwnProperty('commitId')) {
                obj['commitId'] = ApiClient.convertToType(data['commitId'], 'String');
            }
            if (data.hasOwnProperty('commitDate')) {
                obj['commitDate'] = ApiClient.convertToType(data['commitDate'], 'Date');
            }
            if (data.hasOwnProperty('isCustomDashboardsEnabled')) {
                obj['isCustomDashboardsEnabled'] = ApiClient.convertToType(data['isCustomDashboardsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isTaskRunEnabled')) {
                obj['isTaskRunEnabled'] = ApiClient.convertToType(data['isTaskRunEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isAnonymousUsageEnabled')) {
                obj['isAnonymousUsageEnabled'] = ApiClient.convertToType(data['isAnonymousUsageEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isUiAnonymousUsageEnabled')) {
                obj['isUiAnonymousUsageEnabled'] = ApiClient.convertToType(data['isUiAnonymousUsageEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isTemplateEnabled')) {
                obj['isTemplateEnabled'] = ApiClient.convertToType(data['isTemplateEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = MiscControllerEnvironment.constructFromObject(data['environment']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('preview')) {
                obj['preview'] = MiscControllerPreview.constructFromObject(data['preview']);
            }
            if (data.hasOwnProperty('systemNamespace')) {
                obj['systemNamespace'] = ApiClient.convertToType(data['systemNamespace'], 'String');
            }
            if (data.hasOwnProperty('hiddenLabelsPrefixes')) {
                obj['hiddenLabelsPrefixes'] = ApiClient.convertToType(data['hiddenLabelsPrefixes'], ['String']);
            }
            if (data.hasOwnProperty('resourceToFilters')) {
                obj['resourceToFilters'] = ApiClient.convertToType(data['resourceToFilters'], [QueryFilterResourceField]);
            }
            if (data.hasOwnProperty('isAiEnabled')) {
                obj['isAiEnabled'] = ApiClient.convertToType(data['isAiEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isBasicAuthInitialized')) {
                obj['isBasicAuthInitialized'] = ApiClient.convertToType(data['isBasicAuthInitialized'], 'Boolean');
            }
            if (data.hasOwnProperty('pluginsHash')) {
                obj['pluginsHash'] = ApiClient.convertToType(data['pluginsHash'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MiscControllerConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MiscControllerConfiguration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['commitId'] && !(typeof data['commitId'] === 'string' || data['commitId'] instanceof String)) {
            throw new Error("Expected the field `commitId` to be a primitive type in the JSON string but got " + data['commitId']);
        }
        // validate the optional field `environment`
        if (data['environment']) { // data not null
          MiscControllerEnvironment.validateJSON(data['environment']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // validate the optional field `preview`
        if (data['preview']) { // data not null
          MiscControllerPreview.validateJSON(data['preview']);
        }
        // ensure the json data is a string
        if (data['systemNamespace'] && !(typeof data['systemNamespace'] === 'string' || data['systemNamespace'] instanceof String)) {
            throw new Error("Expected the field `systemNamespace` to be a primitive type in the JSON string but got " + data['systemNamespace']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['hiddenLabelsPrefixes'])) {
            throw new Error("Expected the field `hiddenLabelsPrefixes` to be an array in the JSON data but got " + data['hiddenLabelsPrefixes']);
        }
        if (data['resourceToFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resourceToFilters'])) {
                throw new Error("Expected the field `resourceToFilters` to be an array in the JSON data but got " + data['resourceToFilters']);
            }
            // validate the optional field `resourceToFilters` (array)
            for (const item of data['resourceToFilters']) {
                QueryFilterResourceField.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} uuid
 */
MiscControllerConfiguration.prototype['uuid'] = undefined;

/**
 * @member {String} version
 */
MiscControllerConfiguration.prototype['version'] = undefined;

/**
 * @member {module:model/EditionProviderEdition} edition
 */
MiscControllerConfiguration.prototype['edition'] = undefined;

/**
 * @member {String} commitId
 */
MiscControllerConfiguration.prototype['commitId'] = undefined;

/**
 * @member {Date} commitDate
 */
MiscControllerConfiguration.prototype['commitDate'] = undefined;

/**
 * @member {Boolean} isCustomDashboardsEnabled
 */
MiscControllerConfiguration.prototype['isCustomDashboardsEnabled'] = undefined;

/**
 * @member {Boolean} isTaskRunEnabled
 */
MiscControllerConfiguration.prototype['isTaskRunEnabled'] = undefined;

/**
 * @member {Boolean} isAnonymousUsageEnabled
 */
MiscControllerConfiguration.prototype['isAnonymousUsageEnabled'] = undefined;

/**
 * @member {Boolean} isUiAnonymousUsageEnabled
 */
MiscControllerConfiguration.prototype['isUiAnonymousUsageEnabled'] = undefined;

/**
 * @member {Boolean} isTemplateEnabled
 */
MiscControllerConfiguration.prototype['isTemplateEnabled'] = undefined;

/**
 * @member {module:model/MiscControllerEnvironment} environment
 */
MiscControllerConfiguration.prototype['environment'] = undefined;

/**
 * @member {String} url
 */
MiscControllerConfiguration.prototype['url'] = undefined;

/**
 * @member {module:model/MiscControllerPreview} preview
 */
MiscControllerConfiguration.prototype['preview'] = undefined;

/**
 * @member {String} systemNamespace
 */
MiscControllerConfiguration.prototype['systemNamespace'] = undefined;

/**
 * @member {Array.<String>} hiddenLabelsPrefixes
 */
MiscControllerConfiguration.prototype['hiddenLabelsPrefixes'] = undefined;

/**
 * @member {Array.<module:model/QueryFilterResourceField>} resourceToFilters
 */
MiscControllerConfiguration.prototype['resourceToFilters'] = undefined;

/**
 * @member {Boolean} isAiEnabled
 */
MiscControllerConfiguration.prototype['isAiEnabled'] = undefined;

/**
 * @member {Boolean} isBasicAuthInitialized
 */
MiscControllerConfiguration.prototype['isBasicAuthInitialized'] = undefined;

/**
 * @member {Number} pluginsHash
 */
MiscControllerConfiguration.prototype['pluginsHash'] = undefined;






export default MiscControllerConfiguration;

