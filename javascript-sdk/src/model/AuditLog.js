/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuditLogDetail from './AuditLogDetail';
import BaseAuditLog from './BaseAuditLog';
import CrudEventType from './CrudEventType';

/**
 * The AuditLog model module.
 * @module model/AuditLog
 * @version 1.0.0
 */
class AuditLog {
    /**
     * Constructs a new <code>AuditLog</code>.
     * @alias module:model/AuditLog
     * @implements module:model/BaseAuditLog
     * @param tenantId {String} 
     * @param id {String} 
     * @param type {module:model/CrudEventType} 
     * @param detail {module:model/AuditLogDetail} 
     * @param date {Date} 
     * @param userId {String} 
     * @param ipAddress {String} 
     * @param impersonatedBy {String} 
     * @param deleted {Boolean} 
     * @param appliedPatch {Array.<Object>} 
     * @param revertPatch {Array.<Object>} 
     */
    constructor(tenantId, id, type, detail, date, userId, ipAddress, impersonatedBy, deleted, appliedPatch, revertPatch) { 
        BaseAuditLog.initialize(this, tenantId, id, type, detail, date, userId, ipAddress, impersonatedBy, deleted);
        AuditLog.initialize(this, tenantId, id, type, detail, date, userId, ipAddress, impersonatedBy, deleted, appliedPatch, revertPatch);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tenantId, id, type, detail, date, userId, ipAddress, impersonatedBy, deleted, appliedPatch, revertPatch) { 
        obj['tenantId'] = tenantId;
        obj['id'] = id;
        obj['type'] = type;
        obj['detail'] = detail;
        obj['date'] = date;
        obj['userId'] = userId;
        obj['ipAddress'] = ipAddress;
        obj['impersonatedBy'] = impersonatedBy;
        obj['deleted'] = deleted;
        obj['appliedPatch'] = appliedPatch;
        obj['revertPatch'] = revertPatch;
    }

    /**
     * Constructs a <code>AuditLog</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuditLog} obj Optional instance to populate.
     * @return {module:model/AuditLog} The populated <code>AuditLog</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuditLog();
            BaseAuditLog.constructFromObject(data, obj);

            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = CrudEventType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('detail')) {
                obj['detail'] = AuditLogDetail.constructFromObject(data['detail']);
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('impersonatedBy')) {
                obj['impersonatedBy'] = ApiClient.convertToType(data['impersonatedBy'], 'String');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('appliedPatch')) {
                obj['appliedPatch'] = ApiClient.convertToType(data['appliedPatch'], [Object]);
            }
            if (data.hasOwnProperty('revertPatch')) {
                obj['revertPatch'] = ApiClient.convertToType(data['revertPatch'], [Object]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuditLog</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuditLog</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AuditLog.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `detail`
        if (data['detail']) { // data not null
          AuditLogDetail.validateJSON(data['detail']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        // ensure the json data is a string
        if (data['impersonatedBy'] && !(typeof data['impersonatedBy'] === 'string' || data['impersonatedBy'] instanceof String)) {
            throw new Error("Expected the field `impersonatedBy` to be a primitive type in the JSON string but got " + data['impersonatedBy']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['appliedPatch'])) {
            throw new Error("Expected the field `appliedPatch` to be an array in the JSON data but got " + data['appliedPatch']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['revertPatch'])) {
            throw new Error("Expected the field `revertPatch` to be an array in the JSON data but got " + data['revertPatch']);
        }

        return true;
    }


}

AuditLog.RequiredProperties = ["tenantId", "id", "type", "detail", "date", "userId", "ipAddress", "impersonatedBy", "deleted", "appliedPatch", "revertPatch"];

/**
 * @member {String} tenantId
 */
AuditLog.prototype['tenantId'] = undefined;

/**
 * @member {String} id
 */
AuditLog.prototype['id'] = undefined;

/**
 * @member {module:model/CrudEventType} type
 */
AuditLog.prototype['type'] = undefined;

/**
 * @member {module:model/AuditLogDetail} detail
 */
AuditLog.prototype['detail'] = undefined;

/**
 * @member {Date} date
 */
AuditLog.prototype['date'] = undefined;

/**
 * @member {String} userId
 */
AuditLog.prototype['userId'] = undefined;

/**
 * @member {String} ipAddress
 */
AuditLog.prototype['ipAddress'] = undefined;

/**
 * @member {String} impersonatedBy
 */
AuditLog.prototype['impersonatedBy'] = undefined;

/**
 * @member {Boolean} deleted
 */
AuditLog.prototype['deleted'] = undefined;

/**
 * @member {Array.<Object>} appliedPatch
 */
AuditLog.prototype['appliedPatch'] = undefined;

/**
 * @member {Array.<Object>} revertPatch
 */
AuditLog.prototype['revertPatch'] = undefined;


// Implement BaseAuditLog interface:
/**
 * @member {String} tenantId
 */
BaseAuditLog.prototype['tenantId'] = undefined;
/**
 * @member {String} id
 */
BaseAuditLog.prototype['id'] = undefined;
/**
 * @member {module:model/CrudEventType} type
 */
BaseAuditLog.prototype['type'] = undefined;
/**
 * @member {module:model/AuditLogDetail} detail
 */
BaseAuditLog.prototype['detail'] = undefined;
/**
 * @member {Date} date
 */
BaseAuditLog.prototype['date'] = undefined;
/**
 * @member {String} userId
 */
BaseAuditLog.prototype['userId'] = undefined;
/**
 * @member {String} ipAddress
 */
BaseAuditLog.prototype['ipAddress'] = undefined;
/**
 * @member {String} impersonatedBy
 */
BaseAuditLog.prototype['impersonatedBy'] = undefined;
/**
 * @member {Boolean} deleted
 */
BaseAuditLog.prototype['deleted'] = undefined;




export default AuditLog;

