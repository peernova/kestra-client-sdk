/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExecutionKind from './ExecutionKind';

/**
 * The MetricEntry model module.
 * @module model/MetricEntry
 * @version 1.0.0
 */
class MetricEntry {
    /**
     * Constructs a new <code>MetricEntry</code>.
     * @alias module:model/MetricEntry
     * @param namespace {String} 
     * @param flowId {String} 
     * @param type {String} 
     * @param name {String} 
     * @param value {Number} 
     * @param timestamp {Date} 
     * @param deleted {Boolean} 
     */
    constructor(namespace, flowId, type, name, value, timestamp, deleted) { 
        
        MetricEntry.initialize(this, namespace, flowId, type, name, value, timestamp, deleted);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, namespace, flowId, type, name, value, timestamp, deleted) { 
        obj['namespace'] = namespace;
        obj['flowId'] = flowId;
        obj['type'] = type;
        obj['name'] = name;
        obj['value'] = value;
        obj['timestamp'] = timestamp;
        obj['deleted'] = deleted;
    }

    /**
     * Constructs a <code>MetricEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricEntry} obj Optional instance to populate.
     * @return {module:model/MetricEntry} The populated <code>MetricEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricEntry();

            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('flowId')) {
                obj['flowId'] = ApiClient.convertToType(data['flowId'], 'String');
            }
            if (data.hasOwnProperty('taskId')) {
                obj['taskId'] = ApiClient.convertToType(data['taskId'], 'String');
            }
            if (data.hasOwnProperty('executionId')) {
                obj['executionId'] = ApiClient.convertToType(data['executionId'], 'String');
            }
            if (data.hasOwnProperty('taskRunId')) {
                obj['taskRunId'] = ApiClient.convertToType(data['taskRunId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('executionKind')) {
                obj['executionKind'] = ApiClient.convertToType(data['executionKind'], ExecutionKind);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricEntry</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MetricEntry.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // ensure the json data is a string
        if (data['flowId'] && !(typeof data['flowId'] === 'string' || data['flowId'] instanceof String)) {
            throw new Error("Expected the field `flowId` to be a primitive type in the JSON string but got " + data['flowId']);
        }
        // ensure the json data is a string
        if (data['taskId'] && !(typeof data['taskId'] === 'string' || data['taskId'] instanceof String)) {
            throw new Error("Expected the field `taskId` to be a primitive type in the JSON string but got " + data['taskId']);
        }
        // ensure the json data is a string
        if (data['executionId'] && !(typeof data['executionId'] === 'string' || data['executionId'] instanceof String)) {
            throw new Error("Expected the field `executionId` to be a primitive type in the JSON string but got " + data['executionId']);
        }
        // ensure the json data is a string
        if (data['taskRunId'] && !(typeof data['taskRunId'] === 'string' || data['taskRunId'] instanceof String)) {
            throw new Error("Expected the field `taskRunId` to be a primitive type in the JSON string but got " + data['taskRunId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

MetricEntry.RequiredProperties = ["namespace", "flowId", "type", "name", "value", "timestamp", "deleted"];

/**
 * @member {String} namespace
 */
MetricEntry.prototype['namespace'] = undefined;

/**
 * @member {String} flowId
 */
MetricEntry.prototype['flowId'] = undefined;

/**
 * @member {String} taskId
 */
MetricEntry.prototype['taskId'] = undefined;

/**
 * @member {String} executionId
 */
MetricEntry.prototype['executionId'] = undefined;

/**
 * @member {String} taskRunId
 */
MetricEntry.prototype['taskRunId'] = undefined;

/**
 * @member {String} type
 */
MetricEntry.prototype['type'] = undefined;

/**
 * @member {String} name
 */
MetricEntry.prototype['name'] = undefined;

/**
 * @member {Number} value
 */
MetricEntry.prototype['value'] = undefined;

/**
 * @member {Date} timestamp
 */
MetricEntry.prototype['timestamp'] = undefined;

/**
 * @member {Object.<String, String>} tags
 */
MetricEntry.prototype['tags'] = undefined;

/**
 * @member {Boolean} deleted
 */
MetricEntry.prototype['deleted'] = undefined;

/**
 * @member {module:model/ExecutionKind} executionKind
 */
MetricEntry.prototype['executionKind'] = undefined;






export default MetricEntry;

