/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeReference from './AttributeReference';
import BaseResourceSearchRequest from './BaseResourceSearchRequest';
import Filter from './Filter';
import PageRequest from './PageRequest';
import SortOrder from './SortOrder';
import SortRequest from './SortRequest';

/**
 * The SearchRequest model module.
 * @module model/SearchRequest
 * @version 1.0.0
 */
class SearchRequest {
    /**
     * Constructs a new <code>SearchRequest</code>.
     * @alias module:model/SearchRequest
     * @implements module:model/BaseResourceSearchRequest
     */
    constructor() { 
        BaseResourceSearchRequest.initialize(this);
        SearchRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchRequest} obj Optional instance to populate.
     * @return {module:model/SearchRequest} The populated <code>SearchRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchRequest();
            BaseResourceSearchRequest.constructFromObject(data, obj);

            if (data.hasOwnProperty('schemas')) {
                obj['schemas'] = ApiClient.convertToType(data['schemas'], ['String']);
            }
            if (data.hasOwnProperty('pageRequest')) {
                obj['pageRequest'] = PageRequest.constructFromObject(data['pageRequest']);
            }
            if (data.hasOwnProperty('sortRequest')) {
                obj['sortRequest'] = SortRequest.constructFromObject(data['sortRequest']);
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], [AttributeReference]);
            }
            if (data.hasOwnProperty('excludedAttributes')) {
                obj['excludedAttributes'] = ApiClient.convertToType(data['excludedAttributes'], [AttributeReference]);
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = Filter.constructFromObject(data['filter']);
            }
            if (data.hasOwnProperty('sortBy')) {
                obj['sortBy'] = AttributeReference.constructFromObject(data['sortBy']);
            }
            if (data.hasOwnProperty('sortOrder')) {
                obj['sortOrder'] = SortOrder.constructFromObject(data['sortOrder']);
            }
            if (data.hasOwnProperty('startIndex')) {
                obj['startIndex'] = ApiClient.convertToType(data['startIndex'], 'Number');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['schemas'])) {
            throw new Error("Expected the field `schemas` to be an array in the JSON data but got " + data['schemas']);
        }
        // validate the optional field `pageRequest`
        if (data['pageRequest']) { // data not null
          PageRequest.validateJSON(data['pageRequest']);
        }
        // validate the optional field `sortRequest`
        if (data['sortRequest']) { // data not null
          SortRequest.validateJSON(data['sortRequest']);
        }
        if (data['attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attributes'])) {
                throw new Error("Expected the field `attributes` to be an array in the JSON data but got " + data['attributes']);
            }
            // validate the optional field `attributes` (array)
            for (const item of data['attributes']) {
                AttributeReference.validateJSON(item);
            };
        }
        if (data['excludedAttributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['excludedAttributes'])) {
                throw new Error("Expected the field `excludedAttributes` to be an array in the JSON data but got " + data['excludedAttributes']);
            }
            // validate the optional field `excludedAttributes` (array)
            for (const item of data['excludedAttributes']) {
                AttributeReference.validateJSON(item);
            };
        }
        // validate the optional field `filter`
        if (data['filter']) { // data not null
          Filter.validateJSON(data['filter']);
        }
        // validate the optional field `sortBy`
        if (data['sortBy']) { // data not null
          AttributeReference.validateJSON(data['sortBy']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} schemas
 */
SearchRequest.prototype['schemas'] = undefined;

/**
 * @member {module:model/PageRequest} pageRequest
 */
SearchRequest.prototype['pageRequest'] = undefined;

/**
 * @member {module:model/SortRequest} sortRequest
 */
SearchRequest.prototype['sortRequest'] = undefined;

/**
 * @member {Array.<module:model/AttributeReference>} attributes
 */
SearchRequest.prototype['attributes'] = undefined;

/**
 * @member {Array.<module:model/AttributeReference>} excludedAttributes
 */
SearchRequest.prototype['excludedAttributes'] = undefined;

/**
 * @member {module:model/Filter} filter
 */
SearchRequest.prototype['filter'] = undefined;

/**
 * @member {module:model/AttributeReference} sortBy
 */
SearchRequest.prototype['sortBy'] = undefined;

/**
 * @member {module:model/SortOrder} sortOrder
 */
SearchRequest.prototype['sortOrder'] = undefined;

/**
 * @member {Number} startIndex
 */
SearchRequest.prototype['startIndex'] = undefined;

/**
 * @member {Number} count
 */
SearchRequest.prototype['count'] = undefined;


// Implement BaseResourceSearchRequest interface:
/**
 * @member {Array.<String>} schemas
 */
BaseResourceSearchRequest.prototype['schemas'] = undefined;




export default SearchRequest;

