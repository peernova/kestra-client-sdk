/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Blueprint from './Blueprint';

/**
 * The BlueprintWithFlow model module.
 * @module model/BlueprintWithFlow
 * @version 1.0.0
 */
class BlueprintWithFlow {
    /**
     * Constructs a new <code>BlueprintWithFlow</code>.
     * @alias module:model/BlueprintWithFlow
     * @implements module:model/Blueprint
     * @param id {String} 
     * @param title {String} 
     * @param description {String} 
     * @param tags {Array.<String>} 
     * @param includedTasks {Array.<String>} 
     * @param publishedAt {Date} 
     * @param deleted {Boolean} 
     * @param flow {String} 
     */
    constructor(id, title, description, tags, includedTasks, publishedAt, deleted, flow) { 
        Blueprint.initialize(this, id, title, description, tags, includedTasks, publishedAt, deleted);
        BlueprintWithFlow.initialize(this, id, title, description, tags, includedTasks, publishedAt, deleted, flow);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, title, description, tags, includedTasks, publishedAt, deleted, flow) { 
        obj['id'] = id;
        obj['title'] = title;
        obj['description'] = description;
        obj['tags'] = tags;
        obj['includedTasks'] = includedTasks;
        obj['publishedAt'] = publishedAt;
        obj['deleted'] = deleted;
        obj['flow'] = flow;
    }

    /**
     * Constructs a <code>BlueprintWithFlow</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BlueprintWithFlow} obj Optional instance to populate.
     * @return {module:model/BlueprintWithFlow} The populated <code>BlueprintWithFlow</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BlueprintWithFlow();
            Blueprint.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('includedTasks')) {
                obj['includedTasks'] = ApiClient.convertToType(data['includedTasks'], ['String']);
            }
            if (data.hasOwnProperty('publishedAt')) {
                obj['publishedAt'] = ApiClient.convertToType(data['publishedAt'], 'Date');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('flow')) {
                obj['flow'] = ApiClient.convertToType(data['flow'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BlueprintWithFlow</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BlueprintWithFlow</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BlueprintWithFlow.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['includedTasks'])) {
            throw new Error("Expected the field `includedTasks` to be an array in the JSON data but got " + data['includedTasks']);
        }
        // ensure the json data is a string
        if (data['flow'] && !(typeof data['flow'] === 'string' || data['flow'] instanceof String)) {
            throw new Error("Expected the field `flow` to be a primitive type in the JSON string but got " + data['flow']);
        }

        return true;
    }


}

BlueprintWithFlow.RequiredProperties = ["id", "title", "description", "tags", "includedTasks", "publishedAt", "deleted", "flow"];

/**
 * @member {String} id
 */
BlueprintWithFlow.prototype['id'] = undefined;

/**
 * @member {String} title
 */
BlueprintWithFlow.prototype['title'] = undefined;

/**
 * @member {String} description
 */
BlueprintWithFlow.prototype['description'] = undefined;

/**
 * @member {Array.<String>} tags
 */
BlueprintWithFlow.prototype['tags'] = undefined;

/**
 * @member {Array.<String>} includedTasks
 */
BlueprintWithFlow.prototype['includedTasks'] = undefined;

/**
 * @member {Date} publishedAt
 */
BlueprintWithFlow.prototype['publishedAt'] = undefined;

/**
 * @member {Boolean} deleted
 */
BlueprintWithFlow.prototype['deleted'] = undefined;

/**
 * @member {String} flow
 */
BlueprintWithFlow.prototype['flow'] = undefined;


// Implement Blueprint interface:
/**
 * @member {String} id
 */
Blueprint.prototype['id'] = undefined;
/**
 * @member {String} title
 */
Blueprint.prototype['title'] = undefined;
/**
 * @member {String} description
 */
Blueprint.prototype['description'] = undefined;
/**
 * @member {Array.<String>} tags
 */
Blueprint.prototype['tags'] = undefined;
/**
 * @member {Array.<String>} includedTasks
 */
Blueprint.prototype['includedTasks'] = undefined;
/**
 * @member {Date} publishedAt
 */
Blueprint.prototype['publishedAt'] = undefined;
/**
 * @member {Boolean} deleted
 */
Blueprint.prototype['deleted'] = undefined;




export default BlueprintWithFlow;

