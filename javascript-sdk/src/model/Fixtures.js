/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TaskFixture from './TaskFixture';
import TriggerFixture from './TriggerFixture';

/**
 * The Fixtures model module.
 * @module model/Fixtures
 * @version 1.0.0
 */
class Fixtures {
    /**
     * Constructs a new <code>Fixtures</code>.
     * @alias module:model/Fixtures
     */
    constructor() { 
        
        Fixtures.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Fixtures</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Fixtures} obj Optional instance to populate.
     * @return {module:model/Fixtures} The populated <code>Fixtures</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Fixtures();

            if (data.hasOwnProperty('inputs')) {
                obj['inputs'] = ApiClient.convertToType(data['inputs'], {'String': Object});
            }
            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], {'String': 'String'});
            }
            if (data.hasOwnProperty('tasks')) {
                obj['tasks'] = ApiClient.convertToType(data['tasks'], [TaskFixture]);
            }
            if (data.hasOwnProperty('trigger')) {
                obj['trigger'] = TriggerFixture.constructFromObject(data['trigger']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Fixtures</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Fixtures</code>.
     */
    static validateJSON(data) {
        if (data['tasks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tasks'])) {
                throw new Error("Expected the field `tasks` to be an array in the JSON data but got " + data['tasks']);
            }
            // validate the optional field `tasks` (array)
            for (const item of data['tasks']) {
                TaskFixture.validateJSON(item);
            };
        }
        // validate the optional field `trigger`
        if (data['trigger']) { // data not null
          TriggerFixture.validateJSON(data['trigger']);
        }

        return true;
    }


}



/**
 * @member {Object.<String, Object>} inputs
 */
Fixtures.prototype['inputs'] = undefined;

/**
 * @member {Object.<String, String>} files
 */
Fixtures.prototype['files'] = undefined;

/**
 * @member {Array.<module:model/TaskFixture>} tasks
 */
Fixtures.prototype['tasks'] = undefined;

/**
 * @member {module:model/TriggerFixture} trigger
 */
Fixtures.prototype['trigger'] = undefined;






export default Fixtures;

