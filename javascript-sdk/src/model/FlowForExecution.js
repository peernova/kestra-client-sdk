/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AbstractFlow from './AbstractFlow';
import AbstractTriggerForExecution from './AbstractTriggerForExecution';
import FlowForExecutionAllOfLabels from './FlowForExecutionAllOfLabels';
import InputObject from './InputObject';
import Output from './Output';
import TaskForExecution from './TaskForExecution';
import WorkerGroup from './WorkerGroup';

/**
 * The FlowForExecution model module.
 * @module model/FlowForExecution
 * @version 1.0.0
 */
class FlowForExecution {
    /**
     * Constructs a new <code>FlowForExecution</code>.
     * @alias module:model/FlowForExecution
     * @implements module:model/AbstractFlow
     * @param id {String} 
     * @param namespace {String} 
     * @param disabled {Boolean} 
     * @param deleted {Boolean} 
     * @param tasks {Array.<module:model/TaskForExecution>} 
     */
    constructor(id, namespace, disabled, deleted, tasks) { 
        AbstractFlow.initialize(this, id, namespace, disabled, deleted);
        FlowForExecution.initialize(this, id, namespace, disabled, deleted, tasks);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, namespace, disabled, deleted, tasks) { 
        obj['id'] = id;
        obj['namespace'] = namespace;
        obj['disabled'] = disabled;
        obj['deleted'] = deleted;
        obj['tasks'] = tasks;
    }

    /**
     * Constructs a <code>FlowForExecution</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FlowForExecution} obj Optional instance to populate.
     * @return {module:model/FlowForExecution} The populated <code>FlowForExecution</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FlowForExecution();
            AbstractFlow.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('revision')) {
                obj['revision'] = ApiClient.convertToType(data['revision'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('inputs')) {
                obj['inputs'] = ApiClient.convertToType(data['inputs'], [InputObject]);
            }
            if (data.hasOwnProperty('outputs')) {
                obj['outputs'] = ApiClient.convertToType(data['outputs'], [Output]);
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = FlowForExecutionAllOfLabels.constructFromObject(data['labels']);
            }
            if (data.hasOwnProperty('variables')) {
                obj['variables'] = ApiClient.convertToType(data['variables'], {'String': Object});
            }
            if (data.hasOwnProperty('workerGroup')) {
                obj['workerGroup'] = WorkerGroup.constructFromObject(data['workerGroup']);
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('tasks')) {
                obj['tasks'] = ApiClient.convertToType(data['tasks'], [TaskForExecution]);
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [TaskForExecution]);
            }
            if (data.hasOwnProperty('finally')) {
                obj['finally'] = ApiClient.convertToType(data['finally'], [TaskForExecution]);
            }
            if (data.hasOwnProperty('afterExecution')) {
                obj['afterExecution'] = ApiClient.convertToType(data['afterExecution'], [TaskForExecution]);
            }
            if (data.hasOwnProperty('triggers')) {
                obj['triggers'] = ApiClient.convertToType(data['triggers'], [AbstractTriggerForExecution]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FlowForExecution</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FlowForExecution</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FlowForExecution.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['inputs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inputs'])) {
                throw new Error("Expected the field `inputs` to be an array in the JSON data but got " + data['inputs']);
            }
            // validate the optional field `inputs` (array)
            for (const item of data['inputs']) {
                InputObject.validateJSON(item);
            };
        }
        if (data['outputs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['outputs'])) {
                throw new Error("Expected the field `outputs` to be an array in the JSON data but got " + data['outputs']);
            }
            // validate the optional field `outputs` (array)
            for (const item of data['outputs']) {
                Output.validateJSON(item);
            };
        }
        // validate the optional field `labels`
        if (data['labels']) { // data not null
          FlowForExecutionAllOfLabels.validateJSON(data['labels']);
        }
        // validate the optional field `workerGroup`
        if (data['workerGroup']) { // data not null
          WorkerGroup.validateJSON(data['workerGroup']);
        }
        if (data['tasks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tasks'])) {
                throw new Error("Expected the field `tasks` to be an array in the JSON data but got " + data['tasks']);
            }
            // validate the optional field `tasks` (array)
            for (const item of data['tasks']) {
                TaskForExecution.validateJSON(item);
            };
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                TaskForExecution.validateJSON(item);
            };
        }
        if (data['finally']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['finally'])) {
                throw new Error("Expected the field `finally` to be an array in the JSON data but got " + data['finally']);
            }
            // validate the optional field `finally` (array)
            for (const item of data['finally']) {
                TaskForExecution.validateJSON(item);
            };
        }
        if (data['afterExecution']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['afterExecution'])) {
                throw new Error("Expected the field `afterExecution` to be an array in the JSON data but got " + data['afterExecution']);
            }
            // validate the optional field `afterExecution` (array)
            for (const item of data['afterExecution']) {
                TaskForExecution.validateJSON(item);
            };
        }
        if (data['triggers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['triggers'])) {
                throw new Error("Expected the field `triggers` to be an array in the JSON data but got " + data['triggers']);
            }
            // validate the optional field `triggers` (array)
            for (const item of data['triggers']) {
                AbstractTriggerForExecution.validateJSON(item);
            };
        }

        return true;
    }


}

FlowForExecution.RequiredProperties = ["id", "namespace", "disabled", "deleted", "tasks"];

/**
 * @member {String} id
 */
FlowForExecution.prototype['id'] = undefined;

/**
 * @member {String} namespace
 */
FlowForExecution.prototype['namespace'] = undefined;

/**
 * @member {Number} revision
 */
FlowForExecution.prototype['revision'] = undefined;

/**
 * @member {String} description
 */
FlowForExecution.prototype['description'] = undefined;

/**
 * @member {Array.<module:model/InputObject>} inputs
 */
FlowForExecution.prototype['inputs'] = undefined;

/**
 * @member {Array.<module:model/Output>} outputs
 */
FlowForExecution.prototype['outputs'] = undefined;

/**
 * @member {Boolean} disabled
 */
FlowForExecution.prototype['disabled'] = undefined;

/**
 * @member {module:model/FlowForExecutionAllOfLabels} labels
 */
FlowForExecution.prototype['labels'] = undefined;

/**
 * @member {Object.<String, Object>} variables
 */
FlowForExecution.prototype['variables'] = undefined;

/**
 * @member {module:model/WorkerGroup} workerGroup
 */
FlowForExecution.prototype['workerGroup'] = undefined;

/**
 * @member {Boolean} deleted
 */
FlowForExecution.prototype['deleted'] = undefined;

/**
 * @member {Array.<module:model/TaskForExecution>} tasks
 */
FlowForExecution.prototype['tasks'] = undefined;

/**
 * @member {Array.<module:model/TaskForExecution>} errors
 */
FlowForExecution.prototype['errors'] = undefined;

/**
 * @member {Array.<module:model/TaskForExecution>} finally
 */
FlowForExecution.prototype['finally'] = undefined;

/**
 * @member {Array.<module:model/TaskForExecution>} afterExecution
 */
FlowForExecution.prototype['afterExecution'] = undefined;

/**
 * @member {Array.<module:model/AbstractTriggerForExecution>} triggers
 */
FlowForExecution.prototype['triggers'] = undefined;


// Implement AbstractFlow interface:
/**
 * @member {String} id
 */
AbstractFlow.prototype['id'] = undefined;
/**
 * @member {String} namespace
 */
AbstractFlow.prototype['namespace'] = undefined;
/**
 * @member {Number} revision
 */
AbstractFlow.prototype['revision'] = undefined;
/**
 * @member {String} description
 */
AbstractFlow.prototype['description'] = undefined;
/**
 * @member {Array.<module:model/InputObject>} inputs
 */
AbstractFlow.prototype['inputs'] = undefined;
/**
 * @member {Array.<module:model/Output>} outputs
 */
AbstractFlow.prototype['outputs'] = undefined;
/**
 * @member {Boolean} disabled
 */
AbstractFlow.prototype['disabled'] = undefined;
/**
 * @member {module:model/AbstractFlowLabels} labels
 */
AbstractFlow.prototype['labels'] = undefined;
/**
 * @member {Object.<String, Object>} variables
 */
AbstractFlow.prototype['variables'] = undefined;
/**
 * @member {module:model/WorkerGroup} workerGroup
 */
AbstractFlow.prototype['workerGroup'] = undefined;
/**
 * @member {Boolean} deleted
 */
AbstractFlow.prototype['deleted'] = undefined;




export default FlowForExecution;

