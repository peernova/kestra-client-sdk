/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TestSuiteServiceRunByQueryRequest model module.
 * @module model/TestSuiteServiceRunByQueryRequest
 * @version 1.0.0
 */
class TestSuiteServiceRunByQueryRequest {
    /**
     * Constructs a new <code>TestSuiteServiceRunByQueryRequest</code>.
     * @alias module:model/TestSuiteServiceRunByQueryRequest
     * @param namespace {String} 
     * @param flowId {String} 
     * @param includeChildNamespaces {Boolean} Should child namespaces be included or not
     */
    constructor(namespace, flowId, includeChildNamespaces) { 
        
        TestSuiteServiceRunByQueryRequest.initialize(this, namespace, flowId, includeChildNamespaces);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, namespace, flowId, includeChildNamespaces) { 
        obj['namespace'] = namespace;
        obj['flowId'] = flowId;
        obj['includeChildNamespaces'] = includeChildNamespaces || true;
    }

    /**
     * Constructs a <code>TestSuiteServiceRunByQueryRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestSuiteServiceRunByQueryRequest} obj Optional instance to populate.
     * @return {module:model/TestSuiteServiceRunByQueryRequest} The populated <code>TestSuiteServiceRunByQueryRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestSuiteServiceRunByQueryRequest();

            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('flowId')) {
                obj['flowId'] = ApiClient.convertToType(data['flowId'], 'String');
            }
            if (data.hasOwnProperty('includeChildNamespaces')) {
                obj['includeChildNamespaces'] = ApiClient.convertToType(data['includeChildNamespaces'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestSuiteServiceRunByQueryRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestSuiteServiceRunByQueryRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TestSuiteServiceRunByQueryRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // ensure the json data is a string
        if (data['flowId'] && !(typeof data['flowId'] === 'string' || data['flowId'] instanceof String)) {
            throw new Error("Expected the field `flowId` to be a primitive type in the JSON string but got " + data['flowId']);
        }

        return true;
    }


}

TestSuiteServiceRunByQueryRequest.RequiredProperties = ["namespace", "flowId", "includeChildNamespaces"];

/**
 * @member {String} namespace
 */
TestSuiteServiceRunByQueryRequest.prototype['namespace'] = undefined;

/**
 * @member {String} flowId
 */
TestSuiteServiceRunByQueryRequest.prototype['flowId'] = undefined;

/**
 * Should child namespaces be included or not
 * @member {Boolean} includeChildNamespaces
 * @default true
 */
TestSuiteServiceRunByQueryRequest.prototype['includeChildNamespaces'] = true;






export default TestSuiteServiceRunByQueryRequest;

