/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StateHistory from './StateHistory';
import StateType from './StateType';

/**
 * The State model module.
 * @module model/State
 * @version 1.0.0
 */
class State {
    /**
     * Constructs a new <code>State</code>.
     * @alias module:model/State
     * @param current {module:model/StateType} 
     */
    constructor(current) { 
        
        State.initialize(this, current);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, current) { 
        obj['current'] = current;
    }

    /**
     * Constructs a <code>State</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/State} obj Optional instance to populate.
     * @return {module:model/State} The populated <code>State</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new State();

            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('current')) {
                obj['current'] = StateType.constructFromObject(data['current']);
            }
            if (data.hasOwnProperty('histories')) {
                obj['histories'] = ApiClient.convertToType(data['histories'], [StateHistory]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>State</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>State</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of State.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        if (data['histories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['histories'])) {
                throw new Error("Expected the field `histories` to be an array in the JSON data but got " + data['histories']);
            }
            // validate the optional field `histories` (array)
            for (const item of data['histories']) {
                StateHistory.validateJSON(item);
            };
        }

        return true;
    }


}

State.RequiredProperties = ["current"];

/**
 * @member {String} duration
 */
State.prototype['duration'] = undefined;

/**
 * @member {Date} startDate
 */
State.prototype['startDate'] = undefined;

/**
 * @member {Date} endDate
 */
State.prototype['endDate'] = undefined;

/**
 * @member {module:model/StateType} current
 */
State.prototype['current'] = undefined;

/**
 * @member {Array.<module:model/StateHistory>} histories
 */
State.prototype['histories'] = undefined;






export default State;

