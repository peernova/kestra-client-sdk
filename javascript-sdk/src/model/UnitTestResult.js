/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssertionResult from './AssertionResult';
import AssertionRunError from './AssertionRunError';
import Fixtures from './Fixtures';
import TestState from './TestState';

/**
 * The UnitTestResult model module.
 * @module model/UnitTestResult
 * @version 1.0.0
 */
class UnitTestResult {
    /**
     * Constructs a new <code>UnitTestResult</code>.
     * @alias module:model/UnitTestResult
     * @param testId {String} 
     * @param testType {String} 
     * @param executionId {String} 
     * @param url {String} 
     * @param state {module:model/TestState} 
     * @param assertionResults {Array.<module:model/AssertionResult>} 
     * @param errors {Array.<module:model/AssertionRunError>} 
     * @param fixtures {module:model/Fixtures} 
     */
    constructor(testId, testType, executionId, url, state, assertionResults, errors, fixtures) { 
        
        UnitTestResult.initialize(this, testId, testType, executionId, url, state, assertionResults, errors, fixtures);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, testId, testType, executionId, url, state, assertionResults, errors, fixtures) { 
        obj['testId'] = testId;
        obj['testType'] = testType;
        obj['executionId'] = executionId;
        obj['url'] = url;
        obj['state'] = state;
        obj['assertionResults'] = assertionResults;
        obj['errors'] = errors;
        obj['fixtures'] = fixtures;
    }

    /**
     * Constructs a <code>UnitTestResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UnitTestResult} obj Optional instance to populate.
     * @return {module:model/UnitTestResult} The populated <code>UnitTestResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UnitTestResult();

            if (data.hasOwnProperty('testId')) {
                obj['testId'] = ApiClient.convertToType(data['testId'], 'String');
            }
            if (data.hasOwnProperty('testType')) {
                obj['testType'] = ApiClient.convertToType(data['testType'], 'String');
            }
            if (data.hasOwnProperty('executionId')) {
                obj['executionId'] = ApiClient.convertToType(data['executionId'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = TestState.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('assertionResults')) {
                obj['assertionResults'] = ApiClient.convertToType(data['assertionResults'], [AssertionResult]);
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [AssertionRunError]);
            }
            if (data.hasOwnProperty('fixtures')) {
                obj['fixtures'] = Fixtures.constructFromObject(data['fixtures']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UnitTestResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UnitTestResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UnitTestResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['testId'] && !(typeof data['testId'] === 'string' || data['testId'] instanceof String)) {
            throw new Error("Expected the field `testId` to be a primitive type in the JSON string but got " + data['testId']);
        }
        // ensure the json data is a string
        if (data['testType'] && !(typeof data['testType'] === 'string' || data['testType'] instanceof String)) {
            throw new Error("Expected the field `testType` to be a primitive type in the JSON string but got " + data['testType']);
        }
        // ensure the json data is a string
        if (data['executionId'] && !(typeof data['executionId'] === 'string' || data['executionId'] instanceof String)) {
            throw new Error("Expected the field `executionId` to be a primitive type in the JSON string but got " + data['executionId']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        if (data['assertionResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['assertionResults'])) {
                throw new Error("Expected the field `assertionResults` to be an array in the JSON data but got " + data['assertionResults']);
            }
            // validate the optional field `assertionResults` (array)
            for (const item of data['assertionResults']) {
                AssertionResult.validateJSON(item);
            };
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                AssertionRunError.validateJSON(item);
            };
        }
        // validate the optional field `fixtures`
        if (data['fixtures']) { // data not null
          Fixtures.validateJSON(data['fixtures']);
        }

        return true;
    }


}

UnitTestResult.RequiredProperties = ["testId", "testType", "executionId", "url", "state", "assertionResults", "errors", "fixtures"];

/**
 * @member {String} testId
 */
UnitTestResult.prototype['testId'] = undefined;

/**
 * @member {String} testType
 */
UnitTestResult.prototype['testType'] = undefined;

/**
 * @member {String} executionId
 */
UnitTestResult.prototype['executionId'] = undefined;

/**
 * @member {String} url
 */
UnitTestResult.prototype['url'] = undefined;

/**
 * @member {module:model/TestState} state
 */
UnitTestResult.prototype['state'] = undefined;

/**
 * @member {Array.<module:model/AssertionResult>} assertionResults
 */
UnitTestResult.prototype['assertionResults'] = undefined;

/**
 * @member {Array.<module:model/AssertionRunError>} errors
 */
UnitTestResult.prototype['errors'] = undefined;

/**
 * @member {module:model/Fixtures} fixtures
 */
UnitTestResult.prototype['fixtures'] = undefined;






export default UnitTestResult;

