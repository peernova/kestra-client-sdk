/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExecutionKind from './ExecutionKind';
import Level from './Level';

/**
 * The LogEntry model module.
 * @module model/LogEntry
 * @version 1.0.0
 */
class LogEntry {
    /**
     * Constructs a new <code>LogEntry</code>.
     * @alias module:model/LogEntry
     * @param namespace {String} 
     * @param flowId {String} 
     * @param timestamp {Date} 
     * @param level {module:model/Level} 
     * @param thread {String} 
     * @param message {String} 
     * @param deleted {Boolean} 
     */
    constructor(namespace, flowId, timestamp, level, thread, message, deleted) { 
        
        LogEntry.initialize(this, namespace, flowId, timestamp, level, thread, message, deleted);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, namespace, flowId, timestamp, level, thread, message, deleted) { 
        obj['namespace'] = namespace;
        obj['flowId'] = flowId;
        obj['timestamp'] = timestamp;
        obj['level'] = level;
        obj['thread'] = thread;
        obj['message'] = message;
        obj['deleted'] = deleted;
    }

    /**
     * Constructs a <code>LogEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogEntry} obj Optional instance to populate.
     * @return {module:model/LogEntry} The populated <code>LogEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogEntry();

            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('flowId')) {
                obj['flowId'] = ApiClient.convertToType(data['flowId'], 'String');
            }
            if (data.hasOwnProperty('taskId')) {
                obj['taskId'] = ApiClient.convertToType(data['taskId'], 'String');
            }
            if (data.hasOwnProperty('executionId')) {
                obj['executionId'] = ApiClient.convertToType(data['executionId'], 'String');
            }
            if (data.hasOwnProperty('taskRunId')) {
                obj['taskRunId'] = ApiClient.convertToType(data['taskRunId'], 'String');
            }
            if (data.hasOwnProperty('attemptNumber')) {
                obj['attemptNumber'] = ApiClient.convertToType(data['attemptNumber'], 'Number');
            }
            if (data.hasOwnProperty('triggerId')) {
                obj['triggerId'] = ApiClient.convertToType(data['triggerId'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = Level.constructFromObject(data['level']);
            }
            if (data.hasOwnProperty('thread')) {
                obj['thread'] = ApiClient.convertToType(data['thread'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('executionKind')) {
                obj['executionKind'] = ApiClient.convertToType(data['executionKind'], ExecutionKind);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogEntry</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LogEntry.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // ensure the json data is a string
        if (data['flowId'] && !(typeof data['flowId'] === 'string' || data['flowId'] instanceof String)) {
            throw new Error("Expected the field `flowId` to be a primitive type in the JSON string but got " + data['flowId']);
        }
        // ensure the json data is a string
        if (data['taskId'] && !(typeof data['taskId'] === 'string' || data['taskId'] instanceof String)) {
            throw new Error("Expected the field `taskId` to be a primitive type in the JSON string but got " + data['taskId']);
        }
        // ensure the json data is a string
        if (data['executionId'] && !(typeof data['executionId'] === 'string' || data['executionId'] instanceof String)) {
            throw new Error("Expected the field `executionId` to be a primitive type in the JSON string but got " + data['executionId']);
        }
        // ensure the json data is a string
        if (data['taskRunId'] && !(typeof data['taskRunId'] === 'string' || data['taskRunId'] instanceof String)) {
            throw new Error("Expected the field `taskRunId` to be a primitive type in the JSON string but got " + data['taskRunId']);
        }
        // ensure the json data is a string
        if (data['triggerId'] && !(typeof data['triggerId'] === 'string' || data['triggerId'] instanceof String)) {
            throw new Error("Expected the field `triggerId` to be a primitive type in the JSON string but got " + data['triggerId']);
        }
        // ensure the json data is a string
        if (data['thread'] && !(typeof data['thread'] === 'string' || data['thread'] instanceof String)) {
            throw new Error("Expected the field `thread` to be a primitive type in the JSON string but got " + data['thread']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }

        return true;
    }


}

LogEntry.RequiredProperties = ["namespace", "flowId", "timestamp", "level", "thread", "message", "deleted"];

/**
 * @member {String} namespace
 */
LogEntry.prototype['namespace'] = undefined;

/**
 * @member {String} flowId
 */
LogEntry.prototype['flowId'] = undefined;

/**
 * @member {String} taskId
 */
LogEntry.prototype['taskId'] = undefined;

/**
 * @member {String} executionId
 */
LogEntry.prototype['executionId'] = undefined;

/**
 * @member {String} taskRunId
 */
LogEntry.prototype['taskRunId'] = undefined;

/**
 * @member {Number} attemptNumber
 */
LogEntry.prototype['attemptNumber'] = undefined;

/**
 * @member {String} triggerId
 */
LogEntry.prototype['triggerId'] = undefined;

/**
 * @member {Date} timestamp
 */
LogEntry.prototype['timestamp'] = undefined;

/**
 * @member {module:model/Level} level
 */
LogEntry.prototype['level'] = undefined;

/**
 * @member {String} thread
 */
LogEntry.prototype['thread'] = undefined;

/**
 * @member {String} message
 */
LogEntry.prototype['message'] = undefined;

/**
 * @member {Boolean} deleted
 */
LogEntry.prototype['deleted'] = undefined;

/**
 * @member {module:model/ExecutionKind} executionKind
 */
LogEntry.prototype['executionKind'] = undefined;






export default LogEntry;

