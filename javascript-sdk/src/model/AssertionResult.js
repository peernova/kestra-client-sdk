/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AssertionResult model module.
 * @module model/AssertionResult
 * @version 1.0.0
 */
class AssertionResult {
    /**
     * Constructs a new <code>AssertionResult</code>.
     * @alias module:model/AssertionResult
     * @param operator {String} 
     * @param expected {Object} 
     * @param actual {Object} 
     * @param isSuccess {Boolean} 
     * @param taskId {String} 
     * @param description {String} 
     * @param errorMessage {String} 
     */
    constructor(operator, expected, actual, isSuccess, taskId, description, errorMessage) { 
        
        AssertionResult.initialize(this, operator, expected, actual, isSuccess, taskId, description, errorMessage);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, operator, expected, actual, isSuccess, taskId, description, errorMessage) { 
        obj['operator'] = operator;
        obj['expected'] = expected;
        obj['actual'] = actual;
        obj['isSuccess'] = isSuccess;
        obj['taskId'] = taskId;
        obj['description'] = description;
        obj['errorMessage'] = errorMessage;
    }

    /**
     * Constructs a <code>AssertionResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssertionResult} obj Optional instance to populate.
     * @return {module:model/AssertionResult} The populated <code>AssertionResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssertionResult();

            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('expected')) {
                obj['expected'] = ApiClient.convertToType(data['expected'], Object);
            }
            if (data.hasOwnProperty('actual')) {
                obj['actual'] = ApiClient.convertToType(data['actual'], Object);
            }
            if (data.hasOwnProperty('isSuccess')) {
                obj['isSuccess'] = ApiClient.convertToType(data['isSuccess'], 'Boolean');
            }
            if (data.hasOwnProperty('taskId')) {
                obj['taskId'] = ApiClient.convertToType(data['taskId'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssertionResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssertionResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AssertionResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }
        // ensure the json data is a string
        if (data['taskId'] && !(typeof data['taskId'] === 'string' || data['taskId'] instanceof String)) {
            throw new Error("Expected the field `taskId` to be a primitive type in the JSON string but got " + data['taskId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }

        return true;
    }


}

AssertionResult.RequiredProperties = ["operator", "expected", "actual", "isSuccess", "taskId", "description", "errorMessage"];

/**
 * @member {String} operator
 */
AssertionResult.prototype['operator'] = undefined;

/**
 * @member {Object} expected
 */
AssertionResult.prototype['expected'] = undefined;

/**
 * @member {Object} actual
 */
AssertionResult.prototype['actual'] = undefined;

/**
 * @member {Boolean} isSuccess
 */
AssertionResult.prototype['isSuccess'] = undefined;

/**
 * @member {String} taskId
 */
AssertionResult.prototype['taskId'] = undefined;

/**
 * @member {String} description
 */
AssertionResult.prototype['description'] = undefined;

/**
 * @member {String} errorMessage
 */
AssertionResult.prototype['errorMessage'] = undefined;






export default AssertionResult;

