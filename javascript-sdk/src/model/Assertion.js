/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PropertyBoolean from './PropertyBoolean';
import PropertyDouble from './PropertyDouble';
import PropertyListString from './PropertyListString';
import PropertyObject from './PropertyObject';
import PropertyString from './PropertyString';

/**
 * The Assertion model module.
 * @module model/Assertion
 * @version 1.0.0
 */
class Assertion {
    /**
     * Constructs a new <code>Assertion</code>.
     * @alias module:model/Assertion
     * @param value {module:model/PropertyObject} 
     */
    constructor(value) { 
        
        Assertion.initialize(this, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, value) { 
        obj['value'] = value;
    }

    /**
     * Constructs a <code>Assertion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Assertion} obj Optional instance to populate.
     * @return {module:model/Assertion} The populated <code>Assertion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Assertion();

            if (data.hasOwnProperty('value')) {
                obj['value'] = PropertyObject.constructFromObject(data['value']);
            }
            if (data.hasOwnProperty('taskId')) {
                obj['taskId'] = ApiClient.convertToType(data['taskId'], 'String');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = PropertyString.constructFromObject(data['errorMessage']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = PropertyString.constructFromObject(data['description']);
            }
            if (data.hasOwnProperty('endsWith')) {
                obj['endsWith'] = PropertyString.constructFromObject(data['endsWith']);
            }
            if (data.hasOwnProperty('startsWith')) {
                obj['startsWith'] = PropertyString.constructFromObject(data['startsWith']);
            }
            if (data.hasOwnProperty('contains')) {
                obj['contains'] = PropertyString.constructFromObject(data['contains']);
            }
            if (data.hasOwnProperty('equalTo')) {
                obj['equalTo'] = PropertyObject.constructFromObject(data['equalTo']);
            }
            if (data.hasOwnProperty('notEqualTo')) {
                obj['notEqualTo'] = PropertyObject.constructFromObject(data['notEqualTo']);
            }
            if (data.hasOwnProperty('greaterThan')) {
                obj['greaterThan'] = PropertyDouble.constructFromObject(data['greaterThan']);
            }
            if (data.hasOwnProperty('greaterThanOrEqualTo')) {
                obj['greaterThanOrEqualTo'] = PropertyDouble.constructFromObject(data['greaterThanOrEqualTo']);
            }
            if (data.hasOwnProperty('lessThan')) {
                obj['lessThan'] = PropertyDouble.constructFromObject(data['lessThan']);
            }
            if (data.hasOwnProperty('lessThanOrEqualTo')) {
                obj['lessThanOrEqualTo'] = PropertyDouble.constructFromObject(data['lessThanOrEqualTo']);
            }
            if (data.hasOwnProperty('in')) {
                obj['in'] = PropertyListString.constructFromObject(data['in']);
            }
            if (data.hasOwnProperty('notIn')) {
                obj['notIn'] = PropertyListString.constructFromObject(data['notIn']);
            }
            if (data.hasOwnProperty('isNull')) {
                obj['isNull'] = PropertyBoolean.constructFromObject(data['isNull']);
            }
            if (data.hasOwnProperty('isNotNull')) {
                obj['isNotNull'] = PropertyBoolean.constructFromObject(data['isNotNull']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Assertion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Assertion</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Assertion.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `value`
        if (data['value']) { // data not null
          PropertyObject.validateJSON(data['value']);
        }
        // ensure the json data is a string
        if (data['taskId'] && !(typeof data['taskId'] === 'string' || data['taskId'] instanceof String)) {
            throw new Error("Expected the field `taskId` to be a primitive type in the JSON string but got " + data['taskId']);
        }
        // validate the optional field `errorMessage`
        if (data['errorMessage']) { // data not null
          PropertyString.validateJSON(data['errorMessage']);
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          PropertyString.validateJSON(data['description']);
        }
        // validate the optional field `endsWith`
        if (data['endsWith']) { // data not null
          PropertyString.validateJSON(data['endsWith']);
        }
        // validate the optional field `startsWith`
        if (data['startsWith']) { // data not null
          PropertyString.validateJSON(data['startsWith']);
        }
        // validate the optional field `contains`
        if (data['contains']) { // data not null
          PropertyString.validateJSON(data['contains']);
        }
        // validate the optional field `equalTo`
        if (data['equalTo']) { // data not null
          PropertyObject.validateJSON(data['equalTo']);
        }
        // validate the optional field `notEqualTo`
        if (data['notEqualTo']) { // data not null
          PropertyObject.validateJSON(data['notEqualTo']);
        }
        // validate the optional field `greaterThan`
        if (data['greaterThan']) { // data not null
          PropertyDouble.validateJSON(data['greaterThan']);
        }
        // validate the optional field `greaterThanOrEqualTo`
        if (data['greaterThanOrEqualTo']) { // data not null
          PropertyDouble.validateJSON(data['greaterThanOrEqualTo']);
        }
        // validate the optional field `lessThan`
        if (data['lessThan']) { // data not null
          PropertyDouble.validateJSON(data['lessThan']);
        }
        // validate the optional field `lessThanOrEqualTo`
        if (data['lessThanOrEqualTo']) { // data not null
          PropertyDouble.validateJSON(data['lessThanOrEqualTo']);
        }
        // validate the optional field `in`
        if (data['in']) { // data not null
          PropertyListString.validateJSON(data['in']);
        }
        // validate the optional field `notIn`
        if (data['notIn']) { // data not null
          PropertyListString.validateJSON(data['notIn']);
        }
        // validate the optional field `isNull`
        if (data['isNull']) { // data not null
          PropertyBoolean.validateJSON(data['isNull']);
        }
        // validate the optional field `isNotNull`
        if (data['isNotNull']) { // data not null
          PropertyBoolean.validateJSON(data['isNotNull']);
        }

        return true;
    }


}

Assertion.RequiredProperties = ["value"];

/**
 * @member {module:model/PropertyObject} value
 */
Assertion.prototype['value'] = undefined;

/**
 * @member {String} taskId
 */
Assertion.prototype['taskId'] = undefined;

/**
 * @member {module:model/PropertyString} errorMessage
 */
Assertion.prototype['errorMessage'] = undefined;

/**
 * @member {module:model/PropertyString} description
 */
Assertion.prototype['description'] = undefined;

/**
 * @member {module:model/PropertyString} endsWith
 */
Assertion.prototype['endsWith'] = undefined;

/**
 * @member {module:model/PropertyString} startsWith
 */
Assertion.prototype['startsWith'] = undefined;

/**
 * @member {module:model/PropertyString} contains
 */
Assertion.prototype['contains'] = undefined;

/**
 * @member {module:model/PropertyObject} equalTo
 */
Assertion.prototype['equalTo'] = undefined;

/**
 * @member {module:model/PropertyObject} notEqualTo
 */
Assertion.prototype['notEqualTo'] = undefined;

/**
 * @member {module:model/PropertyDouble} greaterThan
 */
Assertion.prototype['greaterThan'] = undefined;

/**
 * @member {module:model/PropertyDouble} greaterThanOrEqualTo
 */
Assertion.prototype['greaterThanOrEqualTo'] = undefined;

/**
 * @member {module:model/PropertyDouble} lessThan
 */
Assertion.prototype['lessThan'] = undefined;

/**
 * @member {module:model/PropertyDouble} lessThanOrEqualTo
 */
Assertion.prototype['lessThanOrEqualTo'] = undefined;

/**
 * @member {module:model/PropertyListString} in
 */
Assertion.prototype['in'] = undefined;

/**
 * @member {module:model/PropertyListString} notIn
 */
Assertion.prototype['notIn'] = undefined;

/**
 * @member {module:model/PropertyBoolean} isNull
 */
Assertion.prototype['isNull'] = undefined;

/**
 * @member {module:model/PropertyBoolean} isNotNull
 */
Assertion.prototype['isNotNull'] = undefined;






export default Assertion;

