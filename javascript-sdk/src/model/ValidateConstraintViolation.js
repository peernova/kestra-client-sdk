/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ValidateConstraintViolation model module.
 * @module model/ValidateConstraintViolation
 * @version 1.0.0
 */
class ValidateConstraintViolation {
    /**
     * Constructs a new <code>ValidateConstraintViolation</code>.
     * @alias module:model/ValidateConstraintViolation
     * @param flow {String} 
     * @param namespace {String} 
     * @param index {Number} 
     * @param constraints {String} 
     * @param outdated {Boolean} 
     * @param deprecationPaths {Array.<String>} 
     * @param warnings {Array.<String>} 
     * @param infos {Array.<String>} 
     */
    constructor(flow, namespace, index, constraints, outdated, deprecationPaths, warnings, infos) { 
        
        ValidateConstraintViolation.initialize(this, flow, namespace, index, constraints, outdated, deprecationPaths, warnings, infos);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, flow, namespace, index, constraints, outdated, deprecationPaths, warnings, infos) { 
        obj['flow'] = flow;
        obj['namespace'] = namespace;
        obj['index'] = index;
        obj['constraints'] = constraints;
        obj['outdated'] = outdated;
        obj['deprecationPaths'] = deprecationPaths;
        obj['warnings'] = warnings;
        obj['infos'] = infos;
    }

    /**
     * Constructs a <code>ValidateConstraintViolation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ValidateConstraintViolation} obj Optional instance to populate.
     * @return {module:model/ValidateConstraintViolation} The populated <code>ValidateConstraintViolation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ValidateConstraintViolation();

            if (data.hasOwnProperty('flow')) {
                obj['flow'] = ApiClient.convertToType(data['flow'], 'String');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = ApiClient.convertToType(data['constraints'], 'String');
            }
            if (data.hasOwnProperty('outdated')) {
                obj['outdated'] = ApiClient.convertToType(data['outdated'], 'Boolean');
            }
            if (data.hasOwnProperty('deprecationPaths')) {
                obj['deprecationPaths'] = ApiClient.convertToType(data['deprecationPaths'], ['String']);
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], ['String']);
            }
            if (data.hasOwnProperty('infos')) {
                obj['infos'] = ApiClient.convertToType(data['infos'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ValidateConstraintViolation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ValidateConstraintViolation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ValidateConstraintViolation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['flow'] && !(typeof data['flow'] === 'string' || data['flow'] instanceof String)) {
            throw new Error("Expected the field `flow` to be a primitive type in the JSON string but got " + data['flow']);
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // ensure the json data is a string
        if (data['constraints'] && !(typeof data['constraints'] === 'string' || data['constraints'] instanceof String)) {
            throw new Error("Expected the field `constraints` to be a primitive type in the JSON string but got " + data['constraints']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['deprecationPaths'])) {
            throw new Error("Expected the field `deprecationPaths` to be an array in the JSON data but got " + data['deprecationPaths']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['warnings'])) {
            throw new Error("Expected the field `warnings` to be an array in the JSON data but got " + data['warnings']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['infos'])) {
            throw new Error("Expected the field `infos` to be an array in the JSON data but got " + data['infos']);
        }

        return true;
    }


}

ValidateConstraintViolation.RequiredProperties = ["flow", "namespace", "index", "constraints", "outdated", "deprecationPaths", "warnings", "infos"];

/**
 * @member {String} flow
 */
ValidateConstraintViolation.prototype['flow'] = undefined;

/**
 * @member {String} namespace
 */
ValidateConstraintViolation.prototype['namespace'] = undefined;

/**
 * @member {Number} index
 */
ValidateConstraintViolation.prototype['index'] = undefined;

/**
 * @member {String} constraints
 */
ValidateConstraintViolation.prototype['constraints'] = undefined;

/**
 * @member {Boolean} outdated
 */
ValidateConstraintViolation.prototype['outdated'] = undefined;

/**
 * @member {Array.<String>} deprecationPaths
 */
ValidateConstraintViolation.prototype['deprecationPaths'] = undefined;

/**
 * @member {Array.<String>} warnings
 */
ValidateConstraintViolation.prototype['warnings'] = undefined;

/**
 * @member {Array.<String>} infos
 */
ValidateConstraintViolation.prototype['infos'] = undefined;






export default ValidateConstraintViolation;

