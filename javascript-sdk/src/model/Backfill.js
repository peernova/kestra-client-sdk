/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Label from './Label';

/**
 * The Backfill model module.
 * @module model/Backfill
 * @version 1.0.0
 */
class Backfill {
    /**
     * Constructs a new <code>Backfill</code>.
     * @alias module:model/Backfill
     * @param start {Date} 
     */
    constructor(start) { 
        
        Backfill.initialize(this, start);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, start) { 
        obj['start'] = start;
    }

    /**
     * Constructs a <code>Backfill</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Backfill} obj Optional instance to populate.
     * @return {module:model/Backfill} The populated <code>Backfill</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Backfill();

            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Date');
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'Date');
            }
            if (data.hasOwnProperty('currentDate')) {
                obj['currentDate'] = ApiClient.convertToType(data['currentDate'], 'Date');
            }
            if (data.hasOwnProperty('paused')) {
                obj['paused'] = ApiClient.convertToType(data['paused'], 'Boolean');
            }
            if (data.hasOwnProperty('inputs')) {
                obj['inputs'] = ApiClient.convertToType(data['inputs'], {'String': Object});
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [Label]);
            }
            if (data.hasOwnProperty('previousNextExecutionDate')) {
                obj['previousNextExecutionDate'] = ApiClient.convertToType(data['previousNextExecutionDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Backfill</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Backfill</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Backfill.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                Label.validateJSON(item);
            };
        }

        return true;
    }


}

Backfill.RequiredProperties = ["start"];

/**
 * @member {Date} start
 */
Backfill.prototype['start'] = undefined;

/**
 * @member {Date} end
 */
Backfill.prototype['end'] = undefined;

/**
 * @member {Date} currentDate
 */
Backfill.prototype['currentDate'] = undefined;

/**
 * @member {Boolean} paused
 */
Backfill.prototype['paused'] = undefined;

/**
 * @member {Object.<String, Object>} inputs
 */
Backfill.prototype['inputs'] = undefined;

/**
 * @member {Array.<module:model/Label>} labels
 */
Backfill.prototype['labels'] = undefined;

/**
 * @member {Date} previousNextExecutionDate
 */
Backfill.prototype['previousNextExecutionDate'] = undefined;






export default Backfill;

