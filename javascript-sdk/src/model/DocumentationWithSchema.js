/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PluginSchema from './PluginSchema';

/**
 * The DocumentationWithSchema model module.
 * @module model/DocumentationWithSchema
 * @version 1.0.0
 */
class DocumentationWithSchema {
    /**
     * Constructs a new <code>DocumentationWithSchema</code>.
     * @alias module:model/DocumentationWithSchema
     */
    constructor() { 
        
        DocumentationWithSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DocumentationWithSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentationWithSchema} obj Optional instance to populate.
     * @return {module:model/DocumentationWithSchema} The populated <code>DocumentationWithSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentationWithSchema();

            if (data.hasOwnProperty('markdown')) {
                obj['markdown'] = ApiClient.convertToType(data['markdown'], 'String');
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = PluginSchema.constructFromObject(data['schema']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentationWithSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentationWithSchema</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['markdown'] && !(typeof data['markdown'] === 'string' || data['markdown'] instanceof String)) {
            throw new Error("Expected the field `markdown` to be a primitive type in the JSON string but got " + data['markdown']);
        }
        // validate the optional field `schema`
        if (data['schema']) { // data not null
          PluginSchema.validateJSON(data['schema']);
        }

        return true;
    }


}



/**
 * @member {String} markdown
 */
DocumentationWithSchema.prototype['markdown'] = undefined;

/**
 * @member {module:model/PluginSchema} schema
 */
DocumentationWithSchema.prototype['schema'] = undefined;






export default DocumentationWithSchema;

