/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AbstractTrigger from './AbstractTrigger';
import Concurrency from './Concurrency';
import Flow from './Flow';
import FlowAllOfLabels from './FlowAllOfLabels';
import FlowWithSource from './FlowWithSource';
import InputObject from './InputObject';
import Listener from './Listener';
import Output from './Output';
import PluginDefault from './PluginDefault';
import SLA from './SLA';
import Task from './Task';
import WorkerGroup from './WorkerGroup';

/**
 * The UpdateFlow200Response model module.
 * @module model/UpdateFlow200Response
 * @version 1.0.0
 */
class UpdateFlow200Response {
    /**
     * Constructs a new <code>UpdateFlow200Response</code>.
     * @alias module:model/UpdateFlow200Response
     * @param {(module:model/Flow|module:model/FlowWithSource)} instance The actual instance to initialize UpdateFlow200Response.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "FlowWithSource") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                FlowWithSource.validateJSON(instance); // throw an exception if no match
                // create FlowWithSource from JS object
                this.actualInstance = FlowWithSource.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into FlowWithSource
            errorMessages.push("Failed to construct FlowWithSource: " + err)
        }

        try {
            if (typeof instance === "Flow") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Flow.validateJSON(instance); // throw an exception if no match
                // create Flow from JS object
                this.actualInstance = Flow.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Flow
            errorMessages.push("Failed to construct Flow: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `UpdateFlow200Response` with oneOf schemas Flow, FlowWithSource. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `UpdateFlow200Response` with oneOf schemas Flow, FlowWithSource. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>UpdateFlow200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateFlow200Response} obj Optional instance to populate.
     * @return {module:model/UpdateFlow200Response} The populated <code>UpdateFlow200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        return new UpdateFlow200Response(data);
    }

    /**
     * Gets the actual instance, which can be <code>Flow</code>, <code>FlowWithSource</code>.
     * @return {(module:model/Flow|module:model/FlowWithSource)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>Flow</code>, <code>FlowWithSource</code>.
     * @param {(module:model/Flow|module:model/FlowWithSource)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = UpdateFlow200Response.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of UpdateFlow200Response from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/UpdateFlow200Response} An instance of UpdateFlow200Response.
     */
    static fromJSON = function(json_string){
        return UpdateFlow200Response.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {String} id
 */
UpdateFlow200Response.prototype['id'] = undefined;

/**
 * @member {String} namespace
 */
UpdateFlow200Response.prototype['namespace'] = undefined;

/**
 * @member {Number} revision
 */
UpdateFlow200Response.prototype['revision'] = undefined;

/**
 * @member {String} description
 */
UpdateFlow200Response.prototype['description'] = undefined;

/**
 * @member {Array.<module:model/InputObject>} inputs
 */
UpdateFlow200Response.prototype['inputs'] = undefined;

/**
 * Output values make information about the execution of your Flow available and expose for other Kestra flows to use. Output values are similar to return values in programming languages.
 * @member {Array.<module:model/Output>} outputs
 */
UpdateFlow200Response.prototype['outputs'] = undefined;

/**
 * @member {Boolean} disabled
 */
UpdateFlow200Response.prototype['disabled'] = undefined;

/**
 * @member {module:model/FlowAllOfLabels} labels
 */
UpdateFlow200Response.prototype['labels'] = undefined;

/**
 * @member {Object.<String, Object>} variables
 */
UpdateFlow200Response.prototype['variables'] = undefined;

/**
 * @member {module:model/WorkerGroup} workerGroup
 */
UpdateFlow200Response.prototype['workerGroup'] = undefined;

/**
 * @member {Boolean} deleted
 */
UpdateFlow200Response.prototype['deleted'] = undefined;

/**
 * @member {Array.<module:model/Task>} finally
 */
UpdateFlow200Response.prototype['finally'] = undefined;

/**
 * @member {Array.<module:model/PluginDefault>} taskDefaults
 */
UpdateFlow200Response.prototype['taskDefaults'] = undefined;

/**
 * @member {Array.<module:model/Task>} tasks
 */
UpdateFlow200Response.prototype['tasks'] = undefined;

/**
 * @member {Array.<module:model/Task>} errors
 */
UpdateFlow200Response.prototype['errors'] = undefined;

/**
 * @member {Array.<module:model/Listener>} listeners
 */
UpdateFlow200Response.prototype['listeners'] = undefined;

/**
 * @member {Array.<module:model/Task>} afterExecution
 */
UpdateFlow200Response.prototype['afterExecution'] = undefined;

/**
 * @member {Array.<module:model/AbstractTrigger>} triggers
 */
UpdateFlow200Response.prototype['triggers'] = undefined;

/**
 * @member {Array.<module:model/PluginDefault>} pluginDefaults
 */
UpdateFlow200Response.prototype['pluginDefaults'] = undefined;

/**
 * @member {module:model/Concurrency} concurrency
 */
UpdateFlow200Response.prototype['concurrency'] = undefined;

/**
 * @member {Object} retry
 */
UpdateFlow200Response.prototype['retry'] = undefined;

/**
 * @member {Array.<module:model/SLA>} sla
 */
UpdateFlow200Response.prototype['sla'] = undefined;


UpdateFlow200Response.OneOf = ["Flow", "FlowWithSource"];

export default UpdateFlow200Response;

