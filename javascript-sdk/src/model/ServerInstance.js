/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Metric from './Metric';
import ServerInstanceType from './ServerInstanceType';

/**
 * The ServerInstance model module.
 * @module model/ServerInstance
 * @version 1.0.0
 */
class ServerInstance {
    /**
     * Constructs a new <code>ServerInstance</code>.
     * @alias module:model/ServerInstance
     * @param id {String} 
     * @param type {module:model/ServerInstanceType} 
     * @param version {String} 
     * @param hostname {String} 
     * @param props {Object.<String, Object>} 
     * @param metrics {Array.<module:model/Metric>} 
     */
    constructor(id, type, version, hostname, props, metrics) { 
        
        ServerInstance.initialize(this, id, type, version, hostname, props, metrics);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, type, version, hostname, props, metrics) { 
        obj['id'] = id;
        obj['type'] = type;
        obj['version'] = version;
        obj['hostname'] = hostname;
        obj['props'] = props;
        obj['metrics'] = metrics;
    }

    /**
     * Constructs a <code>ServerInstance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServerInstance} obj Optional instance to populate.
     * @return {module:model/ServerInstance} The populated <code>ServerInstance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServerInstance();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ServerInstanceType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('hostname')) {
                obj['hostname'] = ApiClient.convertToType(data['hostname'], 'String');
            }
            if (data.hasOwnProperty('props')) {
                obj['props'] = ApiClient.convertToType(data['props'], {'String': Object});
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], [Metric]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServerInstance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServerInstance</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServerInstance.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['hostname'] && !(typeof data['hostname'] === 'string' || data['hostname'] instanceof String)) {
            throw new Error("Expected the field `hostname` to be a primitive type in the JSON string but got " + data['hostname']);
        }
        if (data['metrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metrics'])) {
                throw new Error("Expected the field `metrics` to be an array in the JSON data but got " + data['metrics']);
            }
            // validate the optional field `metrics` (array)
            for (const item of data['metrics']) {
                Metric.validateJSON(item);
            };
        }

        return true;
    }


}

ServerInstance.RequiredProperties = ["id", "type", "version", "hostname", "props", "metrics"];

/**
 * @member {String} id
 */
ServerInstance.prototype['id'] = undefined;

/**
 * @member {module:model/ServerInstanceType} type
 */
ServerInstance.prototype['type'] = undefined;

/**
 * @member {String} version
 */
ServerInstance.prototype['version'] = undefined;

/**
 * @member {String} hostname
 */
ServerInstance.prototype['hostname'] = undefined;

/**
 * @member {Object.<String, Object>} props
 */
ServerInstance.prototype['props'] = undefined;

/**
 * @member {Array.<module:model/Metric>} metrics
 */
ServerInstance.prototype['metrics'] = undefined;






export default ServerInstance;

