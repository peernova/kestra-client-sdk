/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AbstractMetricEntryObject from './AbstractMetricEntryObject';
import State from './State';

/**
 * The TaskRunAttempt model module.
 * @module model/TaskRunAttempt
 * @version 1.0.0
 */
class TaskRunAttempt {
    /**
     * Constructs a new <code>TaskRunAttempt</code>.
     * @alias module:model/TaskRunAttempt
     * @param state {module:model/State} 
     */
    constructor(state) { 
        
        TaskRunAttempt.initialize(this, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, state) { 
        obj['state'] = state;
    }

    /**
     * Constructs a <code>TaskRunAttempt</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskRunAttempt} obj Optional instance to populate.
     * @return {module:model/TaskRunAttempt} The populated <code>TaskRunAttempt</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskRunAttempt();

            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], [AbstractMetricEntryObject]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = State.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('workerId')) {
                obj['workerId'] = ApiClient.convertToType(data['workerId'], 'String');
            }
            if (data.hasOwnProperty('logFile')) {
                obj['logFile'] = ApiClient.convertToType(data['logFile'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskRunAttempt</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskRunAttempt</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TaskRunAttempt.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['metrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metrics'])) {
                throw new Error("Expected the field `metrics` to be an array in the JSON data but got " + data['metrics']);
            }
            // validate the optional field `metrics` (array)
            for (const item of data['metrics']) {
                AbstractMetricEntryObject.validateJSON(item);
            };
        }
        // validate the optional field `state`
        if (data['state']) { // data not null
          State.validateJSON(data['state']);
        }
        // ensure the json data is a string
        if (data['workerId'] && !(typeof data['workerId'] === 'string' || data['workerId'] instanceof String)) {
            throw new Error("Expected the field `workerId` to be a primitive type in the JSON string but got " + data['workerId']);
        }
        // ensure the json data is a string
        if (data['logFile'] && !(typeof data['logFile'] === 'string' || data['logFile'] instanceof String)) {
            throw new Error("Expected the field `logFile` to be a primitive type in the JSON string but got " + data['logFile']);
        }

        return true;
    }


}

TaskRunAttempt.RequiredProperties = ["state"];

/**
 * @member {Array.<module:model/AbstractMetricEntryObject>} metrics
 */
TaskRunAttempt.prototype['metrics'] = undefined;

/**
 * @member {module:model/State} state
 */
TaskRunAttempt.prototype['state'] = undefined;

/**
 * @member {String} workerId
 */
TaskRunAttempt.prototype['workerId'] = undefined;

/**
 * @member {String} logFile
 */
TaskRunAttempt.prototype['logFile'] = undefined;






export default TaskRunAttempt;

