/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Metric from './Metric';
import ServerConfig from './ServerConfig';
import ServerInstance from './ServerInstance';
import ServiceInstanceTimestampedEvent from './ServiceInstanceTimestampedEvent';
import ServiceServiceState from './ServiceServiceState';
import ServiceType from './ServiceType';

/**
 * The ServiceInstance model module.
 * @module model/ServiceInstance
 * @version 1.0.0
 */
class ServiceInstance {
    /**
     * Constructs a new <code>ServiceInstance</code>.
     * @alias module:model/ServiceInstance
     * @param server {module:model/ServerInstance} 
     * @param metrics {Array.<module:model/Metric>} 
     * @param state {module:model/ServiceServiceState} 
     * @param id {String} 
     * @param type {module:model/ServiceType} 
     * @param createdAt {Date} 
     * @param updatedAt {Date} 
     * @param events {Array.<module:model/ServiceInstanceTimestampedEvent>} 
     * @param config {module:model/ServerConfig} 
     * @param props {Object.<String, Object>} 
     * @param seqId {Number} 
     */
    constructor(server, metrics, state, id, type, createdAt, updatedAt, events, config, props, seqId) { 
        
        ServiceInstance.initialize(this, server, metrics, state, id, type, createdAt, updatedAt, events, config, props, seqId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, server, metrics, state, id, type, createdAt, updatedAt, events, config, props, seqId) { 
        obj['server'] = server;
        obj['metrics'] = metrics;
        obj['state'] = state;
        obj['id'] = id;
        obj['type'] = type;
        obj['createdAt'] = createdAt;
        obj['updatedAt'] = updatedAt;
        obj['events'] = events;
        obj['config'] = config;
        obj['props'] = props;
        obj['seqId'] = seqId;
    }

    /**
     * Constructs a <code>ServiceInstance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceInstance} obj Optional instance to populate.
     * @return {module:model/ServiceInstance} The populated <code>ServiceInstance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceInstance();

            if (data.hasOwnProperty('server')) {
                obj['server'] = ServerInstance.constructFromObject(data['server']);
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], [Metric]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ServiceServiceState.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ServiceType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], [ServiceInstanceTimestampedEvent]);
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = ServerConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('props')) {
                obj['props'] = ApiClient.convertToType(data['props'], {'String': Object});
            }
            if (data.hasOwnProperty('seqId')) {
                obj['seqId'] = ApiClient.convertToType(data['seqId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceInstance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceInstance</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServiceInstance.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `server`
        if (data['server']) { // data not null
          ServerInstance.validateJSON(data['server']);
        }
        if (data['metrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metrics'])) {
                throw new Error("Expected the field `metrics` to be an array in the JSON data but got " + data['metrics']);
            }
            // validate the optional field `metrics` (array)
            for (const item of data['metrics']) {
                Metric.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['events']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['events'])) {
                throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
            }
            // validate the optional field `events` (array)
            for (const item of data['events']) {
                ServiceInstanceTimestampedEvent.validateJSON(item);
            };
        }
        // validate the optional field `config`
        if (data['config']) { // data not null
          ServerConfig.validateJSON(data['config']);
        }

        return true;
    }


}

ServiceInstance.RequiredProperties = ["server", "metrics", "state", "id", "type", "createdAt", "updatedAt", "events", "config", "props", "seqId"];

/**
 * @member {module:model/ServerInstance} server
 */
ServiceInstance.prototype['server'] = undefined;

/**
 * @member {Array.<module:model/Metric>} metrics
 */
ServiceInstance.prototype['metrics'] = undefined;

/**
 * @member {module:model/ServiceServiceState} state
 */
ServiceInstance.prototype['state'] = undefined;

/**
 * @member {String} id
 */
ServiceInstance.prototype['id'] = undefined;

/**
 * @member {module:model/ServiceType} type
 */
ServiceInstance.prototype['type'] = undefined;

/**
 * @member {Date} createdAt
 */
ServiceInstance.prototype['createdAt'] = undefined;

/**
 * @member {Date} updatedAt
 */
ServiceInstance.prototype['updatedAt'] = undefined;

/**
 * @member {Array.<module:model/ServiceInstanceTimestampedEvent>} events
 */
ServiceInstance.prototype['events'] = undefined;

/**
 * @member {module:model/ServerConfig} config
 */
ServiceInstance.prototype['config'] = undefined;

/**
 * @member {Object.<String, Object>} props
 */
ServiceInstance.prototype['props'] = undefined;

/**
 * @member {Number} seqId
 */
ServiceInstance.prototype['seqId'] = undefined;






export default ServiceInstance;

