/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IdentityProvider model module.
 * @module model/IdentityProvider
 * @version 1.0.0
 */
class IdentityProvider {
    /**
     * Constructs a new <code>IdentityProvider</code>.
     * @alias module:model/IdentityProvider
     * @param attributes {Object.<String, Object>} 
     * @param externalId {String} 
     * @param securityIntegrationId {String} 
     * @param securityIntegrationName {String} 
     */
    constructor(attributes, externalId, securityIntegrationId, securityIntegrationName) { 
        
        IdentityProvider.initialize(this, attributes, externalId, securityIntegrationId, securityIntegrationName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attributes, externalId, securityIntegrationId, securityIntegrationName) { 
        obj['attributes'] = attributes;
        obj['externalId'] = externalId;
        obj['securityIntegrationId'] = securityIntegrationId;
        obj['securityIntegrationName'] = securityIntegrationName;
    }

    /**
     * Constructs a <code>IdentityProvider</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IdentityProvider} obj Optional instance to populate.
     * @return {module:model/IdentityProvider} The populated <code>IdentityProvider</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IdentityProvider();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], {'String': Object});
            }
            if (data.hasOwnProperty('externalId')) {
                obj['externalId'] = ApiClient.convertToType(data['externalId'], 'String');
            }
            if (data.hasOwnProperty('securityIntegrationId')) {
                obj['securityIntegrationId'] = ApiClient.convertToType(data['securityIntegrationId'], 'String');
            }
            if (data.hasOwnProperty('securityIntegrationName')) {
                obj['securityIntegrationName'] = ApiClient.convertToType(data['securityIntegrationName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IdentityProvider</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IdentityProvider</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IdentityProvider.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['externalId'] && !(typeof data['externalId'] === 'string' || data['externalId'] instanceof String)) {
            throw new Error("Expected the field `externalId` to be a primitive type in the JSON string but got " + data['externalId']);
        }
        // ensure the json data is a string
        if (data['securityIntegrationId'] && !(typeof data['securityIntegrationId'] === 'string' || data['securityIntegrationId'] instanceof String)) {
            throw new Error("Expected the field `securityIntegrationId` to be a primitive type in the JSON string but got " + data['securityIntegrationId']);
        }
        // ensure the json data is a string
        if (data['securityIntegrationName'] && !(typeof data['securityIntegrationName'] === 'string' || data['securityIntegrationName'] instanceof String)) {
            throw new Error("Expected the field `securityIntegrationName` to be a primitive type in the JSON string but got " + data['securityIntegrationName']);
        }

        return true;
    }


}

IdentityProvider.RequiredProperties = ["attributes", "externalId", "securityIntegrationId", "securityIntegrationName"];

/**
 * @member {Object.<String, Object>} attributes
 */
IdentityProvider.prototype['attributes'] = undefined;

/**
 * @member {String} externalId
 */
IdentityProvider.prototype['externalId'] = undefined;

/**
 * @member {String} securityIntegrationId
 */
IdentityProvider.prototype['securityIntegrationId'] = undefined;

/**
 * @member {String} securityIntegrationName
 */
IdentityProvider.prototype['securityIntegrationName'] = undefined;






export default IdentityProvider;

