/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiTenantSummary from './ApiTenantSummary';
import IAMUserControllerApiUserAuth from './IAMUserControllerApiUserAuth';

/**
 * The IAMUserControllerApiUserSummary model module.
 * @module model/IAMUserControllerApiUserSummary
 * @version 1.0.0
 */
class IAMUserControllerApiUserSummary {
    /**
     * Constructs a new <code>IAMUserControllerApiUserSummary</code>.
     * @alias module:model/IAMUserControllerApiUserSummary
     * @param id {String} 
     * @param username {String} 
     * @param displayName {String} 
     * @param tenants {Array.<module:model/ApiTenantSummary>} 
     * @param auths {Array.<module:model/IAMUserControllerApiUserAuth>} 
     * @param superAdmin {Boolean} 
     */
    constructor(id, username, displayName, tenants, auths, superAdmin) { 
        
        IAMUserControllerApiUserSummary.initialize(this, id, username, displayName, tenants, auths, superAdmin);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, username, displayName, tenants, auths, superAdmin) { 
        obj['id'] = id;
        obj['username'] = username;
        obj['displayName'] = displayName;
        obj['tenants'] = tenants;
        obj['auths'] = auths;
        obj['superAdmin'] = superAdmin;
    }

    /**
     * Constructs a <code>IAMUserControllerApiUserSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IAMUserControllerApiUserSummary} obj Optional instance to populate.
     * @return {module:model/IAMUserControllerApiUserSummary} The populated <code>IAMUserControllerApiUserSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IAMUserControllerApiUserSummary();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('tenants')) {
                obj['tenants'] = ApiClient.convertToType(data['tenants'], [ApiTenantSummary]);
            }
            if (data.hasOwnProperty('auths')) {
                obj['auths'] = ApiClient.convertToType(data['auths'], [IAMUserControllerApiUserAuth]);
            }
            if (data.hasOwnProperty('superAdmin')) {
                obj['superAdmin'] = ApiClient.convertToType(data['superAdmin'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IAMUserControllerApiUserSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IAMUserControllerApiUserSummary</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IAMUserControllerApiUserSummary.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['tenants']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tenants'])) {
                throw new Error("Expected the field `tenants` to be an array in the JSON data but got " + data['tenants']);
            }
            // validate the optional field `tenants` (array)
            for (const item of data['tenants']) {
                ApiTenantSummary.validateJSON(item);
            };
        }
        if (data['auths']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['auths'])) {
                throw new Error("Expected the field `auths` to be an array in the JSON data but got " + data['auths']);
            }
            // validate the optional field `auths` (array)
            for (const item of data['auths']) {
                IAMUserControllerApiUserAuth.validateJSON(item);
            };
        }

        return true;
    }


}

IAMUserControllerApiUserSummary.RequiredProperties = ["id", "username", "displayName", "tenants", "auths", "superAdmin"];

/**
 * @member {String} id
 */
IAMUserControllerApiUserSummary.prototype['id'] = undefined;

/**
 * @member {String} username
 */
IAMUserControllerApiUserSummary.prototype['username'] = undefined;

/**
 * @member {String} displayName
 */
IAMUserControllerApiUserSummary.prototype['displayName'] = undefined;

/**
 * @member {Array.<module:model/ApiTenantSummary>} tenants
 */
IAMUserControllerApiUserSummary.prototype['tenants'] = undefined;

/**
 * @member {Array.<module:model/IAMUserControllerApiUserAuth>} auths
 */
IAMUserControllerApiUserSummary.prototype['auths'] = undefined;

/**
 * @member {Boolean} superAdmin
 */
IAMUserControllerApiUserSummary.prototype['superAdmin'] = undefined;






export default IAMUserControllerApiUserSummary;

