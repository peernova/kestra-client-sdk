/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Breakpoint from './Breakpoint';
import ExecutionKind from './ExecutionKind';
import ExecutionMetadata from './ExecutionMetadata';
import ExecutionTrigger from './ExecutionTrigger';
import Label from './Label';
import State from './State';
import TaskFixture from './TaskFixture';
import TaskRun from './TaskRun';

/**
 * The Execution model module.
 * @module model/Execution
 * @version 1.0.0
 */
class Execution {
    /**
     * Constructs a new <code>Execution</code>.
     * @alias module:model/Execution
     * @param labels {Array.<module:model/Label>} 
     * @param id {String} 
     * @param namespace {String} 
     * @param flowId {String} 
     * @param flowRevision {Number} 
     * @param taskRunList {Array.<module:model/TaskRun>} 
     * @param inputs {Object.<String, Object>} 
     * @param outputs {Object.<String, Object>} 
     * @param variables {Object.<String, Object>} 
     * @param state {module:model/State} 
     * @param parentId {String} 
     * @param originalId {String} 
     * @param trigger {module:model/ExecutionTrigger} 
     * @param deleted {Boolean} 
     * @param metadata {module:model/ExecutionMetadata} 
     * @param traceParent {String} 
     */
    constructor(labels, id, namespace, flowId, flowRevision, taskRunList, inputs, outputs, variables, state, parentId, originalId, trigger, deleted, metadata, traceParent) { 
        
        Execution.initialize(this, labels, id, namespace, flowId, flowRevision, taskRunList, inputs, outputs, variables, state, parentId, originalId, trigger, deleted, metadata, traceParent);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, labels, id, namespace, flowId, flowRevision, taskRunList, inputs, outputs, variables, state, parentId, originalId, trigger, deleted, metadata, traceParent) { 
        obj['labels'] = labels;
        obj['id'] = id;
        obj['namespace'] = namespace;
        obj['flowId'] = flowId;
        obj['flowRevision'] = flowRevision;
        obj['taskRunList'] = taskRunList;
        obj['inputs'] = inputs;
        obj['outputs'] = outputs;
        obj['variables'] = variables;
        obj['state'] = state;
        obj['parentId'] = parentId;
        obj['originalId'] = originalId;
        obj['trigger'] = trigger;
        obj['deleted'] = deleted;
        obj['metadata'] = metadata;
        obj['traceParent'] = traceParent;
    }

    /**
     * Constructs a <code>Execution</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Execution} obj Optional instance to populate.
     * @return {module:model/Execution} The populated <code>Execution</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Execution();

            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [Label]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('flowId')) {
                obj['flowId'] = ApiClient.convertToType(data['flowId'], 'String');
            }
            if (data.hasOwnProperty('flowRevision')) {
                obj['flowRevision'] = ApiClient.convertToType(data['flowRevision'], 'Number');
            }
            if (data.hasOwnProperty('taskRunList')) {
                obj['taskRunList'] = ApiClient.convertToType(data['taskRunList'], [TaskRun]);
            }
            if (data.hasOwnProperty('inputs')) {
                obj['inputs'] = ApiClient.convertToType(data['inputs'], {'String': Object});
            }
            if (data.hasOwnProperty('outputs')) {
                obj['outputs'] = ApiClient.convertToType(data['outputs'], {'String': Object});
            }
            if (data.hasOwnProperty('variables')) {
                obj['variables'] = ApiClient.convertToType(data['variables'], {'String': Object});
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = State.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], 'String');
            }
            if (data.hasOwnProperty('originalId')) {
                obj['originalId'] = ApiClient.convertToType(data['originalId'], 'String');
            }
            if (data.hasOwnProperty('trigger')) {
                obj['trigger'] = ExecutionTrigger.constructFromObject(data['trigger']);
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ExecutionMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('scheduleDate')) {
                obj['scheduleDate'] = ApiClient.convertToType(data['scheduleDate'], 'Date');
            }
            if (data.hasOwnProperty('traceParent')) {
                obj['traceParent'] = ApiClient.convertToType(data['traceParent'], 'String');
            }
            if (data.hasOwnProperty('fixtures')) {
                obj['fixtures'] = ApiClient.convertToType(data['fixtures'], [TaskFixture]);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], ExecutionKind);
            }
            if (data.hasOwnProperty('breakpoints')) {
                obj['breakpoints'] = ApiClient.convertToType(data['breakpoints'], [Breakpoint]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Execution</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Execution</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Execution.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                Label.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // ensure the json data is a string
        if (data['flowId'] && !(typeof data['flowId'] === 'string' || data['flowId'] instanceof String)) {
            throw new Error("Expected the field `flowId` to be a primitive type in the JSON string but got " + data['flowId']);
        }
        if (data['taskRunList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taskRunList'])) {
                throw new Error("Expected the field `taskRunList` to be an array in the JSON data but got " + data['taskRunList']);
            }
            // validate the optional field `taskRunList` (array)
            for (const item of data['taskRunList']) {
                TaskRun.validateJSON(item);
            };
        }
        // validate the optional field `state`
        if (data['state']) { // data not null
          State.validateJSON(data['state']);
        }
        // ensure the json data is a string
        if (data['parentId'] && !(typeof data['parentId'] === 'string' || data['parentId'] instanceof String)) {
            throw new Error("Expected the field `parentId` to be a primitive type in the JSON string but got " + data['parentId']);
        }
        // ensure the json data is a string
        if (data['originalId'] && !(typeof data['originalId'] === 'string' || data['originalId'] instanceof String)) {
            throw new Error("Expected the field `originalId` to be a primitive type in the JSON string but got " + data['originalId']);
        }
        // validate the optional field `trigger`
        if (data['trigger']) { // data not null
          ExecutionTrigger.validateJSON(data['trigger']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          ExecutionMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['traceParent'] && !(typeof data['traceParent'] === 'string' || data['traceParent'] instanceof String)) {
            throw new Error("Expected the field `traceParent` to be a primitive type in the JSON string but got " + data['traceParent']);
        }
        if (data['fixtures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fixtures'])) {
                throw new Error("Expected the field `fixtures` to be an array in the JSON data but got " + data['fixtures']);
            }
            // validate the optional field `fixtures` (array)
            for (const item of data['fixtures']) {
                TaskFixture.validateJSON(item);
            };
        }
        if (data['breakpoints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['breakpoints'])) {
                throw new Error("Expected the field `breakpoints` to be an array in the JSON data but got " + data['breakpoints']);
            }
            // validate the optional field `breakpoints` (array)
            for (const item of data['breakpoints']) {
                Breakpoint.validateJSON(item);
            };
        }

        return true;
    }


}

Execution.RequiredProperties = ["labels", "id", "namespace", "flowId", "flowRevision", "taskRunList", "inputs", "outputs", "variables", "state", "parentId", "originalId", "trigger", "deleted", "metadata", "traceParent"];

/**
 * @member {Array.<module:model/Label>} labels
 */
Execution.prototype['labels'] = undefined;

/**
 * @member {String} id
 */
Execution.prototype['id'] = undefined;

/**
 * @member {String} namespace
 */
Execution.prototype['namespace'] = undefined;

/**
 * @member {String} flowId
 */
Execution.prototype['flowId'] = undefined;

/**
 * @member {Number} flowRevision
 */
Execution.prototype['flowRevision'] = undefined;

/**
 * @member {Array.<module:model/TaskRun>} taskRunList
 */
Execution.prototype['taskRunList'] = undefined;

/**
 * @member {Object.<String, Object>} inputs
 */
Execution.prototype['inputs'] = undefined;

/**
 * @member {Object.<String, Object>} outputs
 */
Execution.prototype['outputs'] = undefined;

/**
 * @member {Object.<String, Object>} variables
 */
Execution.prototype['variables'] = undefined;

/**
 * @member {module:model/State} state
 */
Execution.prototype['state'] = undefined;

/**
 * @member {String} parentId
 */
Execution.prototype['parentId'] = undefined;

/**
 * @member {String} originalId
 */
Execution.prototype['originalId'] = undefined;

/**
 * @member {module:model/ExecutionTrigger} trigger
 */
Execution.prototype['trigger'] = undefined;

/**
 * @member {Boolean} deleted
 */
Execution.prototype['deleted'] = undefined;

/**
 * @member {module:model/ExecutionMetadata} metadata
 */
Execution.prototype['metadata'] = undefined;

/**
 * @member {Date} scheduleDate
 */
Execution.prototype['scheduleDate'] = undefined;

/**
 * @member {String} traceParent
 */
Execution.prototype['traceParent'] = undefined;

/**
 * @member {Array.<module:model/TaskFixture>} fixtures
 */
Execution.prototype['fixtures'] = undefined;

/**
 * @member {module:model/ExecutionKind} kind
 */
Execution.prototype['kind'] = undefined;

/**
 * @member {Array.<module:model/Breakpoint>} breakpoints
 */
Execution.prototype['breakpoints'] = undefined;






export default Execution;

