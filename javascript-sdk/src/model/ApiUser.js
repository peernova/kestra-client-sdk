/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AbstractUser from './AbstractUser';
import AbstractUserTenantIdentityProvider from './AbstractUserTenantIdentityProvider';
import ApiAuth from './ApiAuth';
import GroupIdentifier from './GroupIdentifier';
import UserType from './UserType';

/**
 * The ApiUser model module.
 * @module model/ApiUser
 * @version 1.0.0
 */
class ApiUser {
    /**
     * Constructs a new <code>ApiUser</code>.
     * @alias module:model/ApiUser
     * @implements module:model/AbstractUser
     * @param type {module:model/UserType} 
     * @param username {String} 
     * @param email {String} 
     */
    constructor(type, username, email) { 
        AbstractUser.initialize(this, type, username, email);
        ApiUser.initialize(this, type, username, email);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, username, email) { 
        obj['type'] = type;
        obj['username'] = username;
        obj['email'] = email;
    }

    /**
     * Constructs a <code>ApiUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiUser} obj Optional instance to populate.
     * @return {module:model/ApiUser} The populated <code>ApiUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiUser();
            AbstractUser.constructFromObject(data, obj);

            if (data.hasOwnProperty('type')) {
                obj['type'] = UserType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('groupList')) {
                obj['groupList'] = ApiClient.convertToType(data['groupList'], [GroupIdentifier]);
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], [Object]);
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('superAdmin')) {
                obj['superAdmin'] = ApiClient.convertToType(data['superAdmin'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('providers')) {
                obj['providers'] = ApiClient.convertToType(data['providers'], [AbstractUserTenantIdentityProvider]);
            }
            if (data.hasOwnProperty('auths')) {
                obj['auths'] = ApiClient.convertToType(data['auths'], [ApiAuth]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiUser</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiUser</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApiUser.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['groupList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groupList'])) {
                throw new Error("Expected the field `groupList` to be an array in the JSON data but got " + data['groupList']);
            }
            // validate the optional field `groupList` (array)
            for (const item of data['groupList']) {
                GroupIdentifier.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['groups'])) {
            throw new Error("Expected the field `groups` to be an array in the JSON data but got " + data['groups']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        if (data['providers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['providers'])) {
                throw new Error("Expected the field `providers` to be an array in the JSON data but got " + data['providers']);
            }
            // validate the optional field `providers` (array)
            for (const item of data['providers']) {
                AbstractUserTenantIdentityProvider.validateJSON(item);
            };
        }
        if (data['auths']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['auths'])) {
                throw new Error("Expected the field `auths` to be an array in the JSON data but got " + data['auths']);
            }
            // validate the optional field `auths` (array)
            for (const item of data['auths']) {
                ApiAuth.validateJSON(item);
            };
        }

        return true;
    }


}

ApiUser.RequiredProperties = ["type", "username", "email"];

/**
 * @member {module:model/UserType} type
 */
ApiUser.prototype['type'] = undefined;

/**
 * @member {Array.<module:model/GroupIdentifier>} groupList
 */
ApiUser.prototype['groupList'] = undefined;

/**
 * @member {Array.<Object>} groups
 */
ApiUser.prototype['groups'] = undefined;

/**
 * @member {String} username
 */
ApiUser.prototype['username'] = undefined;

/**
 * @member {String} email
 */
ApiUser.prototype['email'] = undefined;

/**
 * @member {Boolean} superAdmin
 */
ApiUser.prototype['superAdmin'] = undefined;

/**
 * @member {String} id
 */
ApiUser.prototype['id'] = undefined;

/**
 * @member {String} name
 */
ApiUser.prototype['name'] = undefined;

/**
 * @member {String} description
 */
ApiUser.prototype['description'] = undefined;

/**
 * @member {String} firstName
 */
ApiUser.prototype['firstName'] = undefined;

/**
 * @member {String} lastName
 */
ApiUser.prototype['lastName'] = undefined;

/**
 * @member {Array.<module:model/AbstractUserTenantIdentityProvider>} providers
 */
ApiUser.prototype['providers'] = undefined;

/**
 * @member {Array.<module:model/ApiAuth>} auths
 */
ApiUser.prototype['auths'] = undefined;


// Implement AbstractUser interface:
/**
 * @member {module:model/UserType} type
 */
AbstractUser.prototype['type'] = undefined;
/**
 * @member {Array.<module:model/GroupIdentifier>} groupList
 */
AbstractUser.prototype['groupList'] = undefined;
/**
 * @member {Array.<Object>} groups
 */
AbstractUser.prototype['groups'] = undefined;
/**
 * @member {String} username
 */
AbstractUser.prototype['username'] = undefined;
/**
 * @member {String} email
 */
AbstractUser.prototype['email'] = undefined;
/**
 * @member {Boolean} superAdmin
 */
AbstractUser.prototype['superAdmin'] = undefined;
/**
 * @member {String} id
 */
AbstractUser.prototype['id'] = undefined;
/**
 * @member {String} name
 */
AbstractUser.prototype['name'] = undefined;
/**
 * @member {String} description
 */
AbstractUser.prototype['description'] = undefined;
/**
 * @member {String} firstName
 */
AbstractUser.prototype['firstName'] = undefined;
/**
 * @member {String} lastName
 */
AbstractUser.prototype['lastName'] = undefined;
/**
 * @member {Array.<module:model/AbstractUserTenantIdentityProvider>} providers
 */
AbstractUser.prototype['providers'] = undefined;




export default ApiUser;

