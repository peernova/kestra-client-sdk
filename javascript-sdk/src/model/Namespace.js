/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Isolation from './Isolation';
import NamespaceAllowedNamespace from './NamespaceAllowedNamespace';
import NamespaceAllowedTrigger from './NamespaceAllowedTrigger';
import NamespaceLight from './NamespaceLight';
import PluginDefault from './PluginDefault';
import WorkerGroup from './WorkerGroup';

/**
 * The Namespace model module.
 * @module model/Namespace
 * @version 1.0.0
 */
class Namespace {
    /**
     * Constructs a new <code>Namespace</code>.
     * A namespace is a logical grouping of flows and tasks. It is used to organize and manage flows and tasks within Kestra.
     * @alias module:model/Namespace
     * @implements module:model/NamespaceLight
     * @param id {String} 
     * @param deleted {Boolean} 
     */
    constructor(id, deleted) { 
        NamespaceLight.initialize(this, id, deleted);
        Namespace.initialize(this, id, deleted);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, deleted) { 
        obj['id'] = id;
        obj['deleted'] = deleted;
        obj['description'] = description;
        obj['variables'] = variables;
        obj['pluginDefaults'] = pluginDefaults;
        obj['allowedNamespaces'] = allowedNamespaces;
        obj['workerGroup'] = workerGroup;
    }

    /**
     * Constructs a <code>Namespace</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Namespace} obj Optional instance to populate.
     * @return {module:model/Namespace} The populated <code>Namespace</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Namespace();
            NamespaceLight.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('allowedTriggers')) {
                obj['allowedTriggers'] = ApiClient.convertToType(data['allowedTriggers'], [NamespaceAllowedTrigger]);
            }
            if (data.hasOwnProperty('storageIsolation')) {
                obj['storageIsolation'] = Isolation.constructFromObject(data['storageIsolation']);
            }
            if (data.hasOwnProperty('secretIsolation')) {
                obj['secretIsolation'] = Isolation.constructFromObject(data['secretIsolation']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('variables')) {
                obj['variables'] = ApiClient.convertToType(data['variables'], {'String': Object});
            }
            if (data.hasOwnProperty('pluginDefaults')) {
                obj['pluginDefaults'] = ApiClient.convertToType(data['pluginDefaults'], [PluginDefault]);
            }
            if (data.hasOwnProperty('allowedNamespaces')) {
                obj['allowedNamespaces'] = ApiClient.convertToType(data['allowedNamespaces'], [NamespaceAllowedNamespace]);
            }
            if (data.hasOwnProperty('workerGroup')) {
                obj['workerGroup'] = WorkerGroup.constructFromObject(data['workerGroup']);
            }
            if (data.hasOwnProperty('storageType')) {
                obj['storageType'] = ApiClient.convertToType(data['storageType'], 'String');
            }
            if (data.hasOwnProperty('storageConfiguration')) {
                obj['storageConfiguration'] = ApiClient.convertToType(data['storageConfiguration'], {'String': Object});
            }
            if (data.hasOwnProperty('secretType')) {
                obj['secretType'] = ApiClient.convertToType(data['secretType'], 'String');
            }
            if (data.hasOwnProperty('secretReadOnly')) {
                obj['secretReadOnly'] = ApiClient.convertToType(data['secretReadOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('secretConfiguration')) {
                obj['secretConfiguration'] = ApiClient.convertToType(data['secretConfiguration'], {'String': Object});
            }
            if (data.hasOwnProperty('outputsInInternalStorage')) {
                obj['outputsInInternalStorage'] = ApiClient.convertToType(data['outputsInInternalStorage'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Namespace</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Namespace</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Namespace.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['allowedTriggers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['allowedTriggers'])) {
                throw new Error("Expected the field `allowedTriggers` to be an array in the JSON data but got " + data['allowedTriggers']);
            }
            // validate the optional field `allowedTriggers` (array)
            for (const item of data['allowedTriggers']) {
                NamespaceAllowedTrigger.validateJSON(item);
            };
        }
        // validate the optional field `storageIsolation`
        if (data['storageIsolation']) { // data not null
          Isolation.validateJSON(data['storageIsolation']);
        }
        // validate the optional field `secretIsolation`
        if (data['secretIsolation']) { // data not null
          Isolation.validateJSON(data['secretIsolation']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['pluginDefaults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pluginDefaults'])) {
                throw new Error("Expected the field `pluginDefaults` to be an array in the JSON data but got " + data['pluginDefaults']);
            }
            // validate the optional field `pluginDefaults` (array)
            for (const item of data['pluginDefaults']) {
                PluginDefault.validateJSON(item);
            };
        }
        if (data['allowedNamespaces']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['allowedNamespaces'])) {
                throw new Error("Expected the field `allowedNamespaces` to be an array in the JSON data but got " + data['allowedNamespaces']);
            }
            // validate the optional field `allowedNamespaces` (array)
            for (const item of data['allowedNamespaces']) {
                NamespaceAllowedNamespace.validateJSON(item);
            };
        }
        // validate the optional field `workerGroup`
        if (data['workerGroup']) { // data not null
          WorkerGroup.validateJSON(data['workerGroup']);
        }
        // ensure the json data is a string
        if (data['storageType'] && !(typeof data['storageType'] === 'string' || data['storageType'] instanceof String)) {
            throw new Error("Expected the field `storageType` to be a primitive type in the JSON string but got " + data['storageType']);
        }
        // ensure the json data is a string
        if (data['secretType'] && !(typeof data['secretType'] === 'string' || data['secretType'] instanceof String)) {
            throw new Error("Expected the field `secretType` to be a primitive type in the JSON string but got " + data['secretType']);
        }

        return true;
    }


}

Namespace.RequiredProperties = ["id", "deleted", "description", "variables", "pluginDefaults", "allowedNamespaces", "workerGroup"];

/**
 * @member {String} id
 */
Namespace.prototype['id'] = undefined;

/**
 * @member {Boolean} deleted
 */
Namespace.prototype['deleted'] = undefined;

/**
 * @member {Array.<module:model/NamespaceAllowedTrigger>} allowedTriggers
 */
Namespace.prototype['allowedTriggers'] = undefined;

/**
 * @member {module:model/Isolation} storageIsolation
 */
Namespace.prototype['storageIsolation'] = undefined;

/**
 * @member {module:model/Isolation} secretIsolation
 */
Namespace.prototype['secretIsolation'] = undefined;

/**
 * @member {String} description
 */
Namespace.prototype['description'] = undefined;

/**
 * @member {Object.<String, Object>} variables
 */
Namespace.prototype['variables'] = undefined;

/**
 * @member {Array.<module:model/PluginDefault>} pluginDefaults
 */
Namespace.prototype['pluginDefaults'] = undefined;

/**
 * @member {Array.<module:model/NamespaceAllowedNamespace>} allowedNamespaces
 */
Namespace.prototype['allowedNamespaces'] = undefined;

/**
 * @member {module:model/WorkerGroup} workerGroup
 */
Namespace.prototype['workerGroup'] = undefined;

/**
 * @member {String} storageType
 */
Namespace.prototype['storageType'] = undefined;

/**
 * @member {Object.<String, Object>} storageConfiguration
 */
Namespace.prototype['storageConfiguration'] = undefined;

/**
 * @member {String} secretType
 */
Namespace.prototype['secretType'] = undefined;

/**
 * @member {Boolean} secretReadOnly
 */
Namespace.prototype['secretReadOnly'] = undefined;

/**
 * @member {Object.<String, Object>} secretConfiguration
 */
Namespace.prototype['secretConfiguration'] = undefined;

/**
 * @member {Boolean} outputsInInternalStorage
 */
Namespace.prototype['outputsInInternalStorage'] = undefined;


// Implement NamespaceLight interface:
/**
 * @member {String} id
 */
NamespaceLight.prototype['id'] = undefined;
/**
 * @member {Boolean} deleted
 */
NamespaceLight.prototype['deleted'] = undefined;




export default Namespace;

