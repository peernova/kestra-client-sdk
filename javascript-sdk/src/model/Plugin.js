/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PluginPluginElementMetadata from './PluginPluginElementMetadata';
import PluginSubGroupPluginCategory from './PluginSubGroupPluginCategory';

/**
 * The Plugin model module.
 * @module model/Plugin
 * @version 1.0.0
 */
class Plugin {
    /**
     * Constructs a new <code>Plugin</code>.
     * @alias module:model/Plugin
     */
    constructor() { 
        
        Plugin.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Plugin</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Plugin} obj Optional instance to populate.
     * @return {module:model/Plugin} The populated <code>Plugin</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Plugin();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], 'String');
            }
            if (data.hasOwnProperty('longDescription')) {
                obj['longDescription'] = ApiClient.convertToType(data['longDescription'], 'String');
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = ApiClient.convertToType(data['group'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('manifest')) {
                obj['manifest'] = ApiClient.convertToType(data['manifest'], {'String': 'String'});
            }
            if (data.hasOwnProperty('guides')) {
                obj['guides'] = ApiClient.convertToType(data['guides'], ['String']);
            }
            if (data.hasOwnProperty('aliases')) {
                obj['aliases'] = ApiClient.convertToType(data['aliases'], ['String']);
            }
            if (data.hasOwnProperty('tasks')) {
                obj['tasks'] = ApiClient.convertToType(data['tasks'], [PluginPluginElementMetadata]);
            }
            if (data.hasOwnProperty('triggers')) {
                obj['triggers'] = ApiClient.convertToType(data['triggers'], [PluginPluginElementMetadata]);
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [PluginPluginElementMetadata]);
            }
            if (data.hasOwnProperty('controllers')) {
                obj['controllers'] = ApiClient.convertToType(data['controllers'], [PluginPluginElementMetadata]);
            }
            if (data.hasOwnProperty('storages')) {
                obj['storages'] = ApiClient.convertToType(data['storages'], [PluginPluginElementMetadata]);
            }
            if (data.hasOwnProperty('secrets')) {
                obj['secrets'] = ApiClient.convertToType(data['secrets'], [PluginPluginElementMetadata]);
            }
            if (data.hasOwnProperty('taskRunners')) {
                obj['taskRunners'] = ApiClient.convertToType(data['taskRunners'], [PluginPluginElementMetadata]);
            }
            if (data.hasOwnProperty('apps')) {
                obj['apps'] = ApiClient.convertToType(data['apps'], [PluginPluginElementMetadata]);
            }
            if (data.hasOwnProperty('appBlocks')) {
                obj['appBlocks'] = ApiClient.convertToType(data['appBlocks'], [PluginPluginElementMetadata]);
            }
            if (data.hasOwnProperty('charts')) {
                obj['charts'] = ApiClient.convertToType(data['charts'], [PluginPluginElementMetadata]);
            }
            if (data.hasOwnProperty('dataFilters')) {
                obj['dataFilters'] = ApiClient.convertToType(data['dataFilters'], [PluginPluginElementMetadata]);
            }
            if (data.hasOwnProperty('dataFiltersKPI')) {
                obj['dataFiltersKPI'] = ApiClient.convertToType(data['dataFiltersKPI'], [PluginPluginElementMetadata]);
            }
            if (data.hasOwnProperty('logExporters')) {
                obj['logExporters'] = ApiClient.convertToType(data['logExporters'], [PluginPluginElementMetadata]);
            }
            if (data.hasOwnProperty('additionalPlugins')) {
                obj['additionalPlugins'] = ApiClient.convertToType(data['additionalPlugins'], [PluginPluginElementMetadata]);
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [PluginSubGroupPluginCategory]);
            }
            if (data.hasOwnProperty('subGroup')) {
                obj['subGroup'] = ApiClient.convertToType(data['subGroup'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Plugin</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Plugin</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['license'] && !(typeof data['license'] === 'string' || data['license'] instanceof String)) {
            throw new Error("Expected the field `license` to be a primitive type in the JSON string but got " + data['license']);
        }
        // ensure the json data is a string
        if (data['longDescription'] && !(typeof data['longDescription'] === 'string' || data['longDescription'] instanceof String)) {
            throw new Error("Expected the field `longDescription` to be a primitive type in the JSON string but got " + data['longDescription']);
        }
        // ensure the json data is a string
        if (data['group'] && !(typeof data['group'] === 'string' || data['group'] instanceof String)) {
            throw new Error("Expected the field `group` to be a primitive type in the JSON string but got " + data['group']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['guides'])) {
            throw new Error("Expected the field `guides` to be an array in the JSON data but got " + data['guides']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['aliases'])) {
            throw new Error("Expected the field `aliases` to be an array in the JSON data but got " + data['aliases']);
        }
        if (data['tasks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tasks'])) {
                throw new Error("Expected the field `tasks` to be an array in the JSON data but got " + data['tasks']);
            }
            // validate the optional field `tasks` (array)
            for (const item of data['tasks']) {
                PluginPluginElementMetadata.validateJSON(item);
            };
        }
        if (data['triggers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['triggers'])) {
                throw new Error("Expected the field `triggers` to be an array in the JSON data but got " + data['triggers']);
            }
            // validate the optional field `triggers` (array)
            for (const item of data['triggers']) {
                PluginPluginElementMetadata.validateJSON(item);
            };
        }
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                PluginPluginElementMetadata.validateJSON(item);
            };
        }
        if (data['controllers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['controllers'])) {
                throw new Error("Expected the field `controllers` to be an array in the JSON data but got " + data['controllers']);
            }
            // validate the optional field `controllers` (array)
            for (const item of data['controllers']) {
                PluginPluginElementMetadata.validateJSON(item);
            };
        }
        if (data['storages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['storages'])) {
                throw new Error("Expected the field `storages` to be an array in the JSON data but got " + data['storages']);
            }
            // validate the optional field `storages` (array)
            for (const item of data['storages']) {
                PluginPluginElementMetadata.validateJSON(item);
            };
        }
        if (data['secrets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['secrets'])) {
                throw new Error("Expected the field `secrets` to be an array in the JSON data but got " + data['secrets']);
            }
            // validate the optional field `secrets` (array)
            for (const item of data['secrets']) {
                PluginPluginElementMetadata.validateJSON(item);
            };
        }
        if (data['taskRunners']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taskRunners'])) {
                throw new Error("Expected the field `taskRunners` to be an array in the JSON data but got " + data['taskRunners']);
            }
            // validate the optional field `taskRunners` (array)
            for (const item of data['taskRunners']) {
                PluginPluginElementMetadata.validateJSON(item);
            };
        }
        if (data['apps']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['apps'])) {
                throw new Error("Expected the field `apps` to be an array in the JSON data but got " + data['apps']);
            }
            // validate the optional field `apps` (array)
            for (const item of data['apps']) {
                PluginPluginElementMetadata.validateJSON(item);
            };
        }
        if (data['appBlocks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['appBlocks'])) {
                throw new Error("Expected the field `appBlocks` to be an array in the JSON data but got " + data['appBlocks']);
            }
            // validate the optional field `appBlocks` (array)
            for (const item of data['appBlocks']) {
                PluginPluginElementMetadata.validateJSON(item);
            };
        }
        if (data['charts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['charts'])) {
                throw new Error("Expected the field `charts` to be an array in the JSON data but got " + data['charts']);
            }
            // validate the optional field `charts` (array)
            for (const item of data['charts']) {
                PluginPluginElementMetadata.validateJSON(item);
            };
        }
        if (data['dataFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataFilters'])) {
                throw new Error("Expected the field `dataFilters` to be an array in the JSON data but got " + data['dataFilters']);
            }
            // validate the optional field `dataFilters` (array)
            for (const item of data['dataFilters']) {
                PluginPluginElementMetadata.validateJSON(item);
            };
        }
        if (data['dataFiltersKPI']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataFiltersKPI'])) {
                throw new Error("Expected the field `dataFiltersKPI` to be an array in the JSON data but got " + data['dataFiltersKPI']);
            }
            // validate the optional field `dataFiltersKPI` (array)
            for (const item of data['dataFiltersKPI']) {
                PluginPluginElementMetadata.validateJSON(item);
            };
        }
        if (data['logExporters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['logExporters'])) {
                throw new Error("Expected the field `logExporters` to be an array in the JSON data but got " + data['logExporters']);
            }
            // validate the optional field `logExporters` (array)
            for (const item of data['logExporters']) {
                PluginPluginElementMetadata.validateJSON(item);
            };
        }
        if (data['additionalPlugins']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalPlugins'])) {
                throw new Error("Expected the field `additionalPlugins` to be an array in the JSON data but got " + data['additionalPlugins']);
            }
            // validate the optional field `additionalPlugins` (array)
            for (const item of data['additionalPlugins']) {
                PluginPluginElementMetadata.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }
        // ensure the json data is a string
        if (data['subGroup'] && !(typeof data['subGroup'] === 'string' || data['subGroup'] instanceof String)) {
            throw new Error("Expected the field `subGroup` to be a primitive type in the JSON string but got " + data['subGroup']);
        }

        return true;
    }


}



/**
 * @member {String} name
 */
Plugin.prototype['name'] = undefined;

/**
 * @member {String} title
 */
Plugin.prototype['title'] = undefined;

/**
 * @member {String} description
 */
Plugin.prototype['description'] = undefined;

/**
 * @member {String} license
 */
Plugin.prototype['license'] = undefined;

/**
 * @member {String} longDescription
 */
Plugin.prototype['longDescription'] = undefined;

/**
 * @member {String} group
 */
Plugin.prototype['group'] = undefined;

/**
 * @member {String} version
 */
Plugin.prototype['version'] = undefined;

/**
 * @member {Object.<String, String>} manifest
 */
Plugin.prototype['manifest'] = undefined;

/**
 * @member {Array.<String>} guides
 */
Plugin.prototype['guides'] = undefined;

/**
 * @member {Array.<String>} aliases
 */
Plugin.prototype['aliases'] = undefined;

/**
 * @member {Array.<module:model/PluginPluginElementMetadata>} tasks
 */
Plugin.prototype['tasks'] = undefined;

/**
 * @member {Array.<module:model/PluginPluginElementMetadata>} triggers
 */
Plugin.prototype['triggers'] = undefined;

/**
 * @member {Array.<module:model/PluginPluginElementMetadata>} conditions
 */
Plugin.prototype['conditions'] = undefined;

/**
 * @member {Array.<module:model/PluginPluginElementMetadata>} controllers
 */
Plugin.prototype['controllers'] = undefined;

/**
 * @member {Array.<module:model/PluginPluginElementMetadata>} storages
 */
Plugin.prototype['storages'] = undefined;

/**
 * @member {Array.<module:model/PluginPluginElementMetadata>} secrets
 */
Plugin.prototype['secrets'] = undefined;

/**
 * @member {Array.<module:model/PluginPluginElementMetadata>} taskRunners
 */
Plugin.prototype['taskRunners'] = undefined;

/**
 * @member {Array.<module:model/PluginPluginElementMetadata>} apps
 */
Plugin.prototype['apps'] = undefined;

/**
 * @member {Array.<module:model/PluginPluginElementMetadata>} appBlocks
 */
Plugin.prototype['appBlocks'] = undefined;

/**
 * @member {Array.<module:model/PluginPluginElementMetadata>} charts
 */
Plugin.prototype['charts'] = undefined;

/**
 * @member {Array.<module:model/PluginPluginElementMetadata>} dataFilters
 */
Plugin.prototype['dataFilters'] = undefined;

/**
 * @member {Array.<module:model/PluginPluginElementMetadata>} dataFiltersKPI
 */
Plugin.prototype['dataFiltersKPI'] = undefined;

/**
 * @member {Array.<module:model/PluginPluginElementMetadata>} logExporters
 */
Plugin.prototype['logExporters'] = undefined;

/**
 * @member {Array.<module:model/PluginPluginElementMetadata>} additionalPlugins
 */
Plugin.prototype['additionalPlugins'] = undefined;

/**
 * @member {Array.<module:model/PluginSubGroupPluginCategory>} categories
 */
Plugin.prototype['categories'] = undefined;

/**
 * @member {String} subGroup
 */
Plugin.prototype['subGroup'] = undefined;






export default Plugin;

