/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseResourcePatchRequest from './BaseResourcePatchRequest';
import PatchOperation from './PatchOperation';

/**
 * The PatchRequest model module.
 * @module model/PatchRequest
 * @version 1.0.0
 */
class PatchRequest {
    /**
     * Constructs a new <code>PatchRequest</code>.
     * @alias module:model/PatchRequest
     * @implements module:model/BaseResourcePatchRequest
     */
    constructor() { 
        BaseResourcePatchRequest.initialize(this);
        PatchRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PatchRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatchRequest} obj Optional instance to populate.
     * @return {module:model/PatchRequest} The populated <code>PatchRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatchRequest();
            BaseResourcePatchRequest.constructFromObject(data, obj);

            if (data.hasOwnProperty('schemas')) {
                obj['schemas'] = ApiClient.convertToType(data['schemas'], ['String']);
            }
            if (data.hasOwnProperty('patchOperationList')) {
                obj['patchOperationList'] = ApiClient.convertToType(data['patchOperationList'], [PatchOperation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PatchRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PatchRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['schemas'])) {
            throw new Error("Expected the field `schemas` to be an array in the JSON data but got " + data['schemas']);
        }
        if (data['patchOperationList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['patchOperationList'])) {
                throw new Error("Expected the field `patchOperationList` to be an array in the JSON data but got " + data['patchOperationList']);
            }
            // validate the optional field `patchOperationList` (array)
            for (const item of data['patchOperationList']) {
                PatchOperation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<String>} schemas
 */
PatchRequest.prototype['schemas'] = undefined;

/**
 * @member {Array.<module:model/PatchOperation>} patchOperationList
 */
PatchRequest.prototype['patchOperationList'] = undefined;


// Implement BaseResourcePatchRequest interface:
/**
 * @member {Array.<String>} schemas
 */
BaseResourcePatchRequest.prototype['schemas'] = undefined;




export default PatchRequest;

