/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExecutableTaskSubflowId from './ExecutableTaskSubflowId';
import InputObject from './InputObject';

/**
 * The TaskForExecution model module.
 * @module model/TaskForExecution
 * @version 1.0.0
 */
class TaskForExecution {
    /**
     * Constructs a new <code>TaskForExecution</code>.
     * @alias module:model/TaskForExecution
     * @param id {String} 
     * @param type {String} 
     */
    constructor(id, type) { 
        
        TaskForExecution.initialize(this, id, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, type) { 
        obj['id'] = id;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>TaskForExecution</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskForExecution} obj Optional instance to populate.
     * @return {module:model/TaskForExecution} The populated <code>TaskForExecution</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskForExecution();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('tasks')) {
                obj['tasks'] = ApiClient.convertToType(data['tasks'], [TaskForExecution]);
            }
            if (data.hasOwnProperty('inputs')) {
                obj['inputs'] = ApiClient.convertToType(data['inputs'], [InputObject]);
            }
            if (data.hasOwnProperty('subflowId')) {
                obj['subflowId'] = ExecutableTaskSubflowId.constructFromObject(data['subflowId']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskForExecution</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskForExecution</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TaskForExecution.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        if (data['tasks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tasks'])) {
                throw new Error("Expected the field `tasks` to be an array in the JSON data but got " + data['tasks']);
            }
            // validate the optional field `tasks` (array)
            for (const item of data['tasks']) {
                TaskForExecution.validateJSON(item);
            };
        }
        if (data['inputs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inputs'])) {
                throw new Error("Expected the field `inputs` to be an array in the JSON data but got " + data['inputs']);
            }
            // validate the optional field `inputs` (array)
            for (const item of data['inputs']) {
                InputObject.validateJSON(item);
            };
        }
        // validate the optional field `subflowId`
        if (data['subflowId']) { // data not null
          ExecutableTaskSubflowId.validateJSON(data['subflowId']);
        }

        return true;
    }


}

TaskForExecution.RequiredProperties = ["id", "type"];

/**
 * @member {String} id
 */
TaskForExecution.prototype['id'] = undefined;

/**
 * @member {String} type
 */
TaskForExecution.prototype['type'] = undefined;

/**
 * @member {String} version
 */
TaskForExecution.prototype['version'] = undefined;

/**
 * @member {Array.<module:model/TaskForExecution>} tasks
 */
TaskForExecution.prototype['tasks'] = undefined;

/**
 * @member {Array.<module:model/InputObject>} inputs
 */
TaskForExecution.prototype['inputs'] = undefined;

/**
 * @member {module:model/ExecutableTaskSubflowId} subflowId
 */
TaskForExecution.prototype['subflowId'] = undefined;






export default TaskForExecution;

