/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Isolation from './Isolation';
import Tenant from './Tenant';
import WorkerGroup from './WorkerGroup';

/**
 * The ApiTenant model module.
 * @module model/ApiTenant
 * @version 1.0.0
 */
class ApiTenant {
    /**
     * Constructs a new <code>ApiTenant</code>.
     * @alias module:model/ApiTenant
     * @implements module:model/Tenant
     * @param storageIsolation {module:model/Isolation} 
     * @param secretIsolation {module:model/Isolation} 
     * @param id {String} 
     * @param name {String} 
     * @param deleted {Boolean} 
     * @param workerGroup {module:model/WorkerGroup} 
     * @param storageType {String} 
     * @param storageConfiguration {Object.<String, Object>} 
     * @param secretType {String} 
     * @param secretReadOnly {Boolean} 
     * @param secretConfiguration {Object.<String, Object>} 
     * @param requireExistingNamespace {Boolean} 
     * @param outputsInInternalStorage {Boolean} 
     * @param logo {String} 
     */
    constructor(storageIsolation, secretIsolation, id, name, deleted, workerGroup, storageType, storageConfiguration, secretType, secretReadOnly, secretConfiguration, requireExistingNamespace, outputsInInternalStorage, logo) { 
        Tenant.initialize(this, storageIsolation, secretIsolation, id, name, deleted, workerGroup, storageType, storageConfiguration, secretType, secretReadOnly, secretConfiguration, requireExistingNamespace, outputsInInternalStorage);
        ApiTenant.initialize(this, storageIsolation, secretIsolation, id, name, deleted, workerGroup, storageType, storageConfiguration, secretType, secretReadOnly, secretConfiguration, requireExistingNamespace, outputsInInternalStorage, logo);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, storageIsolation, secretIsolation, id, name, deleted, workerGroup, storageType, storageConfiguration, secretType, secretReadOnly, secretConfiguration, requireExistingNamespace, outputsInInternalStorage, logo) { 
        obj['storageIsolation'] = storageIsolation;
        obj['secretIsolation'] = secretIsolation;
        obj['id'] = id;
        obj['name'] = name;
        obj['deleted'] = deleted;
        obj['workerGroup'] = workerGroup;
        obj['storageType'] = storageType;
        obj['storageConfiguration'] = storageConfiguration;
        obj['secretType'] = secretType;
        obj['secretReadOnly'] = secretReadOnly;
        obj['secretConfiguration'] = secretConfiguration;
        obj['requireExistingNamespace'] = requireExistingNamespace;
        obj['outputsInInternalStorage'] = outputsInInternalStorage;
        obj['logo'] = logo;
    }

    /**
     * Constructs a <code>ApiTenant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiTenant} obj Optional instance to populate.
     * @return {module:model/ApiTenant} The populated <code>ApiTenant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiTenant();
            Tenant.constructFromObject(data, obj);

            if (data.hasOwnProperty('storageIsolation')) {
                obj['storageIsolation'] = Isolation.constructFromObject(data['storageIsolation']);
            }
            if (data.hasOwnProperty('secretIsolation')) {
                obj['secretIsolation'] = Isolation.constructFromObject(data['secretIsolation']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('workerGroup')) {
                obj['workerGroup'] = WorkerGroup.constructFromObject(data['workerGroup']);
            }
            if (data.hasOwnProperty('storageType')) {
                obj['storageType'] = ApiClient.convertToType(data['storageType'], 'String');
            }
            if (data.hasOwnProperty('storageConfiguration')) {
                obj['storageConfiguration'] = ApiClient.convertToType(data['storageConfiguration'], {'String': Object});
            }
            if (data.hasOwnProperty('secretType')) {
                obj['secretType'] = ApiClient.convertToType(data['secretType'], 'String');
            }
            if (data.hasOwnProperty('secretReadOnly')) {
                obj['secretReadOnly'] = ApiClient.convertToType(data['secretReadOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('secretConfiguration')) {
                obj['secretConfiguration'] = ApiClient.convertToType(data['secretConfiguration'], {'String': Object});
            }
            if (data.hasOwnProperty('requireExistingNamespace')) {
                obj['requireExistingNamespace'] = ApiClient.convertToType(data['requireExistingNamespace'], 'Boolean');
            }
            if (data.hasOwnProperty('outputsInInternalStorage')) {
                obj['outputsInInternalStorage'] = ApiClient.convertToType(data['outputsInInternalStorage'], 'Boolean');
            }
            if (data.hasOwnProperty('logo')) {
                obj['logo'] = ApiClient.convertToType(data['logo'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiTenant</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiTenant</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApiTenant.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `storageIsolation`
        if (data['storageIsolation']) { // data not null
          Isolation.validateJSON(data['storageIsolation']);
        }
        // validate the optional field `secretIsolation`
        if (data['secretIsolation']) { // data not null
          Isolation.validateJSON(data['secretIsolation']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `workerGroup`
        if (data['workerGroup']) { // data not null
          WorkerGroup.validateJSON(data['workerGroup']);
        }
        // ensure the json data is a string
        if (data['storageType'] && !(typeof data['storageType'] === 'string' || data['storageType'] instanceof String)) {
            throw new Error("Expected the field `storageType` to be a primitive type in the JSON string but got " + data['storageType']);
        }
        // ensure the json data is a string
        if (data['secretType'] && !(typeof data['secretType'] === 'string' || data['secretType'] instanceof String)) {
            throw new Error("Expected the field `secretType` to be a primitive type in the JSON string but got " + data['secretType']);
        }
        // ensure the json data is a string
        if (data['logo'] && !(typeof data['logo'] === 'string' || data['logo'] instanceof String)) {
            throw new Error("Expected the field `logo` to be a primitive type in the JSON string but got " + data['logo']);
        }

        return true;
    }


}

ApiTenant.RequiredProperties = ["storageIsolation", "secretIsolation", "id", "name", "deleted", "workerGroup", "storageType", "storageConfiguration", "secretType", "secretReadOnly", "secretConfiguration", "requireExistingNamespace", "outputsInInternalStorage", "logo"];

/**
 * @member {module:model/Isolation} storageIsolation
 */
ApiTenant.prototype['storageIsolation'] = undefined;

/**
 * @member {module:model/Isolation} secretIsolation
 */
ApiTenant.prototype['secretIsolation'] = undefined;

/**
 * @member {String} id
 */
ApiTenant.prototype['id'] = undefined;

/**
 * @member {String} name
 */
ApiTenant.prototype['name'] = undefined;

/**
 * @member {Boolean} deleted
 */
ApiTenant.prototype['deleted'] = undefined;

/**
 * @member {module:model/WorkerGroup} workerGroup
 */
ApiTenant.prototype['workerGroup'] = undefined;

/**
 * @member {String} storageType
 */
ApiTenant.prototype['storageType'] = undefined;

/**
 * @member {Object.<String, Object>} storageConfiguration
 */
ApiTenant.prototype['storageConfiguration'] = undefined;

/**
 * @member {String} secretType
 */
ApiTenant.prototype['secretType'] = undefined;

/**
 * @member {Boolean} secretReadOnly
 */
ApiTenant.prototype['secretReadOnly'] = undefined;

/**
 * @member {Object.<String, Object>} secretConfiguration
 */
ApiTenant.prototype['secretConfiguration'] = undefined;

/**
 * @member {Boolean} requireExistingNamespace
 */
ApiTenant.prototype['requireExistingNamespace'] = undefined;

/**
 * @member {Boolean} outputsInInternalStorage
 */
ApiTenant.prototype['outputsInInternalStorage'] = undefined;

/**
 * @member {String} logo
 */
ApiTenant.prototype['logo'] = undefined;


// Implement Tenant interface:
/**
 * @member {module:model/Isolation} storageIsolation
 */
Tenant.prototype['storageIsolation'] = undefined;
/**
 * @member {module:model/Isolation} secretIsolation
 */
Tenant.prototype['secretIsolation'] = undefined;
/**
 * @member {String} id
 */
Tenant.prototype['id'] = undefined;
/**
 * @member {String} name
 */
Tenant.prototype['name'] = undefined;
/**
 * @member {Boolean} deleted
 */
Tenant.prototype['deleted'] = undefined;
/**
 * @member {module:model/WorkerGroup} workerGroup
 */
Tenant.prototype['workerGroup'] = undefined;
/**
 * @member {String} storageType
 */
Tenant.prototype['storageType'] = undefined;
/**
 * @member {Object.<String, Object>} storageConfiguration
 */
Tenant.prototype['storageConfiguration'] = undefined;
/**
 * @member {String} secretType
 */
Tenant.prototype['secretType'] = undefined;
/**
 * @member {Boolean} secretReadOnly
 */
Tenant.prototype['secretReadOnly'] = undefined;
/**
 * @member {Object.<String, Object>} secretConfiguration
 */
Tenant.prototype['secretConfiguration'] = undefined;
/**
 * @member {Boolean} requireExistingNamespace
 */
Tenant.prototype['requireExistingNamespace'] = undefined;
/**
 * @member {Boolean} outputsInInternalStorage
 */
Tenant.prototype['outputsInInternalStorage'] = undefined;




export default ApiTenant;

