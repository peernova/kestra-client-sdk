/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PluginArtifact model module.
 * @module model/PluginArtifact
 * @version 1.0.0
 */
class PluginArtifact {
    /**
     * Constructs a new <code>PluginArtifact</code>.
     * @alias module:model/PluginArtifact
     * @param groupId {String} 
     * @param artifactId {String} 
     * @param extension {String} 
     * @param classifier {String} 
     * @param version {String} 
     * @param uri {String} 
     */
    constructor(groupId, artifactId, extension, classifier, version, uri) { 
        
        PluginArtifact.initialize(this, groupId, artifactId, extension, classifier, version, uri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, groupId, artifactId, extension, classifier, version, uri) { 
        obj['groupId'] = groupId;
        obj['artifactId'] = artifactId;
        obj['extension'] = extension;
        obj['classifier'] = classifier;
        obj['version'] = version;
        obj['uri'] = uri;
    }

    /**
     * Constructs a <code>PluginArtifact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PluginArtifact} obj Optional instance to populate.
     * @return {module:model/PluginArtifact} The populated <code>PluginArtifact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PluginArtifact();

            if (data.hasOwnProperty('groupId')) {
                obj['groupId'] = ApiClient.convertToType(data['groupId'], 'String');
            }
            if (data.hasOwnProperty('artifactId')) {
                obj['artifactId'] = ApiClient.convertToType(data['artifactId'], 'String');
            }
            if (data.hasOwnProperty('extension')) {
                obj['extension'] = ApiClient.convertToType(data['extension'], 'String');
            }
            if (data.hasOwnProperty('classifier')) {
                obj['classifier'] = ApiClient.convertToType(data['classifier'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PluginArtifact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PluginArtifact</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PluginArtifact.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['groupId'] && !(typeof data['groupId'] === 'string' || data['groupId'] instanceof String)) {
            throw new Error("Expected the field `groupId` to be a primitive type in the JSON string but got " + data['groupId']);
        }
        // ensure the json data is a string
        if (data['artifactId'] && !(typeof data['artifactId'] === 'string' || data['artifactId'] instanceof String)) {
            throw new Error("Expected the field `artifactId` to be a primitive type in the JSON string but got " + data['artifactId']);
        }
        // ensure the json data is a string
        if (data['extension'] && !(typeof data['extension'] === 'string' || data['extension'] instanceof String)) {
            throw new Error("Expected the field `extension` to be a primitive type in the JSON string but got " + data['extension']);
        }
        // ensure the json data is a string
        if (data['classifier'] && !(typeof data['classifier'] === 'string' || data['classifier'] instanceof String)) {
            throw new Error("Expected the field `classifier` to be a primitive type in the JSON string but got " + data['classifier']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}

PluginArtifact.RequiredProperties = ["groupId", "artifactId", "extension", "classifier", "version", "uri"];

/**
 * @member {String} groupId
 */
PluginArtifact.prototype['groupId'] = undefined;

/**
 * @member {String} artifactId
 */
PluginArtifact.prototype['artifactId'] = undefined;

/**
 * @member {String} extension
 */
PluginArtifact.prototype['extension'] = undefined;

/**
 * @member {String} classifier
 */
PluginArtifact.prototype['classifier'] = undefined;

/**
 * @member {String} version
 */
PluginArtifact.prototype['version'] = undefined;

/**
 * @member {String} uri
 */
PluginArtifact.prototype['uri'] = undefined;






export default PluginArtifact;

