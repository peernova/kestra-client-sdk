/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Condition from './Condition';
import Level from './Level';
import StateType from './StateType';
import TheLabelsToPassToTheExecutionCreated from './TheLabelsToPassToTheExecutionCreated';
import WorkerGroup from './WorkerGroup';

/**
 * The AbstractTrigger model module.
 * @module model/AbstractTrigger
 * @version 1.0.0
 */
class AbstractTrigger {
    /**
     * Constructs a new <code>AbstractTrigger</code>.
     * @alias module:model/AbstractTrigger
     * @param id {String} 
     * @param type {String} 
     * @param disabled {Boolean} 
     */
    constructor(id, type, disabled) { 
        
        AbstractTrigger.initialize(this, id, type, disabled);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, type, disabled) { 
        obj['id'] = id;
        obj['type'] = type;
        obj['disabled'] = disabled;
    }

    /**
     * Constructs a <code>AbstractTrigger</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AbstractTrigger} obj Optional instance to populate.
     * @return {module:model/AbstractTrigger} The populated <code>AbstractTrigger</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AbstractTrigger();

            if (data.hasOwnProperty('minLogLevel')) {
                obj['minLogLevel'] = ApiClient.convertToType(data['minLogLevel'], Level);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [Condition]);
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('workerGroup')) {
                obj['workerGroup'] = WorkerGroup.constructFromObject(data['workerGroup']);
            }
            if (data.hasOwnProperty('logLevel')) {
                obj['logLevel'] = Level.constructFromObject(data['logLevel']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = TheLabelsToPassToTheExecutionCreated.constructFromObject(data['labels']);
            }
            if (data.hasOwnProperty('stopAfter')) {
                obj['stopAfter'] = ApiClient.convertToType(data['stopAfter'], [StateType]);
            }
            if (data.hasOwnProperty('logToFile')) {
                obj['logToFile'] = ApiClient.convertToType(data['logToFile'], 'Boolean');
            }
            if (data.hasOwnProperty('failOnTriggerError')) {
                obj['failOnTriggerError'] = ApiClient.convertToType(data['failOnTriggerError'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AbstractTrigger</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AbstractTrigger</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AbstractTrigger.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                Condition.validateJSON(item);
            };
        }
        // validate the optional field `workerGroup`
        if (data['workerGroup']) { // data not null
          WorkerGroup.validateJSON(data['workerGroup']);
        }
        // validate the optional field `labels`
        if (data['labels']) { // data not null
          TheLabelsToPassToTheExecutionCreated.validateJSON(data['labels']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['stopAfter'])) {
            throw new Error("Expected the field `stopAfter` to be an array in the JSON data but got " + data['stopAfter']);
        }

        return true;
    }


}

AbstractTrigger.RequiredProperties = ["id", "type", "disabled"];

/**
 * @member {module:model/Level} minLogLevel
 */
AbstractTrigger.prototype['minLogLevel'] = undefined;

/**
 * @member {String} id
 */
AbstractTrigger.prototype['id'] = undefined;

/**
 * @member {String} type
 */
AbstractTrigger.prototype['type'] = undefined;

/**
 * @member {String} version
 */
AbstractTrigger.prototype['version'] = undefined;

/**
 * @member {String} description
 */
AbstractTrigger.prototype['description'] = undefined;

/**
 * @member {Array.<module:model/Condition>} conditions
 */
AbstractTrigger.prototype['conditions'] = undefined;

/**
 * @member {Boolean} disabled
 */
AbstractTrigger.prototype['disabled'] = undefined;

/**
 * @member {module:model/WorkerGroup} workerGroup
 */
AbstractTrigger.prototype['workerGroup'] = undefined;

/**
 * @member {module:model/Level} logLevel
 */
AbstractTrigger.prototype['logLevel'] = undefined;

/**
 * @member {module:model/TheLabelsToPassToTheExecutionCreated} labels
 */
AbstractTrigger.prototype['labels'] = undefined;

/**
 * @member {Array.<module:model/StateType>} stopAfter
 */
AbstractTrigger.prototype['stopAfter'] = undefined;

/**
 * @member {Boolean} logToFile
 */
AbstractTrigger.prototype['logToFile'] = undefined;

/**
 * @member {Boolean} failOnTriggerError
 */
AbstractTrigger.prototype['failOnTriggerError'] = undefined;






export default AbstractTrigger;

