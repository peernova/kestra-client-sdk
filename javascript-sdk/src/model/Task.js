/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Cache from './Cache';
import Level from './Level';
import PropertyDuration from './PropertyDuration';
import WorkerGroup from './WorkerGroup';

/**
 * The Task model module.
 * @module model/Task
 * @version 1.0.0
 */
class Task {
    /**
     * Constructs a new <code>Task</code>.
     * @alias module:model/Task
     * @param id {String} 
     * @param type {String} 
     */
    constructor(id, type) { 
        
        Task.initialize(this, id, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, type) { 
        obj['id'] = id;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Task</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Task} obj Optional instance to populate.
     * @return {module:model/Task} The populated <code>Task</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Task();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('retry')) {
                obj['retry'] = ApiClient.convertToType(data['retry'], Object);
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = PropertyDuration.constructFromObject(data['timeout']);
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('workerGroup')) {
                obj['workerGroup'] = WorkerGroup.constructFromObject(data['workerGroup']);
            }
            if (data.hasOwnProperty('logLevel')) {
                obj['logLevel'] = Level.constructFromObject(data['logLevel']);
            }
            if (data.hasOwnProperty('allowFailure')) {
                obj['allowFailure'] = ApiClient.convertToType(data['allowFailure'], 'Boolean');
            }
            if (data.hasOwnProperty('logToFile')) {
                obj['logToFile'] = ApiClient.convertToType(data['logToFile'], 'Boolean');
            }
            if (data.hasOwnProperty('runIf')) {
                obj['runIf'] = ApiClient.convertToType(data['runIf'], 'String');
            }
            if (data.hasOwnProperty('allowWarning')) {
                obj['allowWarning'] = ApiClient.convertToType(data['allowWarning'], 'Boolean');
            }
            if (data.hasOwnProperty('taskCache')) {
                obj['taskCache'] = Cache.constructFromObject(data['taskCache']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Task</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Task</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Task.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `timeout`
        if (data['timeout']) { // data not null
          PropertyDuration.validateJSON(data['timeout']);
        }
        // validate the optional field `workerGroup`
        if (data['workerGroup']) { // data not null
          WorkerGroup.validateJSON(data['workerGroup']);
        }
        // ensure the json data is a string
        if (data['runIf'] && !(typeof data['runIf'] === 'string' || data['runIf'] instanceof String)) {
            throw new Error("Expected the field `runIf` to be a primitive type in the JSON string but got " + data['runIf']);
        }
        // validate the optional field `taskCache`
        if (data['taskCache']) { // data not null
          Cache.validateJSON(data['taskCache']);
        }

        return true;
    }


}

Task.RequiredProperties = ["id", "type"];

/**
 * @member {String} id
 */
Task.prototype['id'] = undefined;

/**
 * @member {String} type
 */
Task.prototype['type'] = undefined;

/**
 * @member {String} version
 */
Task.prototype['version'] = undefined;

/**
 * @member {String} description
 */
Task.prototype['description'] = undefined;

/**
 * @member {Object} retry
 */
Task.prototype['retry'] = undefined;

/**
 * @member {module:model/PropertyDuration} timeout
 */
Task.prototype['timeout'] = undefined;

/**
 * @member {Boolean} disabled
 */
Task.prototype['disabled'] = undefined;

/**
 * @member {module:model/WorkerGroup} workerGroup
 */
Task.prototype['workerGroup'] = undefined;

/**
 * @member {module:model/Level} logLevel
 */
Task.prototype['logLevel'] = undefined;

/**
 * @member {Boolean} allowFailure
 */
Task.prototype['allowFailure'] = undefined;

/**
 * @member {Boolean} logToFile
 */
Task.prototype['logToFile'] = undefined;

/**
 * @member {String} runIf
 */
Task.prototype['runIf'] = undefined;

/**
 * @member {Boolean} allowWarning
 */
Task.prototype['allowWarning'] = undefined;

/**
 * @member {module:model/Cache} taskCache
 */
Task.prototype['taskCache'] = undefined;






export default Task;

