/**
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SchemaAttributeMutability from './SchemaAttributeMutability';
import SchemaAttributeReturned from './SchemaAttributeReturned';
import SchemaAttributeType from './SchemaAttributeType';
import SchemaAttributeUniqueness from './SchemaAttributeUniqueness';

/**
 * The SchemaAttribute model module.
 * @module model/SchemaAttribute
 * @version 1.0.0
 */
class SchemaAttribute {
    /**
     * Constructs a new <code>SchemaAttribute</code>.
     * @alias module:model/SchemaAttribute
     */
    constructor() { 
        
        SchemaAttribute.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SchemaAttribute</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SchemaAttribute} obj Optional instance to populate.
     * @return {module:model/SchemaAttribute} The populated <code>SchemaAttribute</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SchemaAttribute();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], [SchemaAttribute]);
            }
            if (data.hasOwnProperty('urn')) {
                obj['urn'] = ApiClient.convertToType(data['urn'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = SchemaAttributeType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('subAttributes')) {
                obj['subAttributes'] = ApiClient.convertToType(data['subAttributes'], [SchemaAttribute]);
            }
            if (data.hasOwnProperty('multiValued')) {
                obj['multiValued'] = ApiClient.convertToType(data['multiValued'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('canonicalValues')) {
                obj['canonicalValues'] = ApiClient.convertToType(data['canonicalValues'], ['String']);
            }
            if (data.hasOwnProperty('caseExact')) {
                obj['caseExact'] = ApiClient.convertToType(data['caseExact'], 'Boolean');
            }
            if (data.hasOwnProperty('mutability')) {
                obj['mutability'] = SchemaAttributeMutability.constructFromObject(data['mutability']);
            }
            if (data.hasOwnProperty('returned')) {
                obj['returned'] = SchemaAttributeReturned.constructFromObject(data['returned']);
            }
            if (data.hasOwnProperty('uniqueness')) {
                obj['uniqueness'] = SchemaAttributeUniqueness.constructFromObject(data['uniqueness']);
            }
            if (data.hasOwnProperty('referenceTypes')) {
                obj['referenceTypes'] = ApiClient.convertToType(data['referenceTypes'], ['String']);
            }
            if (data.hasOwnProperty('accessor')) {
                obj['accessor'] = ApiClient.convertToType(data['accessor'], Object);
            }
            if (data.hasOwnProperty('scimResourceIdReference')) {
                obj['scimResourceIdReference'] = ApiClient.convertToType(data['scimResourceIdReference'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SchemaAttribute</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SchemaAttribute</code>.
     */
    static validateJSON(data) {
        if (data['attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attributes'])) {
                throw new Error("Expected the field `attributes` to be an array in the JSON data but got " + data['attributes']);
            }
            // validate the optional field `attributes` (array)
            for (const item of data['attributes']) {
                SchemaAttribute.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['urn'] && !(typeof data['urn'] === 'string' || data['urn'] instanceof String)) {
            throw new Error("Expected the field `urn` to be a primitive type in the JSON string but got " + data['urn']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['subAttributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subAttributes'])) {
                throw new Error("Expected the field `subAttributes` to be an array in the JSON data but got " + data['subAttributes']);
            }
            // validate the optional field `subAttributes` (array)
            for (const item of data['subAttributes']) {
                SchemaAttribute.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['canonicalValues'])) {
            throw new Error("Expected the field `canonicalValues` to be an array in the JSON data but got " + data['canonicalValues']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['referenceTypes'])) {
            throw new Error("Expected the field `referenceTypes` to be an array in the JSON data but got " + data['referenceTypes']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/SchemaAttribute>} attributes
 */
SchemaAttribute.prototype['attributes'] = undefined;

/**
 * @member {String} urn
 */
SchemaAttribute.prototype['urn'] = undefined;

/**
 * @member {String} name
 */
SchemaAttribute.prototype['name'] = undefined;

/**
 * @member {module:model/SchemaAttributeType} type
 */
SchemaAttribute.prototype['type'] = undefined;

/**
 * @member {Array.<module:model/SchemaAttribute>} subAttributes
 */
SchemaAttribute.prototype['subAttributes'] = undefined;

/**
 * @member {Boolean} multiValued
 */
SchemaAttribute.prototype['multiValued'] = undefined;

/**
 * @member {String} description
 */
SchemaAttribute.prototype['description'] = undefined;

/**
 * @member {Boolean} required
 */
SchemaAttribute.prototype['required'] = undefined;

/**
 * @member {Array.<String>} canonicalValues
 */
SchemaAttribute.prototype['canonicalValues'] = undefined;

/**
 * @member {Boolean} caseExact
 */
SchemaAttribute.prototype['caseExact'] = undefined;

/**
 * @member {module:model/SchemaAttributeMutability} mutability
 */
SchemaAttribute.prototype['mutability'] = undefined;

/**
 * @member {module:model/SchemaAttributeReturned} returned
 */
SchemaAttribute.prototype['returned'] = undefined;

/**
 * @member {module:model/SchemaAttributeUniqueness} uniqueness
 */
SchemaAttribute.prototype['uniqueness'] = undefined;

/**
 * @member {Array.<String>} referenceTypes
 */
SchemaAttribute.prototype['referenceTypes'] = undefined;

/**
 * @member {Object} accessor
 */
SchemaAttribute.prototype['accessor'] = undefined;

/**
 * @member {Boolean} scimResourceIdReference
 */
SchemaAttribute.prototype['scimResourceIdReference'] = undefined;






export default SchemaAttribute;

