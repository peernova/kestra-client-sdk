/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.kestra.sdk.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.kestra.sdk.internal.ApiException;
import io.kestra.sdk.internal.ApiClient;
import io.kestra.sdk.internal.BaseApi;
import io.kestra.sdk.internal.Configuration;
import io.kestra.sdk.internal.Pair;

import io.kestra.sdk.model.ApiPatchSuperAdminRequest;
import io.kestra.sdk.model.CreateApiTokenRequest;
import io.kestra.sdk.model.CreateApiTokenResponse;
import io.kestra.sdk.model.IAMTenantAccessControllerApiUserTenantAccess;
import io.kestra.sdk.model.IAMTenantAccessControllerUserApiAutocomplete;
import io.kestra.sdk.model.IAMUserControllerApiCreateOrUpdateUserRequest;
import io.kestra.sdk.model.IAMUserControllerApiPatchRestrictedRequest;
import io.kestra.sdk.model.IAMUserControllerApiPatchUserPasswordRequest;
import io.kestra.sdk.model.IAMUserControllerApiUser;
import io.kestra.sdk.model.IAMUserGroupControllerApiUpdateUserGroupsRequest;
import io.kestra.sdk.model.MeControllerApiUpdatePasswordRequest;
import io.kestra.sdk.model.MeControllerApiUserDetailsRequest;
import io.kestra.sdk.model.PagedResultsIAMUserControllerApiUserSummary;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0-SNAPSHOT")
public class UsersApi extends BaseApi {

  public UsersApi() {
    super(Configuration.getDefaultApiClient());
  }

  public UsersApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * List users for autocomplete
   * 
   * @param tenant  (required)
   * @param iaMTenantAccessControllerUserApiAutocomplete Autocomplete request (required)
   * @return List&lt;IAMTenantAccessControllerApiUserTenantAccess&gt;
   * @throws ApiException if fails to make API call
   */
  public List<IAMTenantAccessControllerApiUserTenantAccess> autocompleteUsers(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull IAMTenantAccessControllerUserApiAutocomplete iaMTenantAccessControllerUserApiAutocomplete) throws ApiException {
    return this.autocompleteUsers(tenant, iaMTenantAccessControllerUserApiAutocomplete, Collections.emptyMap());
  }


  /**
   * List users for autocomplete
   * 
   * @param tenant  (required)
   * @param iaMTenantAccessControllerUserApiAutocomplete Autocomplete request (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;IAMTenantAccessControllerApiUserTenantAccess&gt;
   * @throws ApiException if fails to make API call
   */
  public List<IAMTenantAccessControllerApiUserTenantAccess> autocompleteUsers(@javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull IAMTenantAccessControllerUserApiAutocomplete iaMTenantAccessControllerUserApiAutocomplete, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = iaMTenantAccessControllerUserApiAutocomplete;
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling autocompleteUsers");
    }
    
    // verify the required parameter 'iaMTenantAccessControllerUserApiAutocomplete' is set
    if (iaMTenantAccessControllerUserApiAutocomplete == null) {
      throw new ApiException(400, "Missing the required parameter 'iaMTenantAccessControllerUserApiAutocomplete' when calling autocompleteUsers");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/tenant-access/autocomplete"
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<List<IAMTenantAccessControllerApiUserTenantAccess>> localVarReturnType = new TypeReference<List<IAMTenantAccessControllerApiUserTenantAccess>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create new API Token for a specific user
   * 
   * @param id The user id (required)
   * @param createApiTokenRequest The create api-token request (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createApiTokensForUser(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull CreateApiTokenRequest createApiTokenRequest) throws ApiException {
    return this.createApiTokensForUser(id, createApiTokenRequest, Collections.emptyMap());
  }


  /**
   * Create new API Token for a specific user
   * 
   * @param id The user id (required)
   * @param createApiTokenRequest The create api-token request (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createApiTokensForUser(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull CreateApiTokenRequest createApiTokenRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createApiTokenRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling createApiTokensForUser");
    }
    
    // verify the required parameter 'createApiTokenRequest' is set
    if (createApiTokenRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createApiTokenRequest' when calling createApiTokensForUser");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/service-accounts/{id}/api-tokens"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create new API Token for a specific user
   * Superadmin-only. Create a new API token for a user.
   * @param id The user id (required)
   * @param createApiTokenRequest The create api-token request (required)
   * @return CreateApiTokenResponse
   * @throws ApiException if fails to make API call
   */
  public CreateApiTokenResponse createApiTokensForUser1(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull CreateApiTokenRequest createApiTokenRequest) throws ApiException {
    return this.createApiTokensForUser1(id, createApiTokenRequest, Collections.emptyMap());
  }


  /**
   * Create new API Token for a specific user
   * Superadmin-only. Create a new API token for a user.
   * @param id The user id (required)
   * @param createApiTokenRequest The create api-token request (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return CreateApiTokenResponse
   * @throws ApiException if fails to make API call
   */
  public CreateApiTokenResponse createApiTokensForUser1(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull CreateApiTokenRequest createApiTokenRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createApiTokenRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling createApiTokensForUser1");
    }
    
    // verify the required parameter 'createApiTokenRequest' is set
    if (createApiTokenRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createApiTokenRequest' when calling createApiTokensForUser1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/{id}/api-tokens"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<CreateApiTokenResponse> localVarReturnType = new TypeReference<CreateApiTokenResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create new API Token for a specific user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param createApiTokenRequest The create api-token request (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createApiTokensForUserWithTenant(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull CreateApiTokenRequest createApiTokenRequest) throws ApiException {
    return this.createApiTokensForUserWithTenant(id, tenant, createApiTokenRequest, Collections.emptyMap());
  }


  /**
   * Create new API Token for a specific user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param createApiTokenRequest The create api-token request (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object createApiTokensForUserWithTenant(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull CreateApiTokenRequest createApiTokenRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createApiTokenRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling createApiTokensForUserWithTenant");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling createApiTokensForUserWithTenant");
    }
    
    // verify the required parameter 'createApiTokenRequest' is set
    if (createApiTokenRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createApiTokenRequest' when calling createApiTokensForUserWithTenant");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/service-accounts/{id}/api-tokens"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create a new user account
   * Superadmin-only. Create a new user account with an optional password based authentication method.
   * @param iaMUserControllerApiCreateOrUpdateUserRequest  (required)
   * @throws ApiException if fails to make API call
   */
  public void createUser(@javax.annotation.Nonnull IAMUserControllerApiCreateOrUpdateUserRequest iaMUserControllerApiCreateOrUpdateUserRequest) throws ApiException {
    this.createUser(iaMUserControllerApiCreateOrUpdateUserRequest, Collections.emptyMap());
  }


  /**
   * Create a new user account
   * Superadmin-only. Create a new user account with an optional password based authentication method.
   * @param iaMUserControllerApiCreateOrUpdateUserRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void createUser(@javax.annotation.Nonnull IAMUserControllerApiCreateOrUpdateUserRequest iaMUserControllerApiCreateOrUpdateUserRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = iaMUserControllerApiCreateOrUpdateUserRequest;
    
    // verify the required parameter 'iaMUserControllerApiCreateOrUpdateUserRequest' is set
    if (iaMUserControllerApiCreateOrUpdateUserRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'iaMUserControllerApiCreateOrUpdateUserRequest' when calling createUser");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete an API Token for specific user and token id
   * 
   * @param id The user id (required)
   * @param tokenId The token id (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteApiToken(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tokenId) throws ApiException {
    return this.deleteApiToken(id, tokenId, Collections.emptyMap());
  }


  /**
   * Delete an API Token for specific user and token id
   * 
   * @param id The user id (required)
   * @param tokenId The token id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteApiToken(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tokenId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteApiToken");
    }
    
    // verify the required parameter 'tokenId' is set
    if (tokenId == null) {
      throw new ApiException(400, "Missing the required parameter 'tokenId' when calling deleteApiToken");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/service-accounts/{id}/api-tokens/{tokenId}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tokenId" + "\\}", apiClient.escapeString(apiClient.parameterToString(tokenId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete an API Token for specific user and token id
   * Superadmin-only. Delete an API token for a user.
   * @param id The user id (required)
   * @param tokenId The token id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteApiToken1(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tokenId) throws ApiException {
    this.deleteApiToken1(id, tokenId, Collections.emptyMap());
  }


  /**
   * Delete an API Token for specific user and token id
   * Superadmin-only. Delete an API token for a user.
   * @param id The user id (required)
   * @param tokenId The token id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteApiToken1(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tokenId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteApiToken1");
    }
    
    // verify the required parameter 'tokenId' is set
    if (tokenId == null) {
      throw new ApiException(400, "Missing the required parameter 'tokenId' when calling deleteApiToken1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/{id}/api-tokens/{tokenId}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tokenId" + "\\}", apiClient.escapeString(apiClient.parameterToString(tokenId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete an API Token for specific user and token id
   * 
   * @param id The user id (required)
   * @param tokenId The token id (required)
   * @param tenant  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteApiTokenWithTenant(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tokenId, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.deleteApiTokenWithTenant(id, tokenId, tenant, Collections.emptyMap());
  }


  /**
   * Delete an API Token for specific user and token id
   * 
   * @param id The user id (required)
   * @param tokenId The token id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object deleteApiTokenWithTenant(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tokenId, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteApiTokenWithTenant");
    }
    
    // verify the required parameter 'tokenId' is set
    if (tokenId == null) {
      throw new ApiException(400, "Missing the required parameter 'tokenId' when calling deleteApiTokenWithTenant");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling deleteApiTokenWithTenant");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/service-accounts/{id}/api-tokens/{tokenId}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tokenId" + "\\}", apiClient.escapeString(apiClient.parameterToString(tokenId)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete a user refresh token
   * 
   * @param id The user id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteRefreshToken(@javax.annotation.Nonnull String id) throws ApiException {
    this.deleteRefreshToken(id, Collections.emptyMap());
  }


  /**
   * Delete a user refresh token
   * 
   * @param id The user id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteRefreshToken(@javax.annotation.Nonnull String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteRefreshToken");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/{id}/refresh-token"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete a user
   * Superadmin-only. Delete a user including all its access.
   * @param id The user id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteUser(@javax.annotation.Nonnull String id) throws ApiException {
    this.deleteUser(id, Collections.emptyMap());
  }


  /**
   * Delete a user
   * Superadmin-only. Delete a user including all its access.
   * @param id The user id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteUser(@javax.annotation.Nonnull String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteUser");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Update user password
   * Superadmin-only. Updates whether a user is a superadmin.
   * @param id The user id (required)
   * @param auth The user auth method id (required)
   * @return IAMUserControllerApiUser
   * @throws ApiException if fails to make API call
   */
  public IAMUserControllerApiUser deleteUserAuthMethod(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String auth) throws ApiException {
    return this.deleteUserAuthMethod(id, auth, Collections.emptyMap());
  }


  /**
   * Update user password
   * Superadmin-only. Updates whether a user is a superadmin.
   * @param id The user id (required)
   * @param auth The user auth method id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return IAMUserControllerApiUser
   * @throws ApiException if fails to make API call
   */
  public IAMUserControllerApiUser deleteUserAuthMethod(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String auth, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteUserAuthMethod");
    }
    
    // verify the required parameter 'auth' is set
    if (auth == null) {
      throw new ApiException(400, "Missing the required parameter 'auth' when calling deleteUserAuthMethod");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/{id}/auths/{auth}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "auth" + "\\}", apiClient.escapeString(apiClient.parameterToString(auth)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<IAMUserControllerApiUser> localVarReturnType = new TypeReference<IAMUserControllerApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a user
   * Superadmin-only. Get user account details.
   * @param id The user id (required)
   * @return IAMUserControllerApiUser
   * @throws ApiException if fails to make API call
   */
  public IAMUserControllerApiUser getUser(@javax.annotation.Nonnull String id) throws ApiException {
    return this.getUser(id, Collections.emptyMap());
  }


  /**
   * Get a user
   * Superadmin-only. Get user account details.
   * @param id The user id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return IAMUserControllerApiUser
   * @throws ApiException if fails to make API call
   */
  public IAMUserControllerApiUser getUser(@javax.annotation.Nonnull String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getUser");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<IAMUserControllerApiUser> localVarReturnType = new TypeReference<IAMUserControllerApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Impersonate a user
   * Superadmin-only. Allows an admin to impersonate another user.
   * @param id The user id (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object impersonate(@javax.annotation.Nonnull String id) throws ApiException {
    return this.impersonate(id, Collections.emptyMap());
  }


  /**
   * Impersonate a user
   * Superadmin-only. Allows an admin to impersonate another user.
   * @param id The user id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object impersonate(@javax.annotation.Nonnull String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling impersonate");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/{id}/impersonate"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List API tokens for a specific user
   * 
   * @param id The user id (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listApiTokens(@javax.annotation.Nonnull String id) throws ApiException {
    return this.listApiTokens(id, Collections.emptyMap());
  }


  /**
   * List API tokens for a specific user
   * 
   * @param id The user id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listApiTokens(@javax.annotation.Nonnull String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listApiTokens");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/service-accounts/{id}/api-tokens"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List API tokens for a specific user
   * Superadmin-only. Get all API token existing for a user.
   * @param id The user id (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listApiTokens1(@javax.annotation.Nonnull String id) throws ApiException {
    return this.listApiTokens1(id, Collections.emptyMap());
  }


  /**
   * List API tokens for a specific user
   * Superadmin-only. Get all API token existing for a user.
   * @param id The user id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listApiTokens1(@javax.annotation.Nonnull String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listApiTokens1");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/{id}/api-tokens"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List API tokens for a specific user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listApiTokensWithTenant(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant) throws ApiException {
    return this.listApiTokensWithTenant(id, tenant, Collections.emptyMap());
  }


  /**
   * List API tokens for a specific user
   * 
   * @param id The user id (required)
   * @param tenant  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object listApiTokensWithTenant(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listApiTokensWithTenant");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling listApiTokensWithTenant");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/service-accounts/{id}/api-tokens"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve users
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @return PagedResultsIAMUserControllerApiUserSummary
   * @throws ApiException if fails to make API call
   */
  public PagedResultsIAMUserControllerApiUserSummary listUsers(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nullable String q, @javax.annotation.Nullable List<String> sort) throws ApiException {
    return this.listUsers(page, size, q, sort, Collections.emptyMap());
  }


  /**
   * Retrieve users
   * 
   * @param page The current page (required)
   * @param size The current page size (required)
   * @param q A string filter (optional)
   * @param sort The sort of current page (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return PagedResultsIAMUserControllerApiUserSummary
   * @throws ApiException if fails to make API call
   */
  public PagedResultsIAMUserControllerApiUserSummary listUsers(@javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, @javax.annotation.Nullable String q, @javax.annotation.Nullable List<String> sort, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'page' is set
    if (page == null) {
      throw new ApiException(400, "Missing the required parameter 'page' when calling listUsers");
    }
    
    // verify the required parameter 'size' is set
    if (size == null) {
      throw new ApiException(400, "Missing the required parameter 'size' when calling listUsers");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
    localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "sort", sort));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<PagedResultsIAMUserControllerApiUserSummary> localVarReturnType = new TypeReference<PagedResultsIAMUserControllerApiUserSummary>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update user details
   * Superadmin-only. Updates the the details of a user.
   * @param id The user id (required)
   * @param meControllerApiUserDetailsRequest The user details (required)
   * @return IAMUserControllerApiUser
   * @throws ApiException if fails to make API call
   */
  public IAMUserControllerApiUser patchUser(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull MeControllerApiUserDetailsRequest meControllerApiUserDetailsRequest) throws ApiException {
    return this.patchUser(id, meControllerApiUserDetailsRequest, Collections.emptyMap());
  }


  /**
   * Update user details
   * Superadmin-only. Updates the the details of a user.
   * @param id The user id (required)
   * @param meControllerApiUserDetailsRequest The user details (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return IAMUserControllerApiUser
   * @throws ApiException if fails to make API call
   */
  public IAMUserControllerApiUser patchUser(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull MeControllerApiUserDetailsRequest meControllerApiUserDetailsRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = meControllerApiUserDetailsRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling patchUser");
    }
    
    // verify the required parameter 'meControllerApiUserDetailsRequest' is set
    if (meControllerApiUserDetailsRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'meControllerApiUserDetailsRequest' when calling patchUser");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<IAMUserControllerApiUser> localVarReturnType = new TypeReference<IAMUserControllerApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update user demo
   * Superadmin-only. Updates whether a user is for demo.
   * @param id The user id (required)
   * @param iaMUserControllerApiPatchRestrictedRequest  (required)
   * @throws ApiException if fails to make API call
   */
  public void patchUserDemo(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull IAMUserControllerApiPatchRestrictedRequest iaMUserControllerApiPatchRestrictedRequest) throws ApiException {
    this.patchUserDemo(id, iaMUserControllerApiPatchRestrictedRequest, Collections.emptyMap());
  }


  /**
   * Update user demo
   * Superadmin-only. Updates whether a user is for demo.
   * @param id The user id (required)
   * @param iaMUserControllerApiPatchRestrictedRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void patchUserDemo(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull IAMUserControllerApiPatchRestrictedRequest iaMUserControllerApiPatchRestrictedRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = iaMUserControllerApiPatchRestrictedRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling patchUserDemo");
    }
    
    // verify the required parameter 'iaMUserControllerApiPatchRestrictedRequest' is set
    if (iaMUserControllerApiPatchRestrictedRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'iaMUserControllerApiPatchRestrictedRequest' when calling patchUserDemo");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/{id}/restricted"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Update user password
   * Superadmin-only. Updates whether a user is a superadmin.
   * @param id The user id (required)
   * @param iaMUserControllerApiPatchUserPasswordRequest  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object patchUserPassword(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull IAMUserControllerApiPatchUserPasswordRequest iaMUserControllerApiPatchUserPasswordRequest) throws ApiException {
    return this.patchUserPassword(id, iaMUserControllerApiPatchUserPasswordRequest, Collections.emptyMap());
  }


  /**
   * Update user password
   * Superadmin-only. Updates whether a user is a superadmin.
   * @param id The user id (required)
   * @param iaMUserControllerApiPatchUserPasswordRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object patchUserPassword(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull IAMUserControllerApiPatchUserPasswordRequest iaMUserControllerApiPatchUserPasswordRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = iaMUserControllerApiPatchUserPasswordRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling patchUserPassword");
    }
    
    // verify the required parameter 'iaMUserControllerApiPatchUserPasswordRequest' is set
    if (iaMUserControllerApiPatchUserPasswordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'iaMUserControllerApiPatchUserPasswordRequest' when calling patchUserPassword");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/{id}/password"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update user superadmin privileges
   * Superadmin-only. Updates whether a user is a superadmin.
   * @param id The user id (required)
   * @param apiPatchSuperAdminRequest  (required)
   * @throws ApiException if fails to make API call
   */
  public void patchUserSuperAdmin(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull ApiPatchSuperAdminRequest apiPatchSuperAdminRequest) throws ApiException {
    this.patchUserSuperAdmin(id, apiPatchSuperAdminRequest, Collections.emptyMap());
  }


  /**
   * Update user superadmin privileges
   * Superadmin-only. Updates whether a user is a superadmin.
   * @param id The user id (required)
   * @param apiPatchSuperAdminRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void patchUserSuperAdmin(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull ApiPatchSuperAdminRequest apiPatchSuperAdminRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = apiPatchSuperAdminRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling patchUserSuperAdmin");
    }
    
    // verify the required parameter 'apiPatchSuperAdminRequest' is set
    if (apiPatchSuperAdminRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'apiPatchSuperAdminRequest' when calling patchUserSuperAdmin");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/{id}/superadmin"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Update authenticated user password
   * Changes the login password for the authenticated user.
   * @param meControllerApiUpdatePasswordRequest  (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object updateCurrentUserPassword(@javax.annotation.Nonnull MeControllerApiUpdatePasswordRequest meControllerApiUpdatePasswordRequest) throws ApiException {
    return this.updateCurrentUserPassword(meControllerApiUpdatePasswordRequest, Collections.emptyMap());
  }


  /**
   * Update authenticated user password
   * Changes the login password for the authenticated user.
   * @param meControllerApiUpdatePasswordRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object updateCurrentUserPassword(@javax.annotation.Nonnull MeControllerApiUpdatePasswordRequest meControllerApiUpdatePasswordRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = meControllerApiUpdatePasswordRequest;
    
    // verify the required parameter 'meControllerApiUpdatePasswordRequest' is set
    if (meControllerApiUpdatePasswordRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'meControllerApiUpdatePasswordRequest' when calling updateCurrentUserPassword");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/me/password";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update a user account
   * Superadmin-only. Update an existing user account with an optional password based authentication method.
   * @param id The user id (required)
   * @param iaMUserControllerApiCreateOrUpdateUserRequest  (required)
   * @return IAMUserControllerApiUser
   * @throws ApiException if fails to make API call
   */
  public IAMUserControllerApiUser updateUser(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull IAMUserControllerApiCreateOrUpdateUserRequest iaMUserControllerApiCreateOrUpdateUserRequest) throws ApiException {
    return this.updateUser(id, iaMUserControllerApiCreateOrUpdateUserRequest, Collections.emptyMap());
  }


  /**
   * Update a user account
   * Superadmin-only. Update an existing user account with an optional password based authentication method.
   * @param id The user id (required)
   * @param iaMUserControllerApiCreateOrUpdateUserRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return IAMUserControllerApiUser
   * @throws ApiException if fails to make API call
   */
  public IAMUserControllerApiUser updateUser(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull IAMUserControllerApiCreateOrUpdateUserRequest iaMUserControllerApiCreateOrUpdateUserRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = iaMUserControllerApiCreateOrUpdateUserRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateUser");
    }
    
    // verify the required parameter 'iaMUserControllerApiCreateOrUpdateUserRequest' is set
    if (iaMUserControllerApiCreateOrUpdateUserRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'iaMUserControllerApiCreateOrUpdateUserRequest' when calling updateUser");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<IAMUserControllerApiUser> localVarReturnType = new TypeReference<IAMUserControllerApiUser>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update the list of groups a user belongs to for the given tenant
   * 
   * @param id The user ID (required)
   * @param tenant  (required)
   * @param iaMUserGroupControllerApiUpdateUserGroupsRequest  (required)
   * @throws ApiException if fails to make API call
   */
  public void updateUserGroups(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull IAMUserGroupControllerApiUpdateUserGroupsRequest iaMUserGroupControllerApiUpdateUserGroupsRequest) throws ApiException {
    this.updateUserGroups(id, tenant, iaMUserGroupControllerApiUpdateUserGroupsRequest, Collections.emptyMap());
  }


  /**
   * Update the list of groups a user belongs to for the given tenant
   * 
   * @param id The user ID (required)
   * @param tenant  (required)
   * @param iaMUserGroupControllerApiUpdateUserGroupsRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void updateUserGroups(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull String tenant, @javax.annotation.Nonnull IAMUserGroupControllerApiUpdateUserGroupsRequest iaMUserGroupControllerApiUpdateUserGroupsRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = iaMUserGroupControllerApiUpdateUserGroupsRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateUserGroups");
    }
    
    // verify the required parameter 'tenant' is set
    if (tenant == null) {
      throw new ApiException(400, "Missing the required parameter 'tenant' when calling updateUserGroups");
    }
    
    // verify the required parameter 'iaMUserGroupControllerApiUpdateUserGroupsRequest' is set
    if (iaMUserGroupControllerApiUpdateUserGroupsRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'iaMUserGroupControllerApiUpdateUserGroupsRequest' when calling updateUserGroups");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/{tenant}/users/{id}/groups"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)))
      .replaceAll("\\{" + "tenant" + "\\}", apiClient.escapeString(apiClient.parameterToString(tenant)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
