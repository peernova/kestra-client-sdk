/*
 * Kestra EE
 * All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/> Endpoints designated as Superadmin-only are not tenant-scoped.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kestra.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.kestra.sdk.model.Condition;
import io.kestra.sdk.model.Level;
import io.kestra.sdk.model.StateType;
import io.kestra.sdk.model.TheLabelsToPassToTheExecutionCreated;
import io.kestra.sdk.model.WorkerGroup;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AbstractTrigger
 */
@JsonPropertyOrder({
  AbstractTrigger.JSON_PROPERTY_MIN_LOG_LEVEL,
  AbstractTrigger.JSON_PROPERTY_ID,
  AbstractTrigger.JSON_PROPERTY_TYPE,
  AbstractTrigger.JSON_PROPERTY_VERSION,
  AbstractTrigger.JSON_PROPERTY_DESCRIPTION,
  AbstractTrigger.JSON_PROPERTY_CONDITIONS,
  AbstractTrigger.JSON_PROPERTY_DISABLED,
  AbstractTrigger.JSON_PROPERTY_WORKER_GROUP,
  AbstractTrigger.JSON_PROPERTY_LOG_LEVEL,
  AbstractTrigger.JSON_PROPERTY_LABELS,
  AbstractTrigger.JSON_PROPERTY_STOP_AFTER,
  AbstractTrigger.JSON_PROPERTY_LOG_TO_FILE,
  AbstractTrigger.JSON_PROPERTY_FAIL_ON_TRIGGER_ERROR
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0-SNAPSHOT")
public class AbstractTrigger {
  public static final String JSON_PROPERTY_MIN_LOG_LEVEL = "minLogLevel";
  @javax.annotation.Nullable
  private Level minLogLevel;

  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private String id;

  public static final String JSON_PROPERTY_TYPE = "type";
  @javax.annotation.Nonnull
  private String type;

  public static final String JSON_PROPERTY_VERSION = "version";
  @javax.annotation.Nullable
  private String version;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @javax.annotation.Nullable
  private String description;

  public static final String JSON_PROPERTY_CONDITIONS = "conditions";
  @javax.annotation.Nullable
  private List<Condition> conditions = new ArrayList<>();

  public static final String JSON_PROPERTY_DISABLED = "disabled";
  @javax.annotation.Nonnull
  private Boolean disabled;

  public static final String JSON_PROPERTY_WORKER_GROUP = "workerGroup";
  @javax.annotation.Nullable
  private WorkerGroup workerGroup;

  public static final String JSON_PROPERTY_LOG_LEVEL = "logLevel";
  @javax.annotation.Nullable
  private Level logLevel;

  public static final String JSON_PROPERTY_LABELS = "labels";
  @javax.annotation.Nullable
  private TheLabelsToPassToTheExecutionCreated labels;

  public static final String JSON_PROPERTY_STOP_AFTER = "stopAfter";
  @javax.annotation.Nullable
  private List<StateType> stopAfter = new ArrayList<>();

  public static final String JSON_PROPERTY_LOG_TO_FILE = "logToFile";
  @javax.annotation.Nullable
  private Boolean logToFile;

  public static final String JSON_PROPERTY_FAIL_ON_TRIGGER_ERROR = "failOnTriggerError";
  @javax.annotation.Nullable
  private Boolean failOnTriggerError;

    public static final String JSON_PROPERTY_CRON = "cron";
    @javax.annotation.Nullable
    private String cron;

  public AbstractTrigger() {
  }

  public AbstractTrigger minLogLevel(@javax.annotation.Nullable Level minLogLevel) {

    this.minLogLevel = minLogLevel;
    return this;
  }

  /**
   * Get minLogLevel
   * @return minLogLevel
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIN_LOG_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Level getMinLogLevel() {
    return minLogLevel;
  }


  @JsonProperty(JSON_PROPERTY_MIN_LOG_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinLogLevel(@javax.annotation.Nullable Level minLogLevel) {
    this.minLogLevel = minLogLevel;
  }

  public AbstractTrigger id(@javax.annotation.Nonnull String id) {

    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }

  public AbstractTrigger type(@javax.annotation.Nonnull String type) {

    this.type = type;
    return this;
  }

    /**
     * Get id
     * @return id
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_CRON)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getCron() {
        return cron;
    }


    @JsonProperty(JSON_PROPERTY_CRON)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCron(@javax.annotation.Nonnull String cron) {
        this.cron = cron;
    }

    public AbstractTrigger cron(@javax.annotation.Nonnull String cron) {

        this.cron = cron;
        return this;
    }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(@javax.annotation.Nonnull String type) {
    this.type = type;
  }

  public AbstractTrigger version(@javax.annotation.Nullable String version) {

    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(@javax.annotation.Nullable String version) {
    this.version = version;
  }

  public AbstractTrigger description(@javax.annotation.Nullable String description) {

    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }

  public AbstractTrigger conditions(@javax.annotation.Nullable List<Condition> conditions) {

    this.conditions = conditions;
    return this;
  }

  public AbstractTrigger addConditionsItem(Condition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * Get conditions
   * @return conditions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Condition> getConditions() {
    return conditions;
  }


  @JsonProperty(JSON_PROPERTY_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConditions(@javax.annotation.Nullable List<Condition> conditions) {
    this.conditions = conditions;
  }

  public AbstractTrigger disabled(@javax.annotation.Nonnull Boolean disabled) {

    this.disabled = disabled;
    return this;
  }

  /**
   * Get disabled
   * @return disabled
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DISABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getDisabled() {
    return disabled;
  }


  @JsonProperty(JSON_PROPERTY_DISABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDisabled(@javax.annotation.Nonnull Boolean disabled) {
    this.disabled = disabled;
  }

  public AbstractTrigger workerGroup(@javax.annotation.Nullable WorkerGroup workerGroup) {

    this.workerGroup = workerGroup;
    return this;
  }

  /**
   * Get workerGroup
   * @return workerGroup
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WORKER_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public WorkerGroup getWorkerGroup() {
    return workerGroup;
  }


  @JsonProperty(JSON_PROPERTY_WORKER_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWorkerGroup(@javax.annotation.Nullable WorkerGroup workerGroup) {
    this.workerGroup = workerGroup;
  }

  public AbstractTrigger logLevel(@javax.annotation.Nullable Level logLevel) {

    this.logLevel = logLevel;
    return this;
  }

  /**
   * Get logLevel
   * @return logLevel
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOG_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Level getLogLevel() {
    return logLevel;
  }


  @JsonProperty(JSON_PROPERTY_LOG_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogLevel(@javax.annotation.Nullable Level logLevel) {
    this.logLevel = logLevel;
  }

  public AbstractTrigger labels(@javax.annotation.Nullable TheLabelsToPassToTheExecutionCreated labels) {

    this.labels = labels;
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TheLabelsToPassToTheExecutionCreated getLabels() {
    return labels;
  }


  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabels(@javax.annotation.Nullable TheLabelsToPassToTheExecutionCreated labels) {
    this.labels = labels;
  }

  public AbstractTrigger stopAfter(@javax.annotation.Nullable List<StateType> stopAfter) {

    this.stopAfter = stopAfter;
    return this;
  }

  public AbstractTrigger addStopAfterItem(StateType stopAfterItem) {
    if (this.stopAfter == null) {
      this.stopAfter = new ArrayList<>();
    }
    this.stopAfter.add(stopAfterItem);
    return this;
  }

  /**
   * Get stopAfter
   * @return stopAfter
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STOP_AFTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<StateType> getStopAfter() {
    return stopAfter;
  }


  @JsonProperty(JSON_PROPERTY_STOP_AFTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStopAfter(@javax.annotation.Nullable List<StateType> stopAfter) {
    this.stopAfter = stopAfter;
  }

  public AbstractTrigger logToFile(@javax.annotation.Nullable Boolean logToFile) {

    this.logToFile = logToFile;
    return this;
  }

  /**
   * Get logToFile
   * @return logToFile
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOG_TO_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLogToFile() {
    return logToFile;
  }


  @JsonProperty(JSON_PROPERTY_LOG_TO_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogToFile(@javax.annotation.Nullable Boolean logToFile) {
    this.logToFile = logToFile;
  }

  public AbstractTrigger failOnTriggerError(@javax.annotation.Nullable Boolean failOnTriggerError) {

    this.failOnTriggerError = failOnTriggerError;
    return this;
  }

  /**
   * Get failOnTriggerError
   * @return failOnTriggerError
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FAIL_ON_TRIGGER_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getFailOnTriggerError() {
    return failOnTriggerError;
  }


  @JsonProperty(JSON_PROPERTY_FAIL_ON_TRIGGER_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFailOnTriggerError(@javax.annotation.Nullable Boolean failOnTriggerError) {
    this.failOnTriggerError = failOnTriggerError;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbstractTrigger abstractTrigger = (AbstractTrigger) o;
    return Objects.equals(this.minLogLevel, abstractTrigger.minLogLevel) &&
        Objects.equals(this.id, abstractTrigger.id) &&
        Objects.equals(this.type, abstractTrigger.type) &&
        Objects.equals(this.version, abstractTrigger.version) &&
        Objects.equals(this.description, abstractTrigger.description) &&
        Objects.equals(this.conditions, abstractTrigger.conditions) &&
        Objects.equals(this.disabled, abstractTrigger.disabled) &&
        Objects.equals(this.workerGroup, abstractTrigger.workerGroup) &&
        Objects.equals(this.logLevel, abstractTrigger.logLevel) &&
        Objects.equals(this.labels, abstractTrigger.labels) &&
        Objects.equals(this.stopAfter, abstractTrigger.stopAfter) &&
        Objects.equals(this.logToFile, abstractTrigger.logToFile) &&
        Objects.equals(this.failOnTriggerError, abstractTrigger.failOnTriggerError);
  }

  @Override
  public int hashCode() {
    return Objects.hash(minLogLevel, id, type, version, description, conditions, disabled, workerGroup, logLevel, labels, stopAfter, logToFile, failOnTriggerError);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbstractTrigger {\n");
    sb.append("    minLogLevel: ").append(toIndentedString(minLogLevel)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    workerGroup: ").append(toIndentedString(workerGroup)).append("\n");
    sb.append("    logLevel: ").append(toIndentedString(logLevel)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    stopAfter: ").append(toIndentedString(stopAfter)).append("\n");
    sb.append("    logToFile: ").append(toIndentedString(logToFile)).append("\n");
    sb.append("    failOnTriggerError: ").append(toIndentedString(failOnTriggerError)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

